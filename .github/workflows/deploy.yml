name: Deploy to VPS

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare SSH key (base64)
        run: |
          echo "${{ secrets.VPS_SSH_KEY_B64 }}" | base64 -d > key.pem
          chmod 600 key.pem

      - name: Add host to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: SSH debug (verbose)
        env:
          SSH_PORT: ${{ secrets.VPS_SSH_PORT }}
        run: |
          PORT_OPT=${SSH_PORT:+-p $SSH_PORT}
          ssh -vvv -i key.pem -o StrictHostKeyChecking=no $PORT_OPT ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "echo 'SSH OK'"

      - name: Deploy over SSH
        env:
          SSH_PORT: ${{ secrets.VPS_SSH_PORT }}
          VPS_PATH: ${{ secrets.VPS_PATH }}
        run: |
          PORT_OPT=${SSH_PORT:+-p $SSH_PORT}
          echo "üîç SSH –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:"
          echo "  Host: ${{ secrets.VPS_HOST }}"
          echo "  User: ${{ secrets.VPS_USER }}"
          echo "  Port: ${{ secrets.VPS_SSH_PORT }}"
          echo "  Key file exists: $(ls -la key.pem)"
          echo "üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º SSH —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ..."
          ssh -i key.pem $PORT_OPT ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "echo 'SSH —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!'"
          echo "üîç –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–ø–ª–æ–π —á–µ—Ä–µ–∑ SSH..."
          ssh -i key.pem $PORT_OPT ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "
            # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º set -e, —á—Ç–æ–±—ã –∫–æ–º–∞–Ω–¥—ã —Å –æ—à–∏–±–∫–∞–º–∏ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–ª–∏ —Å–∫—Ä–∏–ø—Ç
            echo '=== –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–ø–ª–æ–π ==='
            echo '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: \$(whoami)'
            echo 'UID: \$(id -u)'
            echo '–ü—Ä–∞–≤–∞ –Ω–∞ /tmp: \$(ls -ld /tmp)'
            
            # –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Å –∫–æ–¥–æ–º
            mkdir -p \"$VPS_PATH\"
            if [ ! -d \"$VPS_PATH/.git\" ]; then
              cd \"\$(dirname \"$VPS_PATH\")\"
              if [ -d rogein-generator ]; then rm -rf rogein-generator; fi
              git clone https://github.com/${{ github.repository }} rogein-generator
              mv rogein-generator \"\$(basename \"$VPS_PATH\")\"
            fi

            cd \"$VPS_PATH\"
            echo '=== –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥ ==='
            git fetch --all
            git reset --hard origin/main
            
            echo '=== –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤ ==='
            ls -la
            ls -la backend/
            ls -la backend/app/
            echo '=== –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —Ñ–∞–π–ª—ã ==='
            ls -la index.html || echo 'index.html –Ω–µ –Ω–∞–π–¥–µ–Ω'
            ls -la src/ || echo 'src/ –Ω–µ –Ω–∞–π–¥–µ–Ω'
            
            echo '=== –ü—Ä–æ–≤–µ—Ä—è–µ–º Python –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ ==='
            python3 --version
            python3 -c 'import uvicorn; print(\"uvicorn OK\")' || echo 'uvicorn –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'
            python3 -c 'import fastapi; print(\"fastapi OK\")' || echo 'fastapi –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'
            
            echo '=== –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ ==='
            if ! python3 -c 'import uvicorn' 2>/dev/null; then
              echo '–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º uvicorn...'
              pip3 install --user uvicorn fastapi
            fi
            
            if ! python3 -c 'import flask' 2>/dev/null; then
              echo '–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Flask –¥–ª—è OSMnx...'
              pip3 install --user flask flask-cors
            fi
            
            if ! python3 -c 'import osmnx' 2>/dev/null; then
              echo '–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º OSMnx...'
              pip3 install --user osmnx geopandas
            fi
            
            echo '=== –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥—É–ª—å ==='
            cd backend
            python3 -c 'import app.simple_main; print(\"–ú–æ–¥—É–ª—å app.simple_main –Ω–∞–π–¥–µ–Ω\")' || echo '–ú–û–î–£–õ–¨ –ù–ï –ù–ê–ô–î–ï–ù'

            echo '=== –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã ==='
            CURRENT_USER=\$(whoami)
            echo \"–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: \$CURRENT_USER\"
            
            echo '–ü—Ä–æ—Ü–µ—Å—Å—ã uvicorn:'
            ps aux | grep uvicorn | grep -v grep || echo 'uvicorn –Ω–µ –Ω–∞–π–¥–µ–Ω'
            
            echo '–ü—Ä–æ—Ü–µ—Å—Å—ã python (osmnx):'
            ps aux | grep 'backend_osmnx.py' | grep -v grep || echo 'osmnx –Ω–µ –Ω–∞–π–¥–µ–Ω'
            
            echo '–ü–æ–ø—ã—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã (–º–æ–∂–µ—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑-–∑–∞ –ø—Ä–∞–≤):'
            pkill -u \$CURRENT_USER -f 'uvicorn.*simple_main' 2>/dev/null || echo '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å uvicorn (–Ω–µ—Ç –ø—Ä–∞–≤)'
            pkill -u \$CURRENT_USER -f 'backend_osmnx.py' 2>/dev/null || echo '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å osmnx (–Ω–µ—Ç –ø—Ä–∞–≤)'
            sleep 3
            
            echo '=== –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç—ã ==='
            # –ò—â–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç –¥–ª—è FastAPI (6002-6010)
            export FASTAPI_PORT=6002
            for port in 6002 6003 6004 6005 6006 6007 6008 6009 6010; do
              if ! lsof -i:\$port >/dev/null 2>&1; then
                echo \"–ù–∞–π–¥–µ–Ω —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç \$port –¥–ª—è FastAPI\"
                export FASTAPI_PORT=\$port
                break
              else
                echo \"–ü–æ—Ä—Ç \$port –∑–∞–Ω—è—Ç\"
              fi
            done
            
            # –ò—â–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç –¥–ª—è OSMnx (6011-6020)
            export OSMNX_PORT=6011
            for port in 6011 6012 6013 6014 6015 6016 6017 6018 6019 6020; do
              if ! lsof -i:\$port >/dev/null 2>&1; then
                echo \"–ù–∞–π–¥–µ–Ω —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç \$port –¥–ª—è OSMnx\"
                export OSMNX_PORT=\$port
                break
              else
                echo \"–ü–æ—Ä—Ç \$port –∑–∞–Ω—è—Ç\"
              fi
            done
            
            echo \"–ë—É–¥–µ–º –∑–∞–ø—É—Å–∫–∞—Ç—å FastAPI –Ω–∞ –ø–æ—Ä—Ç—É \$FASTAPI_PORT\"
            echo \"–ë—É–¥–µ–º –∑–∞–ø—É—Å–∫–∞—Ç—å OSMnx –Ω–∞ –ø–æ—Ä—Ç—É \$OSMNX_PORT\"
            sleep 2
            
            echo '=== –ó–∞–ø—É—Å–∫–∞–µ–º FastAPI ==='
            cd backend
            echo '–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: \$(pwd)'
            
            nohup python3 -m uvicorn app.simple_main:app --host 0.0.0.0 --port \$FASTAPI_PORT > /tmp/fastapi.log 2>&1 &
            sleep 3
            
            echo '=== –ó–∞–ø—É—Å–∫–∞–µ–º OSMnx Backend ==='
            cd ..
            echo '–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: \$(pwd)'
            echo '–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: \$(ls -la)'
            
            # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º backend_osmnx.py –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω—É–∂–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞
            sed -i \"s/port=5000/port=\$OSMNX_PORT/g\" backend_osmnx.py
            nohup python3 backend_osmnx.py > /tmp/osmnx.log 2>&1 &
            sleep 3
            
            echo '=== –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ ==='
            echo '–ü—Ä–æ—Ü–µ—Å—Å—ã uvicorn:'
            ps aux | grep uvicorn | grep -v grep || echo 'uvicorn –Ω–µ –Ω–∞–π–¥–µ–Ω'
            echo '–ü—Ä–æ—Ü–µ—Å—Å—ã python (osmnx):'
            ps aux | grep 'backend_osmnx.py' | grep -v grep || echo 'osmnx –Ω–µ –Ω–∞–π–¥–µ–Ω'
            
            echo '=== –ü—Ä–æ–≤–µ—Ä—è–µ–º FastAPI ==='
            curl -s http://localhost:\$FASTAPI_PORT/test || echo 'FastAPI test –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç'
            curl -s http://localhost:\$FASTAPI_PORT/health || echo 'FastAPI health –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç'
            
            echo '=== –ü—Ä–æ–≤–µ—Ä—è–µ–º OSMnx ==='
            curl -s http://localhost:\$OSMNX_PORT/api/health || echo 'OSMnx health –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç'
            
            echo '=== –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª backend_osmnx.py ==='
            if [ -f \"backend_osmnx.py\" ]; then
              echo \"–§–∞–π–ª backend_osmnx.py –Ω–∞–π–¥–µ–Ω\"
              echo \"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: \$(wc -l < backend_osmnx.py) —Å—Ç—Ä–æ–∫\"
              echo \"–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å—Ç—Ä–æ–∫ —Ñ–∞–π–ª–∞:\"
              tail -5 backend_osmnx.py
            else
              echo \"–§–∞–π–ª backend_osmnx.py –ù–ï –ù–ê–ô–î–ï–ù\"
            fi
            
            echo '=== –õ–æ–≥–∏ FastAPI ==='
            cat /tmp/fastapi.log || echo 'FastAPI –ª–æ–≥ –ø—É—Å—Ç'
            
            echo '=== –õ–æ–≥–∏ OSMnx ==='
            cat /tmp/osmnx.log || echo 'OSMnx –ª–æ–≥ –ø—É—Å—Ç'
            
            echo \"Deployed FastAPI at: http://${{ secrets.VPS_HOST }}:\$FASTAPI_PORT/health\"
            echo \"Deployed OSMnx at: http://${{ secrets.VPS_HOST }}:\$OSMNX_PORT/api/health\"
          "