/**
 * –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Overpass API
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ OpenStreetMap
 */

const OVERPASS_URL = 'https://overpass-api.de/api/interpreter';
const TIMEOUT = 60; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π

// –ü—Ä–æ—Å—Ç–æ–π –∫—ç—à –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
const queryCache = new Map();

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–±–∏–ª—å–Ω—É—é —Å–µ—Ç—å
function isMobileNetwork() {
  const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
  const connection = window.navigator.connection || window.navigator.mozConnection || window.navigator.webkitConnection;
  
  // –ï—Å–ª–∏ —ç—Ç–æ –º–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ 4G/5G
  return isMobile && (!connection || !connection.effectiveType?.includes('4g'));
}

// –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
export function clearQueryCache() {
  queryCache.clear();
  console.log('–ö—ç—à Overpass API –æ—á–∏—â–µ–Ω');
}

// –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Overpass API
async function executeOverpassQuery(query, errorMessage, customTimeout = TIMEOUT) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
  const cacheKey = query + customTimeout;
  if (queryCache.has(cacheKey)) {
    console.log(`${errorMessage} –∏–∑ –∫—ç—à–∞:`, queryCache.get(cacheKey).length, '—ç–ª–µ–º–µ–Ω—Ç–æ–≤');
    return queryCache.get(cacheKey);
  }
  
  try {
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), customTimeout * 1000);
    
  const response = await fetch(OVERPASS_URL, {
    method: 'POST',
    body: query,
      headers: { 
        'Content-Type': 'text/plain',
        'Accept': 'application/json'
      },
      signal: controller.signal
    });
    
    clearTimeout(timeoutId);
  
  if (!response.ok) {
    const errorText = await response.text();
    console.error(`–û—à–∏–±–∫–∞ Overpass API (${errorMessage}):`, response.status, response.statusText, errorText);
    throw new Error(`${errorMessage}: ${response.status} ${response.statusText}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–º–µ–Ω—å—à–∏—Ç—å –æ–±–ª–∞—Å—Ç—å.`);
  }
  
  const data = await response.json();
    const elements = data.elements || [];
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
    queryCache.set(cacheKey, elements);
    
    console.log(`${errorMessage} –∏–∑ Overpass:`, elements.length, '—ç–ª–µ–º–µ–Ω—Ç–æ–≤');
    return elements;
  } catch (error) {
    if (error.name === 'AbortError') {
      console.error(`–¢–∞–π–º–∞—É—Ç Overpass API (${errorMessage})`);
      throw new Error(`${errorMessage}: –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (${customTimeout}—Å). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–º–µ–Ω—å—à–∏—Ç—å –æ–±–ª–∞—Å—Ç—å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Wi-Fi.`);
    }
    console.error(`–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ (${errorMessage}):`, error);
    throw new Error(`${errorMessage}: –û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.`);
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫—Ä—ã—Ç—ã—Ö –∑–æ–Ω (–≤–æ–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã, —á–∞—Å—Ç–Ω—ã–µ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏)
export async function fetchClosedAreas(bounds) {
  const s = bounds.getSouth();
  const w = bounds.getWest();
  const n = bounds.getNorth();
  const e = bounds.getEast();
  const bbox = `${s},${w},${n},${e}`;

  const query = `[
    out:json][timeout:${TIMEOUT}];
    (
      way["landuse"="military"](${bbox});
      relation["landuse"="military"](${bbox});
      way["military"](${bbox});
      relation["military"](${bbox});
      way["access"="private"](${bbox});
      relation["access"="private"](${bbox});
    );
    out geom;`;

  return executeOverpassQuery(query, '–ó–∞–∫—Ä—ã—Ç—ã–µ –∑–æ–Ω—ã', TIMEOUT);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–¥–æ—ë–º–æ–≤
export async function fetchWaterAreas(bounds) {
  const s = bounds.getSouth();
  const w = bounds.getWest();
  const n = bounds.getNorth();
  const e = bounds.getEast();
  const bbox = `${s},${w},${n},${e}`;

  const query = `[
    out:json][timeout:${TIMEOUT}];
    (
      way["natural"="water"](${bbox});
      relation["natural"="water"](${bbox});
      way["water"="lake"](${bbox});
      relation["water"="lake"](${bbox});
      way["landuse"="reservoir"](${bbox});
      relation["landuse"="reservoir"](${bbox});
      way["landuse"="basin"](${bbox});
      relation["landuse"="basin"](${bbox});
    );
    out geom;`;

  return executeOverpassQuery(query, '–í–æ–¥–æ—ë–º—ã', TIMEOUT);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞—Ä—å–µ—Ä–æ–≤ - —Ç–æ–ª—å–∫–æ –Ø–í–ù–û –ó–ê–ü–†–ï–©–Å–ù–ù–´–ï
export async function fetchBarriers(bounds) {
  const s = bounds.getSouth();
  const w = bounds.getWest();
  const n = bounds.getNorth();
  const e = bounds.getEast();
  const bbox = `${s},${w},${n},${e}`;

  const query = `[
    out:json][timeout:${TIMEOUT}];
    (
      // –¢–û–õ–¨–ö–û —ç–ª–µ–º–µ–Ω—Ç—ã —Å –Ø–í–ù–´–ú –∑–∞–ø—Ä–µ—Ç–æ–º –¥–æ—Å—Ç—É–ø–∞
      way["access"="no"](${bbox});
      way["access"="private"](${bbox});
      way["foot"="no"](${bbox});
      node["access"="no"](${bbox});
      node["access"="private"](${bbox});
      node["foot"="no"](${bbox});
      relation["access"="no"](${bbox});
      relation["access"="private"](${bbox});
      relation["foot"="no"](${bbox});
      
      // –°—Ç–µ–Ω—ã - –æ–±—ã—á–Ω–æ –Ω–µ–ø—Ä–æ—Ö–æ–¥–∏–º—ã –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é
      way["barrier"="wall"](${bbox});
    );
    out geom;`;

  return executeOverpassQuery(query, '–ë–∞—Ä—å–µ—Ä—ã', TIMEOUT);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—à–µ—Ö–æ–¥–Ω—ã—Ö –ø—É—Ç–µ–π –∏ –¥–æ—Ä–æ–≥ –ø–æ —Ç–∏–ø–∞–º
export async function fetchPaths(bounds, statusCallback) {
  const s = bounds.getSouth();
  const w = bounds.getWest();
  const n = bounds.getNorth();
  const e = bounds.getEast();
  const bbox = `${s},${w},${n},${e}`;

  let allPaths = [];
  
  // –°–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ –¥–æ—Ä–æ–≥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
  const pathTypes = [
    { type: 'path', name: '–ü–µ—à–µ—Ö–æ–¥–Ω—ã–µ —Ç—Ä–æ–ø—ã' },
    { type: 'footway', name: '–ü–µ—à–µ—Ö–æ–¥–Ω—ã–µ –¥–æ—Ä–æ–∂–∫–∏' },
    { type: 'cycleway', name: '–í–µ–ª–æ—Å–∏–ø–µ–¥–Ω—ã–µ –¥–æ—Ä–æ–∂–∫–∏' },
    { type: 'track', name: '–ü–æ–ª–µ–≤—ã–µ –¥–æ—Ä–æ–≥–∏' },
    { type: 'service', name: '–°–ª—É–∂–µ–±–Ω—ã–µ –¥–æ—Ä–æ–≥–∏' },
    { type: 'bridleway', name: '–ö–æ–Ω–Ω—ã–µ —Ç—Ä–æ–ø—ã' },
    { type: 'unclassified', name: '–ù–µ–∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ—Ä–æ–≥–∏' },
    { type: 'residential', name: '–ñ–∏–ª—ã–µ —É–ª–∏—Ü—ã' },
    { type: 'living_street', name: '–ñ–∏–ª—ã–µ –∑–æ–Ω—ã' },
    { type: 'steps', name: '–õ–µ—Å—Ç–Ω–∏—Ü—ã' },
    { type: 'pedestrian', name: '–ü–µ—à–µ—Ö–æ–¥–Ω—ã–µ –∑–æ–Ω—ã' }
    // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: crossing –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –∫–∞–∫ footway=crossing
  ];

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–∏–ø –æ—Ç–¥–µ–ª—å–Ω–æ
  const isMobile = isMobileNetwork();
  
  for (const pathType of pathTypes) {
    try {
      statusCallback(`–ó–∞–≥—Ä—É–∑–∫–∞ ${pathType.name}...`);
      
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–µ—à–µ—Ö–æ–¥–Ω—ã—Ö —Ç—Ä–æ–ø (highway=path)
      let timeout, maxsize;
      const isPathType = pathType.type === 'path';
      
      if (isMobile && isPathType) {
        // –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π –∏ –ø–µ—à–µ—Ö–æ–¥–Ω—ã—Ö —Ç—Ä–æ–ø - –æ—á–µ–Ω—å –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        timeout = 30; // 30 —Å–µ–∫—É–Ω–¥
        maxsize = 2000000; // 2 –ú–ë –º–∞–∫—Å–∏–º—É–º
        statusCallback(`üì± –ú–æ–±–∏–ª—å–Ω–∞—è —Å–µ—Ç—å: ${pathType.name} (–ª–∏–º–∏—Ç 2–ú–ë, 30—Å)`);
      } else if (isPathType) {
        // –î–ª—è –ø–µ—à–µ—Ö–æ–¥–Ω—ã—Ö —Ç—Ä–æ–ø –Ω–∞ –æ–±—ã—á–Ω—ã—Ö —Å–µ—Ç—è—Ö
        timeout = 30; // 30 —Å–µ–∫—É–Ω–¥
        maxsize = 5000000; // 5 –ú–ë
      } else {
        // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤
        timeout = TIMEOUT; // 60 —Å–µ–∫—É–Ω–¥
        maxsize = 10000000; // 10 –ú–ë
      }
      
      // –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º out geom –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –≥–µ–æ–º–µ—Ç—Ä–∏–∏ —Ç—Ä–æ–ø
      const query = `[out:json][timeout:${timeout}][maxsize:${maxsize}];
        way["highway"="${pathType.type}"](${bbox});
        out geom;`;

      const paths = await executeOverpassQuery(query, pathType.name, timeout);
      allPaths = allPaths.concat(paths);
      
      // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–µ—à–µ—Ö–æ–¥–Ω—ã—Ö —Ç—Ä–æ–ø
      if (pathType.type === 'path' && paths.length > 0) {
        console.log(`–û—Ç–ª–∞–¥–∫–∞ ${pathType.name}:`, {
          count: paths.length,
          firstPath: {
            hasGeometry: !!paths[0].geometry,
            geometryType: typeof paths[0].geometry,
            isArray: Array.isArray(paths[0].geometry),
            geometryLength: paths[0].geometry?.length,
            firstCoord: paths[0].geometry?.[0],
            firstCoordType: typeof paths[0].geometry?.[0]
          }
        });
      }
      
      statusCallback(`‚úÖ ${pathType.name}: ${paths.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
      
    } catch (error) {
      console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å ${pathType.name}:`, error.message);
      statusCallback(`‚ö†Ô∏è ${pathType.name}: ${error.message}`);
      
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–µ—à–µ—Ö–æ–¥–Ω—ã—Ö —Ç—Ä–æ–ø (highway=path)
      if (pathType.type === 'path') {
        statusCallback(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${pathType.name}...`);
        try {
          // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å –µ—â–µ –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–º–∏ –ª–∏–º–∏—Ç–∞–º–∏ –¥–ª—è –ø–µ—à–µ—Ö–æ–¥–Ω—ã—Ö —Ç—Ä–æ–ø
          const retryTimeout = isMobile ? 20 : 25; // –ï—â–µ –º–µ–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏
          const retryMaxsize = isMobile ? 1000000 : 2000000; // –ï—â–µ –º–µ–Ω—å—à–µ –¥–∞–Ω–Ω—ã—Ö
          
          // –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º out geom –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
          const retryQuery = `[out:json][timeout:${retryTimeout}][maxsize:${retryMaxsize}];
            way["highway"="${pathType.type}"](${bbox});
            out geom;`;
          
          const retryPaths = await executeOverpassQuery(retryQuery, `${pathType.name} (–ø–æ–≤—Ç–æ—Ä)`, retryTimeout);
          allPaths = allPaths.concat(retryPaths);
          statusCallback(`‚úÖ ${pathType.name} (–ø–æ–≤—Ç–æ—Ä): ${retryPaths.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
        } catch (retryError) {
          console.warn(`–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å:`, retryError.message);
          statusCallback(`‚ùå ${pathType.name}: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–∂–µ —Å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π`);
          
          // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã
          if (isMobile) {
            statusCallback(`üîÑ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –¥–ª—è ${pathType.name} (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã)...`);
            try {
              // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –≤—Å–µ–≥–¥–∞ out geom
              const lastRetryQuery = `[out:json][timeout:15][maxsize:500000];
                way["highway"="${pathType.type}"](${bbox});
                out geom;`;
              
              const lastRetryPaths = await executeOverpassQuery(lastRetryQuery, `${pathType.name} (–ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞)`, 15);
              allPaths = allPaths.concat(lastRetryPaths);
              statusCallback(`‚úÖ ${pathType.name} (–ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞): ${lastRetryPaths.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
            } catch (lastError) {
              console.warn(`–ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å:`, lastError.message);
              statusCallback(`‚ùå ${pathType.name}: –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã`);
            }
          }
        }
      }
    }
  }

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º footway=crossing
  try {
    statusCallback('–ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—à–µ—Ö–æ–¥–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤...');
    
    const query = `[out:json][timeout:${TIMEOUT}][maxsize:10000000];
      way["footway"="crossing"](${bbox});
      out geom;`;

    const crossings = await executeOverpassQuery(query, '–ü–µ—à–µ—Ö–æ–¥–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã', TIMEOUT);
    allPaths = allPaths.concat(crossings);
    
    statusCallback(`‚úÖ –ü–µ—à–µ—Ö–æ–¥–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã: ${crossings.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
    
  } catch (error) {
    console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—à–µ—Ö–æ–¥–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã:', error.message);
    statusCallback(`‚ö†Ô∏è –ü–µ—à–µ—Ö–æ–¥–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã: ${error.message}`);
  }

  return allPaths;
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–æ–ø –ø–æ —á–∞—Å—Ç—è–º –¥–ª—è –±–æ–ª—å—à–∏—Ö –æ–±–ª–∞—Å—Ç–µ–π
export async function fetchPathsInChunks(bounds, statusCallback) {
  const s = bounds.getSouth();
  const w = bounds.getWest();
  const n = bounds.getNorth();
  const e = bounds.getEast();
  
  // –†–∞–∑–±–∏–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å –Ω–∞ 4 —á–∞—Å—Ç–∏
  const midLat = (s + n) / 2;
  const midLng = (w + e) / 2;
  
  const chunks = [
    { s, w, n: midLat, e: midLng }, // –Æ–≥–æ-–∑–∞–ø–∞–¥
    { s, w: midLng, n: midLat, e }, // –Æ–≥–æ-–≤–æ—Å—Ç–æ–∫
    { s: midLat, w, n, e: midLng }, // –°–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥
    { s: midLat, w: midLng, n, e }  // –°–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ–∫
  ];
  
  let allPaths = [];
  
  // –°–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ –¥–æ—Ä–æ–≥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
  const pathTypes = [
    { type: 'path', name: '–ü–µ—à–µ—Ö–æ–¥–Ω—ã–µ —Ç—Ä–æ–ø—ã' },
    { type: 'footway', name: '–ü–µ—à–µ—Ö–æ–¥–Ω—ã–µ –¥–æ—Ä–æ–∂–∫–∏' },
    { type: 'cycleway', name: '–í–µ–ª–æ—Å–∏–ø–µ–¥–Ω—ã–µ –¥–æ—Ä–æ–∂–∫–∏' },
    { type: 'track', name: '–ü–æ–ª–µ–≤—ã–µ –¥–æ—Ä–æ–≥–∏' },
    { type: 'service', name: '–°–ª—É–∂–µ–±–Ω—ã–µ –¥–æ—Ä–æ–≥–∏' },
    { type: 'bridleway', name: '–ö–æ–Ω–Ω—ã–µ —Ç—Ä–æ–ø—ã' },
    { type: 'unclassified', name: '–ù–µ–∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ—Ä–æ–≥–∏' },
    { type: 'residential', name: '–ñ–∏–ª—ã–µ —É–ª–∏—Ü—ã' },
    { type: 'living_street', name: '–ñ–∏–ª—ã–µ –∑–æ–Ω—ã' },
    { type: 'steps', name: '–õ–µ—Å—Ç–Ω–∏—Ü—ã' },
    { type: 'pedestrian', name: '–ü–µ—à–µ—Ö–æ–¥–Ω—ã–µ –∑–æ–Ω—ã' }
    // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: crossing –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –∫–∞–∫ footway=crossing
  ];
  
  for (let i = 0; i < chunks.length; i++) {
    const chunk = chunks[i];
    const bbox = `${chunk.s},${chunk.w},${chunk.n},${chunk.e}`;
    
    statusCallback(`–ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Å—Ç–∏ ${i + 1}/4...`);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–∏–ø —Ç—Ä–æ–ø –≤ —ç—Ç–æ–π —á–∞—Å—Ç–∏
    for (const pathType of pathTypes) {
      try {
        statusCallback(`–ß–∞—Å—Ç—å ${i + 1}/4: ${pathType.name}...`);
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–µ—à–µ—Ö–æ–¥–Ω—ã—Ö —Ç—Ä–æ–ø –≤ —á–∞—Å—Ç—è—Ö
        const isPathType = pathType.type === 'path';
        const isMobileChunk = isMobileNetwork();
        
        let timeout, maxsize;
        if (isPathType && isMobileChunk) {
          // –î–ª—è –ø–µ—à–µ—Ö–æ–¥–Ω—ã—Ö —Ç—Ä–æ–ø –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö –≤ —á–∞—Å—Ç—è—Ö - –æ—á–µ–Ω—å —Å—Ç—Ä–æ–≥–∏–µ –ª–∏–º–∏—Ç—ã
          timeout = 15; // 15 —Å–µ–∫—É–Ω–¥
          maxsize = 1000000; // 1 –ú–ë –º–∞–∫—Å–∏–º—É–º
          statusCallback(`üì± –ß–∞—Å—Ç—å ${i + 1}/4: ${pathType.name} (–º–æ–±–∏–ª—å–Ω–∞—è —Å–µ—Ç—å, –ª–∏–º–∏—Ç 1–ú–ë, 15—Å)`);
        } else if (isPathType) {
          // –î–ª—è –ø–µ—à–µ—Ö–æ–¥–Ω—ã—Ö —Ç—Ä–æ–ø –≤ —á–∞—Å—Ç—è—Ö
          timeout = 20; // 20 —Å–µ–∫—É–Ω–¥
          maxsize = 2000000; // 2 –ú–ë
        } else {
          // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤ —á–∞—Å—Ç—è—Ö
          timeout = TIMEOUT; // 60 —Å–µ–∫—É–Ω–¥
          maxsize = 5000000; // 5 –ú–ë
        }
        
        const query = `[out:json][timeout:${timeout}][maxsize:${maxsize}];
          way["highway"="${pathType.type}"](${bbox});
          out geom;`;

        const paths = await executeOverpassQuery(query, `–ß–∞—Å—Ç—å ${i + 1}/4: ${pathType.name}`, timeout);
        allPaths = allPaths.concat(paths);
        
        statusCallback(`‚úÖ –ß–∞—Å—Ç—å ${i + 1}/4: ${pathType.name} (${paths.length})`);
        
      } catch (error) {
        console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–∞—Å—Ç—å ${i + 1}: ${pathType.name}:`, error.message);
        statusCallback(`‚ö†Ô∏è –ß–∞—Å—Ç—å ${i + 1}/4: ${pathType.name}: ${error.message}`);
      }
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º footway=crossing –¥–ª—è —ç—Ç–æ–π —á–∞—Å—Ç–∏
    try {
      statusCallback(`–ß–∞—Å—Ç—å ${i + 1}/4: –ü–µ—à–µ—Ö–æ–¥–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã...`);
      
      const query = `[out:json][timeout:${TIMEOUT}][maxsize:5000000];
        way["footway"="crossing"](${bbox});
    out geom;`;

      const crossings = await executeOverpassQuery(query, `–ß–∞—Å—Ç—å ${i + 1}/4: –ü–µ—à–µ—Ö–æ–¥–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã`, TIMEOUT);
      allPaths = allPaths.concat(crossings);
      
      statusCallback(`‚úÖ –ß–∞—Å—Ç—å ${i + 1}/4: –ü–µ—à–µ—Ö–æ–¥–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã (${crossings.length})`);
      
    } catch (error) {
      console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–∞—Å—Ç—å ${i + 1}: –ü–µ—à–µ—Ö–æ–¥–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã:`, error.message);
      statusCallback(`‚ö†Ô∏è –ß–∞—Å—Ç—å ${i + 1}/4: –ü–µ—à–µ—Ö–æ–¥–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã: ${error.message}`);
    }
  }
  
  return allPaths;
} 