/**
 * –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OSMnx Backend API
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –±—ã—Å—Ç—Ä—É—é –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö OpenStreetMap —á–µ—Ä–µ–∑ Python backend
 */

import { OSMNX_API_BASE, CONFIG_VERSION } from './config.js';
const REQUEST_TIMEOUT = 30000; // 30 —Å–µ–∫—É–Ω–¥
const MAX_RETRIES = 3; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
const RETRY_DELAY = 1000; // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ –º—Å

// –õ–æ–≥–∏—Ä—É–µ–º –≤–µ—Ä—Å–∏—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
console.log(`üîß OSMnx API –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω, –≤–µ—Ä—Å–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${CONFIG_VERSION}`);
console.log(`üåê OSMNX_API_BASE: ${OSMNX_API_BASE}`);

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è OSMnx –∑–∞–ø—Ä–æ—Å–æ–≤ —Å retry –ª–æ–≥–∏–∫–æ–π
 * @param {string} endpoint - –ø—É—Ç—å –∫ API endpoint
 * @param {string} description - –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 * @param {number} timeout - —Ç–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –≤ –º—Å
 * @param {number} maxRetries - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
 * @returns {Promise<Object>}
 */
async function executeOSMnxRequest(endpoint, description, timeout = REQUEST_TIMEOUT, maxRetries = 1) {
  console.log(`üöÄ === –ù–ê–ß–ê–õ–û –ó–ê–ü–†–û–°–ê OSMnx ===`);
  console.log(`üîó URL: ${OSMNX_API_BASE}${endpoint}`);
  console.log(`üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${description}`);
  console.log(`‚è±Ô∏è –¢–∞–π–º–∞—É—Ç: ${timeout}–º—Å`);
  console.log(`üîÑ –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫: ${maxRetries}`);
  
  try {
    const controller = new AbortController();
    const timeoutId = setTimeout(() => {
      console.log(`‚è∞ –¢–∞–π–º–∞—É—Ç ${timeout}–º—Å –ø—Ä–µ–≤—ã—à–µ–Ω, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å`);
      controller.abort();
    }, timeout);
    
    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å...`);
    const startTime = Date.now();
    
    const response = await fetch(`${OSMNX_API_BASE}${endpoint}`, {
      method: 'GET',
      signal: controller.signal,
      headers: {
        'Content-Type': 'application/json'
      }
    });
    
    const elapsedTime = Date.now() - startTime;
    clearTimeout(timeoutId);
    
    console.log(`üì° –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –∑–∞ ${elapsedTime}–º—Å:`);
    console.log(`   Status: ${response.status} ${response.statusText}`);
    console.log(`   Headers:`, Object.fromEntries(response.headers.entries()));
    
    if (!response.ok) {
      let errorText = '';
      try {
        errorText = await response.text();
        console.log(`üìÑ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –æ—à–∏–±–∫–∏ (${errorText.length} —Å–∏–º–≤–æ–ª–æ–≤):`, errorText);
      } catch (textError) {
        console.log(`üìÑ –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –æ—à–∏–±–∫–∏:`, textError.message);
      }
      
      throw new Error(`HTTP ${response.status}: ${response.statusText}${errorText ? ` - ${errorText}` : ''}`);
    }
    
    // –ß–∏—Ç–∞–µ–º –∏ –ø–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
    const responseText = await response.text();
    console.log(`üìÑ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –¥–ª–∏–Ω–æ–π ${responseText.length} —Å–∏–º–≤–æ–ª–æ–≤`);
    console.log(`üìÑ –ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç–≤–µ—Ç–∞:`, responseText.substring(0, 500));
    
    let data;
    try {
      data = JSON.parse(responseText);
      console.log(`‚úÖ JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω, —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö:`, typeof data);
      if (data && typeof data === 'object') {
        console.log(`üìä –ö–ª—é—á–∏ –≤ –æ—Ç–≤–µ—Ç–µ:`, Object.keys(data));
        if (data.success !== undefined) {
          console.log(`üéØ success:`, data.success);
        }
        if (data.count !== undefined) {
          console.log(`üìä count:`, data.count);
        }
        if (data.error !== undefined) {
          console.log(`‚ùå error:`, data.error);
        }
      }
    } catch (parseError) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:`, parseError);
      console.log(`üìÑ –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç:`, responseText);
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON: ${parseError.message}`);
    }
    
    console.log(`‚úÖ === –ó–ê–ü–†–û–° OSMnx –£–°–ü–ï–®–ï–ù ===`);
    return data;
    
  } catch (error) {
    console.log(`‚ùå === –û–®–ò–ë–ö–ê –ó–ê–ü–†–û–°–ê OSMnx ===`);
    console.log(`‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏:`, error.name);
    console.log(`‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ:`, error.message);
    console.log(`‚ùå –°—Ç–µ–∫:`, error.stack);
    throw error;
  }
}

/**
 * –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ OSMnx backend –±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 * @returns {Promise<boolean>}
 */
async function quickHealthCheck() {
  try {
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 3000); // –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    
    const response = await fetch(`${OSMNX_API_BASE}/health`, {
      method: 'GET',
      signal: controller.signal,
      headers: { 'Content-Type': 'application/json' }
    });
    
    clearTimeout(timeoutId);
    return response.ok;
  } catch (error) {
    return false;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å OSMnx backend
 * @returns {Promise<boolean>}
 */
export async function isOSMnxBackendAvailable() {
  // –°–Ω–∞—á–∞–ª–∞ –±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
  console.log('üîç –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ OSMnx backend...');
  const quickCheck = await quickHealthCheck();
  
  if (!quickCheck) {
    console.log('‚ùå OSMnx Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)');
    return false;
  }
  
  // –ï—Å–ª–∏ –±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—à–ª–∞, –¥–µ–ª–∞–µ–º –ø–æ–ª–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
  try {
    const data = await executeOSMnxRequest('/health', '–ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏', 5000, 1);
    console.log('‚úÖ OSMnx Backend –¥–æ—Å—Ç—É–ø–µ–Ω:', data);
    return true;
  } catch (error) {
    console.log('‚ùå OSMnx Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–ø–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞):', error.message);
    return false;
  }
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ OSMnx –≤ —Ñ–æ—Ä–º–∞—Ç frontend
 * @param {Array} geometry - –º–∞—Å—Å–∏–≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç [lat, lon]
 * @returns {Array} - –º–∞—Å—Å–∏–≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ frontend
 */
function convertGeometryFormat(geometry) {
  if (!Array.isArray(geometry)) {
    return [];
  }
  
  // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è - –æ–¥–Ω–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ filter + map
  const result = [];
  for (let i = 0; i < geometry.length; i++) {
    const coord = geometry[i];
    
    // –ë—ã—Å—Ç—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –ø–æ—Ä—è–¥–∫–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –æ—Ç–∫–∞–∑–∞
    if (!Array.isArray(coord) || coord.length < 2) continue;
    
    const lat = coord[0];
    const lon = coord[1];
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–æ–≤ –∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏
    if (typeof lat === 'number' && typeof lon === 'number' && 
        !isNaN(lat) && !isNaN(lon) && 
        isFinite(lat) && isFinite(lon)) {
      result.push({ lat, lon });
    }
  }
  
  return result;
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—à–µ—Ö–æ–¥–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã —á–µ—Ä–µ–∑ OSMnx backend
 * @param {string} bbox - —Å—Ç—Ä–æ–∫–∞ bbox –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'south,west,north,east'
 * @param {string} pathType - —Ç–∏–ø –ø—É—Ç–∏ (–¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
 * @returns {Promise<Array>}
 */
export async function fetchPathsWithOSMnx(bbox, pathType = '–ø–µ—à–µ—Ö–æ–¥–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã') {
    console.log(`üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º ${pathType} —á–µ—Ä–µ–∑ OSMnx backend...`);
    
  const data = await executeOSMnxRequest(`/paths?bbox=${bbox}`, `OSMnx ${pathType}`);
    
    console.log(`‚úÖ OSMnx: –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${data.count} ${pathType} –∑–∞ ${data.load_time}—Å`);
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç, –æ–∂–∏–¥–∞–µ–º—ã–π frontend
    const convertedPaths = data.data.map(path => ({
      geometry: convertGeometryFormat(path.geometry),
      highway: path.highway || 'unknown',
      name: path.name || '',
      surface: path.surface || '',
      access: path.access || '',
      osmid: path.osmid || '',
      length: path.length || 0
    })).filter(path => path.geometry.length >= 2); // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –≥–µ–æ–º–µ—Ç—Ä–∏–∏
    
    console.log(`‚úÖ OSMnx: –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${convertedPaths.length} –≤–∞–ª–∏–¥–Ω—ã—Ö –ø—É—Ç–µ–π`);
    console.log('üîç OSMnx –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç:', {
      isArray: Array.isArray(convertedPaths),
      length: convertedPaths.length,
      firstItem: convertedPaths[0],
      sampleGeometry: convertedPaths[0]?.geometry?.slice(0, 3)
    });
    
    return convertedPaths;
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∞—Ä—å–µ—Ä—ã —á–µ—Ä–µ–∑ OSMnx backend
 * @param {string} bbox - —Å—Ç—Ä–æ–∫–∞ bbox –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'south,west,north,east'
 * @returns {Promise<Array>}
 */
export async function fetchBarriersWithOSMnx(bbox) {
    console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞—Ä—å–µ—Ä—ã —á–µ—Ä–µ–∑ OSMnx backend...');
    
  const data = await executeOSMnxRequest(`/barriers?bbox=${bbox}`, 'OSMnx –±–∞—Ä—å–µ—Ä—ã');
    
    console.log(`‚úÖ OSMnx: –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${data.count} –±–∞—Ä—å–µ—Ä–æ–≤ –∑–∞ ${data.load_time}—Å`);
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç, –æ–∂–∏–¥–∞–µ–º—ã–π frontend
    const convertedBarriers = data.data.map(barrier => ({
      geometry: convertGeometryFormat(barrier.geometry),
      type: 'barrier',
      barrier_type: barrier.barrier_type || '',
      natural: barrier.natural || '',
      waterway: barrier.waterway || '',
      name: barrier.name || '',
      osmid: barrier.osmid || ''
    })).filter(barrier => barrier.geometry.length >= 2);
    
    console.log(`‚úÖ OSMnx: –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${convertedBarriers.length} –≤–∞–ª–∏–¥–Ω—ã—Ö –±–∞—Ä—å–µ—Ä–æ–≤`);
    
    return convertedBarriers;
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ (—Ç—Ä–æ–ø—ã + –±–∞—Ä—å–µ—Ä—ã) —á–µ—Ä–µ–∑ OSMnx backend
 * @param {string} bbox - —Å—Ç—Ä–æ–∫–∞ bbox –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'south,west,north,east'
 * @returns {Promise<Object>} - –æ–±—ä–µ–∫—Ç —Å paths –∏ barriers
 */
export async function fetchAllWithOSMnx(bbox) {
    console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ OSMnx backend...');
    
  const data = await executeOSMnxRequest(`/all?bbox=${bbox}`, 'OSMnx –≤—Å–µ –¥–∞–Ω–Ω—ã–µ');
    
    console.log(`‚úÖ OSMnx: –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${data.paths_count} –ø—É—Ç–µ–π –∏ ${data.barriers_count} –±–∞—Ä—å–µ—Ä–æ–≤ –∑–∞ ${data.load_time}—Å`);
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    const convertedPaths = data.paths.map(path => ({
      geometry: convertGeometryFormat(path.geometry),
      highway: path.highway || 'unknown',
      name: path.name || '',
      surface: path.surface || '',
      access: path.access || '',
      osmid: path.osmid || '',
      length: path.length || 0
    })).filter(path => path.geometry.length >= 2);
    
    const convertedBarriers = data.barriers.map(barrier => ({
      geometry: convertGeometryFormat(barrier.geometry),
      type: 'barrier',
      barrier_type: barrier.barrier_type || '',
      natural: barrier.natural || '',
      waterway: barrier.waterway || '',
      name: barrier.name || '',
      osmid: barrier.osmid || ''
    })).filter(barrier => barrier.geometry.length >= 2);
    
    console.log(`‚úÖ OSMnx: –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${convertedPaths.length} –ø—É—Ç–µ–π –∏ ${convertedBarriers.length} –±–∞—Ä—å–µ—Ä–æ–≤`);
    
    return {
      paths: convertedPaths,
      barriers: convertedBarriers
    };
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç—Ä–æ–∫—É bbox –∏–∑ –≥—Ä–∞–Ω–∏—Ü –∫–∞—Ä—Ç—ã
 * @param {Object} bounds - –≥—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ä—Ç—ã Leaflet
 * @returns {string} - —Å—Ç—Ä–æ–∫–∞ bbox –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'south,west,north,east'
 */
export function getBboxString(bounds) {
  const sw = bounds.getSouthWest();
  const ne = bounds.getNorthEast();
  return `${sw.lat},${sw.lng},${ne.lat},${ne.lng}`;
}
