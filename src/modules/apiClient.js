/**
 * API –∫–ª–∏–µ–Ω—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –±—ç–∫–µ–Ω–¥–æ–º
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
 */

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
const API_CONFIG = {
    BASE_URL: 'http://localhost:8001/api',
    TIMEOUT: 30000, // 30 —Å–µ–∫—É–Ω–¥
    RETRY_ATTEMPTS: 3
};

// –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
class ApiClient {
    constructor() {
        this.baseUrl = API_CONFIG.BASE_URL;
        this.timeout = API_CONFIG.TIMEOUT;
        this.retryAttempts = API_CONFIG.RETRY_ATTEMPTS;
    }

    /**
     * –ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
     */
    async request(endpoint, options = {}) {
        const url = `${this.baseUrl}${endpoint}`;
        const config = {
            timeout: this.timeout,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            },
            ...options
        };

        console.log(`üåê API –∑–∞–ø—Ä–æ—Å: ${config.method || 'GET'} ${url}`);

        try {
            const response = await fetch(url, config);
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const data = await response.json();
            console.log(`‚úÖ API –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:`, data);
            return data;

        } catch (error) {
            console.error(`‚ùå API –æ—à–∏–±–∫–∞:`, error);
            throw new ApiError(error.message, error);
        }
    }

    // === –ú–ê–†–®–†–£–¢–´ ===

    /**
     * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç
     */
    async saveRoute(routeData) {
        const data = {
            title: routeData.title || `–ú–∞—Ä—à—Ä—É—Ç ${new Date().toLocaleDateString()}`,
            description: routeData.description || '',
            bounds: {
                sw_lat: routeData.bounds.getSouthWest().lat,
                sw_lng: routeData.bounds.getSouthWest().lng,
                ne_lat: routeData.bounds.getNorthEast().lat,
                ne_lng: routeData.bounds.getNorthEast().lng
            },
            start_point: {
                lat: routeData.startPoint.lat,
                lng: routeData.startPoint.lng
            },
            points: routeData.points.map(point => ({
                lat: Array.isArray(point) ? point[0] : point.lat,
                lng: Array.isArray(point) ? point[1] : point.lng
            })),
            difficulty_level: routeData.difficulty || 1,
            estimated_time_minutes: routeData.estimatedTime,
            is_public: routeData.isPublic !== false
        };

        return await this.request('/routes', {
            method: 'POST',
            body: JSON.stringify(data)
        });
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤
     */
    async getRoutes(filters = {}) {
        const params = new URLSearchParams();
        
        Object.entries(filters).forEach(([key, value]) => {
            if (value !== undefined && value !== null) {
                params.append(key, value);
            }
        });

        const endpoint = `/routes${params.toString() ? '?' + params.toString() : ''}`;
        return await this.request(endpoint);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –ø–æ ID
     */
    async getRoute(routeId) {
        return await this.request(`/routes/${routeId}`);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –ø–æ —Ç–æ–∫–µ–Ω—É –æ–±–º–µ–Ω–∞
     */
    async getSharedRoute(token) {
        return await this.request(`/routes/shared/${token}`);
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –æ–±–º–µ–Ω–∞ –º–∞—Ä—à—Ä—É—Ç–æ–º
     */
    async shareRoute(routeId, expiresHours = null) {
        const data = expiresHours ? { expires_hours: expiresHours } : {};
        
        return await this.request(`/routes/${routeId}/share`, {
            method: 'POST',
            body: JSON.stringify(data)
        });
    }

    /**
     * –û—Ü–µ–Ω–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç
     */
    async rateRoute(routeId, rating, comment = null) {
        const data = { rating };
        if (comment) data.comment = comment;

        return await this.request(`/routes/${routeId}/rating`, {
            method: 'POST',
            body: JSON.stringify(data)
        });
    }

    // === –¢–†–ï–ù–ò–†–û–í–ö–ò ===

    /**
     * –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—É—é —Å–µ—Å—Å–∏—é
     */
    async startTrainingSession(routeId) {
        return await this.request('/training', {
            method: 'POST',
            body: JSON.stringify({
                route_id: routeId,
                started_at: new Date().toISOString()
            })
        });
    }

    /**
     * –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—É—é —Å–µ—Å—Å–∏—é
     */
    async finishTrainingSession(sessionId, results) {
        const data = {
            finished_at: new Date().toISOString(),
            duration_seconds: results.duration,
            points_visited: results.pointsVisited,
            points_total: results.pointsTotal,
            success_rate: (results.pointsVisited / results.pointsTotal) * 100,
            navigation_data: results.navigationData,
            gps_track: results.gpsTrack
        };

        return await this.request(`/training/${sessionId}`, {
            method: 'PUT',
            body: JSON.stringify(data)
        });
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
     */
    async getTrainingHistory(filters = {}) {
        const params = new URLSearchParams(filters);
        const endpoint = `/training${params.toString() ? '?' + params.toString() : ''}`;
        return await this.request(endpoint);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
     */
    async getTrainingStats() {
        return await this.request('/training/stats');
    }

    // === –≠–ö–°–ü–û–†–¢ ===

    /**
     * –°–∫–∞—á–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ GPX
     */
    async downloadRouteGPX(routeId) {
        const url = `${this.baseUrl}/export/routes/${routeId}/gpx`;
        window.open(url, '_blank');
    }

    /**
     * –°–∫–∞—á–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ KML
     */
    async downloadRouteKML(routeId) {
        const url = `${this.baseUrl}/export/routes/${routeId}/kml`;
        window.open(url, '_blank');
    }
}

// –ö–ª–∞—Å—Å –¥–ª—è API –æ—à–∏–±–æ–∫
class ApiError extends Error {
    constructor(message, originalError) {
        super(message);
        this.name = 'ApiError';
        this.originalError = originalError;
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä API –∫–ª–∏–µ–Ω—Ç–∞
export const apiClient = new ApiClient();

// –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

/**
 * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –º–∞—Ä—à—Ä—É—Ç
 */
export async function saveCurrentRoute(bounds, startPoint, points, options = {}) {
    try {
        const routeData = {
            title: options.title,
            description: options.description,
            bounds: bounds,
            startPoint: startPoint,
            points: points,
            difficulty: options.difficulty,
            estimatedTime: options.estimatedTime,
            isPublic: options.isPublic
        };

        const result = await apiClient.saveRoute(routeData);
        console.log('‚úÖ –ú–∞—Ä—à—Ä—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', result);
        return result;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞:', error);
        throw error;
    }
}

/**
 * –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –ø–æ ID
 */
export async function loadRoute(routeId) {
    try {
        const route = await apiClient.getRoute(routeId);
        console.log('‚úÖ –ú–∞—Ä—à—Ä—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω:', route);
        return route;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞:', error);
        throw error;
    }
}

/**
 * –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –º–∞—Ä—à—Ä—É—Ç–æ–º
 */
export async function shareCurrentRoute(routeId, expiresHours = 24) {
    try {
        const shareData = await apiClient.shareRoute(routeId, expiresHours);
        const fullUrl = `${window.location.origin}${shareData.share_url}`;
        
        console.log('‚úÖ –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–±–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∞:', fullUrl);
        
        // –ö–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
        if (navigator.clipboard) {
            await navigator.clipboard.writeText(fullUrl);
            console.log('üìã –°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
        }
        
        return { ...shareData, full_url: fullUrl };

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏:', error);
        throw error;
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
 */
export async function checkApiHealth() {
    try {
        const response = await fetch(`${API_CONFIG.BASE_URL.replace('/api', '')}/health`);
        if (response.ok) {
            const data = await response.json();
            console.log('‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω:', data);
            return true;
        }
        return false;
    } catch (error) {
        console.log('‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
        return false;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–æ–≤ –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç
export { ApiClient, ApiError, API_CONFIG };
