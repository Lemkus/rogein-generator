/**
 * –ú–æ–¥—É–ª—å –∑–≤—É–∫–æ–≤–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å Tone.js
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä—ã –∏ –ø–ª–∞–≤–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–æ–Ω–∞
 */

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
let isAudioEnabled = true;
let currentSynth = null;
let currentFrequency = 200; // –ù–∞—á–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ (–≤—Å–µ–≥–¥–∞ –Ω–∏–∑–∫–∞—è)
let isPlaying = false;
let lastDistance = null;
let lastSpeed = 0;
let frequencyProgress = 0; // –ü—Ä–æ–≥—Ä–µ—Å—Å –æ—Ç –Ω–∏–∑–∫–æ–π –∫ –≤—ã—Å–æ–∫–æ–π —á–∞—Å—Ç–æ—Ç–µ (0-1)
let startDistance = null; // –ù–∞—á–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —á–∞—Å—Ç–æ—Ç
const minFreq = 200; // –í—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ–º —Å –Ω–∏–∑–∫–æ–π —á–∞—Å—Ç–æ—Ç—ã
const maxFreq = 800; // –í—Å–µ–≥–¥–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ–º –≤—ã—Å–æ–∫–æ–π —á–∞—Å—Ç–æ—Ç–æ–π

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Tone.js
function initTone() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Tone.js –∑–∞–≥—Ä—É–∂–µ–Ω
    if (typeof Tone === 'undefined') {
        console.error('‚ùå Tone.js –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω!');
        const statusEl5 = document.getElementById('navStatus');
        if (statusEl5) {
            statusEl5.textContent = '‚ùå Tone.js –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω!';
        }
        return false;
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    if (Tone.context.state !== 'running') {
        Tone.start().then(() => {
            console.log('üéµ Tone.js –∞—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–ø—É—â–µ–Ω');
            const statusEl6 = document.getElementById('navStatus');
            if (statusEl6) {
                statusEl6.textContent = 'üéµ Tone.js –∑–∞–ø—É—â–µ–Ω';
            }
        }).catch(err => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Tone.js:', err);
            const statusEl7 = document.getElementById('navStatus');
            if (statusEl7) {
                statusEl7.textContent = '‚ùå –û—à–∏–±–∫–∞ Tone.js';
            }
        });
    } else {
        // –ê—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω
        const statusEl8 = document.getElementById('navStatus');
        if (statusEl8) {
            statusEl8.textContent = 'üéµ Tone.js —É–∂–µ –∑–∞–ø—É—â–µ–Ω :(';
        }
    }
    
    return true;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —á–∞—Å—Ç–æ—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
function getTargetFrequencyProgress(distance) {
    // –ü–†–û–°–¢–ê–Ø –õ–û–ì–ò–ö–ê: –ø—Ä–æ–≥—Ä–µ—Å—Å = –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–≥–æ –ø—É—Ç–∏
    // –ï—Å–ª–∏ –Ω–∞—á–∞–ª–∏ —Å 2000–º –∏ —Å–µ–π—á–∞—Å 1500–º, —Ç–æ –ø—Ä–æ—à–ª–∏ 25% –ø—É—Ç–∏
    
    // –ï—Å–ª–∏ –º—ã –Ω–∞ —Å—Ç–∞—Ä—Ç–µ (startDistance –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω) - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
    if (startDistance === null) {
        startDistance = distance;
        console.log(`üéØ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${startDistance}–º`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        const statusEl9 = document.getElementById('navStatus');
        if (statusEl9) {
            const currentText = statusEl9.textContent;
            statusEl9.textContent = `${currentText} | üéØ${startDistance}–º`;
        }
        
        return 0;
    }
    
    // –ï—Å–ª–∏ –º—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–∏ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 100%
    if (distance <= 10) {
        return 1;
    }
    
    // –ü—Ä–æ–≥—Ä–µ—Å—Å = —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –ø—É—Ç–∏ –º—ã –ø—Ä–æ—à–ª–∏
    const progress = (startDistance - distance) / startDistance;
    console.log(`üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: ${(progress*100).toFixed(1)}% (${startDistance}–º ‚Üí ${distance}–º)`);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –æ—Ç 0 –¥–æ 1, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∞—Å—Ç–æ—Ç
    const clampedProgress = Math.max(0, Math.min(1, progress));
    console.log(`üìä –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å: ${(clampedProgress*100).toFixed(1)}%`);
    
    return clampedProgress;
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∑–≤—É–∫–∞ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è (–º–∞–∂–æ—Ä–Ω—ã–π, —è—Ä–∫–∏–π)
function createApproachingSound(frequency) {
    if (!initTone()) {
        const statusEl10 = document.getElementById('navStatus');
        if (statusEl10) {
            statusEl10.textContent = '‚ùå Tone.js –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω';
        }
        return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    const statusEl11 = document.getElementById('navStatus');
    if (statusEl11) {
        statusEl11.textContent = `üéµ –°–æ–∑–¥–∞–µ–º –∑–≤—É–∫ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è: ${Math.round(frequency)}Hz`;
    }
    
    // –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ –ø—Ä–∏—è—Ç–Ω—ã–π —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è
    const synth = new Tone.Synth({
        oscillator: {
            type: 'triangle' // –ë–æ–ª–µ–µ –º—è–≥–∫–∏–π –∑–≤—É–∫
        },
        envelope: {
            attack: 0.05,
            decay: 0.1,
            sustain: 0.3,
            release: 0.4
        }
    }).toDestination();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–≥–∫–∏–π —Ä–µ–≤–µ—Ä–± –¥–ª—è –ø—Ä–∏—è—Ç–Ω–æ—Å—Ç–∏
    const reverb = new Tone.Reverb({
        decay: 0.5,
        wet: 0.1
    });
    
    synth.connect(reverb);
    reverb.toDestination();
    
    // –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –º–∞–∂–æ—Ä–Ω—É—é —Ç–µ—Ä—Ü–∏—é (–±–æ–ª–µ–µ —è—Ä–∫–∏–π –∑–≤—É–∫)
    const majorThird = frequency * Math.pow(2, 4/12); // –ë–æ–ª—å—à–∞—è —Ç–µ—Ä—Ü–∏—è
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–¥ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–µ–º
    const statusEl12 = document.getElementById('navStatus');
    if (statusEl12) {
        statusEl12.textContent = `üéµ –ò–≥—Ä–∞–µ–º –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ: ${Math.round(frequency)}Hz`;
    }
    
    synth.triggerAttackRelease(frequency, "8n");
    setTimeout(() => {
        synth.triggerAttackRelease(majorThird, "8n");
    }, 80);
    
    // –û—á–∏—â–∞–µ–º —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä
    setTimeout(() => {
        synth.dispose();
        reverb.dispose();
    }, 800);
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∑–≤—É–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è (–º–∏–Ω–æ—Ä–Ω—ã–π, –≥–ª—É—Ö–æ–π)
function createMovingAwaySound(frequency) {
    if (!initTone()) return;
    
    // –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ –ø—Ä–∏—è—Ç–Ω—ã–π —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    const synth = new Tone.Synth({
        oscillator: {
            type: 'sawtooth' // –ë–æ–ª–µ–µ –º—è–≥–∫–∏–π —á–µ–º —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫
        },
        envelope: {
            attack: 0.1,
            decay: 0.2,
            sustain: 0.25,
            release: 0.8
        }
    }).toDestination();
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –±–æ–ª–µ–µ –≥–ª—É—Ö–æ–≥–æ –∑–≤—É–∫–∞
    const filter = new Tone.Filter({
        type: 'lowpass',
        frequency: frequency * 1.5,
        rolloff: -12
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–≥–∫–∏–π –¥–∏—Å—Ç–æ—Ä—à–Ω –¥–ª—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω–æ—Å—Ç–∏
    const distortion = new Tone.Distortion(0.1);
    
    synth.connect(filter);
    filter.connect(distortion);
    distortion.toDestination();
    
    // –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –º–∏–Ω–æ—Ä–Ω—É—é —Ç–µ—Ä—Ü–∏—é (–±–æ–ª–µ–µ –≥—Ä—É—Å—Ç–Ω—ã–π –∑–≤—É–∫)
    const minorThird = frequency * Math.pow(2, 3/12); // –ú–∞–ª–∞—è —Ç–µ—Ä—Ü–∏—è
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–¥ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–µ–º
    const statusEl13 = document.getElementById('navStatus');
    if (statusEl13) {
        statusEl13.textContent = `üéµ –ò–≥—Ä–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ: ${Math.round(frequency)}Hz`;
    }
    
    synth.triggerAttackRelease(frequency, "4n");
    setTimeout(() => {
        synth.triggerAttackRelease(minorThird, "4n");
    }, 120);
    
    // –û—á–∏—â–∞–µ–º —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä
    setTimeout(() => {
        synth.dispose();
        filter.dispose();
        distortion.dispose();
    }, 1200);
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å –ø–ª–∞–≤–Ω—ã–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Ç–æ–Ω–∞
export function playNavigationSound(distance, speed) {
    if (!isAudioEnabled) {
        console.log('üîá –ó–≤—É–∫ –æ—Ç–∫–ª—é—á–µ–Ω');
        const navStatus = document.getElementById('navStatus');
        if (navStatus) {
            navStatus.textContent = 'üîá –ó–≤—É–∫ –æ—Ç–∫–ª—é—á–µ–Ω';
        }
        return;
    }
    
    let isApproaching = false;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ —Å–∫–æ—Ä–æ—Å—Ç–∏
    if (speed > 0.1) {
        isApproaching = true;
    } else if (speed < -0.1) {
        isApproaching = false;
    } else {
        // –ï—Å–ª–∏ —Å–∫–æ—Ä–æ—Å—Ç—å –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—é —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
        if (lastDistance !== null) {
            isApproaching = distance < lastDistance;
        } else {
            isApproaching = distance < 100; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ–º
        }
    }
    
    
    // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–µ–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å —á–∞—Å—Ç–æ—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
    const targetProgress = getTargetFrequencyProgress(distance);
    
    // –ü—Ä–æ—Å—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ: –ø—Ä–æ–≥—Ä–µ—Å—Å = —Ü–µ–ª–µ–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å
    // –¢–æ–Ω –º–µ–Ω—è–µ—Ç—Å—è —Å—Ä–∞–∑—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
    frequencyProgress = targetProgress;
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ–∫—É—â—É—é —á–∞—Å—Ç–æ—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –æ—Ç 0 –¥–æ 1, —á—Ç–æ–±—ã —á–∞—Å—Ç–æ—Ç–∞ –±—ã–ª–∞ –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
    const clampedProgress = Math.max(0, Math.min(1, frequencyProgress));
    currentFrequency = minFreq + (maxFreq - minFreq) * clampedProgress;
    
    console.log(`üéµ –ß–∞—Å—Ç–æ—Ç–∞: ${Math.round(currentFrequency)}Hz (–ø—Ä–æ–≥—Ä–µ—Å—Å: ${(frequencyProgress*100).toFixed(1)}%, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π: ${(clampedProgress*100).toFixed(1)}%)`);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –±—É—Å—Ç –Ω–µ –Ω—É–∂–µ–Ω - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ç–æ–Ω —É–∂–µ –¥–æ—Å—Ç–∏–≥–∞–µ—Ç—Å—è –ø—Ä–∏ –±–ª–∏–∑–∫–æ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏
    
    // –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –∑–≤—É–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if (isApproaching) {
        createApproachingSound(currentFrequency);
        console.log(`üéµ –ü—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ: ${Math.round(currentFrequency)}Hz (–ø—Ä–æ–≥—Ä–µ—Å—Å: ${(frequencyProgress*100).toFixed(1)}%, —Ü–µ–ª–µ–≤–æ–π: ${(targetProgress*100).toFixed(1)}%), —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${Math.round(distance)}–º, —Å–∫–æ—Ä–æ—Å—Ç—å: ${speed}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–≤—É–∫–µ
        const statusEl3 = document.getElementById('navStatus');
        if (statusEl3) {
            const currentText = statusEl3.textContent;
            statusEl3.textContent = `${currentText} | üéµ${Math.round(currentFrequency)}Hz ‚ÜóÔ∏è`;
        }
    } else {
        createMovingAwaySound(currentFrequency);
        console.log(`üéµ –£–¥–∞–ª–µ–Ω–∏–µ: ${Math.round(currentFrequency)}Hz (–ø—Ä–æ–≥—Ä–µ—Å—Å: ${(frequencyProgress*100).toFixed(1)}%, —Ü–µ–ª–µ–≤–æ–π: ${(targetProgress*100).toFixed(1)}%), —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${Math.round(distance)}–º, —Å–∫–æ—Ä–æ—Å—Ç—å: ${speed}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–≤—É–∫–µ
        const statusEl4 = document.getElementById('navStatus');
        if (statusEl4) {
            const currentText = statusEl4.textContent;
            statusEl4.textContent = `${currentText} | üéµ${Math.round(currentFrequency)}Hz ‚ÜòÔ∏è`;
        }
    }
    
    lastDistance = distance;
    lastSpeed = speed;
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∑–≤—É–∫–∞ –ø–æ–±–µ–¥—ã —Å Tone.js
export function playVictorySound() {
    if (!isAudioEnabled) return;
    
    if (!initTone()) return;
    
    // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä –¥–ª—è –º–µ–ª–æ–¥–∏–∏
    const melodySynth = new Tone.Synth({
        oscillator: {
            type: "triangle"
        },
        envelope: {
            attack: 0.1,
            decay: 0.2,
            sustain: 0.8,
            release: 0.8
        }
    });
    
    // –°–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä –¥–ª—è –∞–∫–∫–æ—Ä–¥–æ–≤
    const chordSynth = new Tone.Synth({
        oscillator: {
            type: "sine"
        },
        envelope: {
            attack: 0.1,
            decay: 0.3,
            sustain: 0.7,
            release: 1.5
        }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–≤–µ—Ä–± –¥–ª—è —Ç–æ—Ä–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
    const reverb = new Tone.Reverb({
        decay: 2,
        wet: 0.3
    }).toDestination();
    
    melodySynth.connect(reverb);
    chordSynth.connect(reverb);
    
    // –¢–æ—Ä–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –≤–æ—Å—Ö–æ–¥—è—â–∞—è –º–µ–ª–æ–¥–∏—è
    const melody = ["C4", "E4", "G4", "C5", "E5", "G5", "C6"];
    
    melody.forEach((note, index) => {
        melodySynth.triggerAttackRelease(note, "8n", `+${index * 0.2}`);
    });
    
    // –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–æ—Ä–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–∫–∫–æ—Ä–¥
    setTimeout(() => {
        chordSynth.triggerAttackRelease("C5", "1n");
        chordSynth.triggerAttackRelease("E5", "1n", "+0.1");
        chordSynth.triggerAttackRelease("G5", "1n", "+0.2");
        chordSynth.triggerAttackRelease("C6", "1n", "+0.3");
    }, 1500);
    
    // –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
    setTimeout(() => {
        melodySynth.dispose();
        chordSynth.dispose();
        reverb.dispose();
    }, 4000);
    
    console.log('üèÜüé∫üéâ –¢–†–ò–£–ú–§–ê–õ–¨–ù–´–ï –§–ê–ù–§–ê–†–´! –ü–û–ë–ï–î–ê! üéâüé∫üèÜ');
}

// –í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∑–≤—É–∫–∞
export function toggleAudio() {
    isAudioEnabled = !isAudioEnabled;
    console.log(`üîä –ó–≤—É–∫ ${isAudioEnabled ? '–≤–∫–ª—é—á–µ–Ω' : '–æ—Ç–∫–ª—é—á–µ–Ω'}`);
    return isAudioEnabled;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–≤—É–∫–∞
export function isAudioOn() {
    return isAudioEnabled;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –º–µ–∂–¥—É –∑–≤—É–∫–∞–º–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
export function getSoundInterval(distance) {
    // –†–∏—Ç–º –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    // –ú–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–∏—Ç–º –Ω–∞ –±–æ–ª—å—à–∏—Ö —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è—Ö, –±—ã—Å—Ç—Ä—ã–π –ø—Ä–∏ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏
    
    // –ï—Å–ª–∏ –º—ã –Ω–∞ —Å—Ç–∞—Ä—Ç–µ - –º–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–∏—Ç–º
    if (startDistance === null) {
        console.log('‚è±Ô∏è getSoundInterval: —Å—Ç–∞—Ä—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 3.0—Å');
        return 3.0; // 3 —Å–µ–∫—É–Ω–¥—ã
    }
    
    // –ï—Å–ª–∏ –º—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–∏ - –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä—ã–π —Ä–∏—Ç–º
    if (distance <= 10) {
        console.log('‚è±Ô∏è getSoundInterval: —Ü–µ–ª—å –±–ª–∏–∑–∫–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0.2—Å');
        return 0.2; // 0.2 —Å–µ–∫—É–Ω–¥—ã
    }
    
    // –†–∏—Ç–º –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–∫–∞–∫ –∏ —Ç–æ–Ω)
    const progress = (startDistance - distance) / startDistance;
    
    // –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç 3 —Å–µ–∫ (–º–µ–¥–ª–µ–Ω–Ω–æ) –¥–æ 0.2 —Å–µ–∫ (–±—ã—Å—Ç—Ä–æ)
    const minInterval = 0.2; // –ë—ã—Å—Ç—Ä—ã–π —Ä–∏—Ç–º –ø—Ä–∏ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏
    const maxInterval = 3.0; // –ú–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–∏—Ç–º –Ω–∞ —Å—Ç–∞—Ä—Ç–µ
    
    // –†–∏—Ç–º —É—Å–∫–æ—Ä—è–µ—Ç—Å—è –ø–æ –º–µ—Ä–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –æ—Ç 0 –¥–æ 1, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
    const clampedProgress = Math.max(0, Math.min(1, progress));
    const interval = maxInterval - (maxInterval - minInterval) * clampedProgress;
    
    console.log(`‚è±Ô∏è getSoundInterval: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º ${interval.toFixed(1)}—Å (–ø—Ä–æ–≥—Ä–µ—Å—Å: ${(progress*100).toFixed(1)}%)`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–∏—Ç–º–µ
    const statusEl14 = document.getElementById('navStatus');
    if (statusEl14) {
        const currentText = statusEl14.textContent;
        statusEl14.textContent = `${currentText} | ‚è±Ô∏è${interval.toFixed(1)}—Å`;
    }
    
    return interval;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–ª—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
export function playTestSound(distance, speed) {
    playNavigationSound(distance, speed);
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∑–≤—É–∫–∞ –ø–æ–±–µ–¥—ã (–¥–ª—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
export function createVictorySound() {
    playVictorySound();
}

// –°–∏–º—É–ª—è—Ç–æ—Ä –¥–≤–∏–∂–µ–Ω–∏—è –∫ —Ü–µ–ª–∏
let simulationInterval = null;
let currentSimulationDistance = 0;
let simulationSpeed = 0;
let simulationTarget = 0;
let simulationCallback = null;

export function startMovementSimulation(initialDistance, speed, callback) {
    if (simulationInterval) {
        clearInterval(simulationInterval);
    }
    
    currentSimulationDistance = initialDistance;
    simulationSpeed = speed;
    simulationTarget = 0; // –¶–µ–ª—å - –¥–æ—Å—Ç–∏—á—å 0 –º–µ—Ç—Ä–æ–≤
    simulationCallback = callback;
    
    console.log(`üèÉ‚Äç‚ôÇÔ∏è –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é: ${initialDistance}–º, —Å–∫–æ—Ä–æ—Å—Ç—å ${speed}–º/—Å`);
    
    // –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –∑–≤—É–∫
    if (isAudioEnabled) {
        playTestSound(currentSimulationDistance, simulationSpeed);
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
    simulationInterval = setInterval(() => {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        if (simulationSpeed > 0) {
            // –ü—Ä–∏–±–ª–∏–∂–∞–µ–º—Å—è - —É–º–µ–Ω—å—à–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
            currentSimulationDistance -= simulationSpeed;
        } else if (simulationSpeed < 0) {
            // –£–¥–∞–ª—è–µ–º—Å—è - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
            currentSimulationDistance += Math.abs(simulationSpeed);
        }
        
        if (simulationSpeed > 0 && currentSimulationDistance <= 10) {
            // –î–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–∏ –ø—Ä–∏ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏!
            currentSimulationDistance = 0;
            stopMovementSimulation();
            
            if (isAudioEnabled) {
                playVictorySound();
            }
            
            if (simulationCallback) {
                simulationCallback(true, 0); // true = –¥–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–∏
            }
        } else {
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ
            if (isAudioEnabled) {
                playTestSound(currentSimulationDistance, simulationSpeed);
            }
            
            if (simulationCallback) {
                simulationCallback(false, currentSimulationDistance);
            }
        }
    }, 1000); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
}

export function stopMovementSimulation() {
    if (simulationInterval) {
        clearInterval(simulationInterval);
        simulationInterval = null;
    }
}

export function getSimulationStatus() {
    return {
        isRunning: simulationInterval !== null,
        distance: currentSimulationDistance,
        speed: simulationSpeed,
        target: simulationTarget
    };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–π —á–∞—Å—Ç–æ—Ç—ã (–¥–ª—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
export function getBaseFrequency(distance) {
    const targetProgress = getTargetFrequencyProgress(distance);
    return minFreq + (maxFreq - minFreq) * targetProgress;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è (–¥–ª—è –Ω–æ–≤–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏)
export function resetNavigation() {
    startDistance = null;
    frequencyProgress = 0;
    lastDistance = null;
}
