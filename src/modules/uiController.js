/**
 * –ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è UI
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–º –º–æ–±–∏–ª—å–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
 */

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
let drawAreaBtn, hintSticker, clearAreaBtn, infoPanel, apiLogs;
let menuBtn, menuModal, menuClose, settingsBtn, settingsModal, settingsClose;
let shareBtn, zoomInBtn, zoomOutBtn, gpsBtn;
let saveGpxMenuItem, loadGpxMenuItem, savedRoutesMenuItem, gpxFileInput;
let infoPanelPoints, sequenceLink, sequenceDistance, startNavBtn, refreshBtn, deleteBtn;

// –°–æ—Å—Ç–æ—è–Ω–∏–µ UI
let currentStep = 'select_area'; // select_area, place_start, points_generated, navigating
let isAreaSelected = false;
let isStartPlaced = false;

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
 */
export function initUI() {
  console.log('üé® –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞...');
  
  // –ü–æ–ª—É—á–∞–µ–º DOM —ç–ª–µ–º–µ–Ω—Ç—ã
  drawAreaBtn = document.getElementById('drawAreaBtn');
  hintSticker = document.getElementById('hintSticker');
  clearAreaBtn = document.getElementById('clearAreaBtn');
  infoPanel = document.getElementById('infoPanel');
  apiLogs = document.getElementById('apiLogs');
  
  menuBtn = document.getElementById('menuBtn');
  menuModal = document.getElementById('menuModal');
  menuClose = document.getElementById('menuClose');
  
  settingsBtn = document.getElementById('settingsBtn');
  settingsModal = document.getElementById('settingsModal');
  settingsClose = document.getElementById('settingsClose');
  
  shareBtn = document.getElementById('shareBtn');
  zoomInBtn = document.getElementById('zoomInBtn');
  zoomOutBtn = document.getElementById('zoomOutBtn');
  gpsBtn = document.getElementById('gpsBtn');
  
  saveGpxMenuItem = document.getElementById('saveGpxMenuItem');
  loadGpxMenuItem = document.getElementById('loadGpxMenuItem');
  savedRoutesMenuItem = document.getElementById('savedRoutesMenuItem');
  gpxFileInput = document.getElementById('gpxFileInput');
  
  infoPanelPoints = document.getElementById('infoPanelPoints');
  sequenceLink = document.getElementById('sequenceLink');
  sequenceDistance = document.getElementById('sequenceDistance');
  startNavBtn = document.getElementById('startNavBtn');
  refreshBtn = document.getElementById('refreshBtn');
  deleteBtn = document.getElementById('deleteBtn');
  
  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  setupEventHandlers();
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  setStep('select_area');
  
  console.log('‚úÖ UI –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
 */
function setupEventHandlers() {
  // –ú–µ–Ω—é
  menuBtn.addEventListener('click', () => menuModal.classList.add('show'));
  menuClose.addEventListener('click', () => menuModal.classList.remove('show'));
  menuModal.addEventListener('click', (e) => {
    if (e.target === menuModal) menuModal.classList.remove('show');
  });
  
  // –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–±–ª–∞—Å—Ç–∏
  drawAreaBtn.addEventListener('click', () => {
    console.log('üéØ –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞ –≤—ã–±–æ—Ä–∞ –æ–±–ª–∞—Å—Ç–∏');
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º mapModule –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ drawControl
    import('./mapModule.js').then(module => {
      if (module.drawControl && module.drawControl._toolbars && module.drawControl._toolbars.draw) {
        const rectangleButton = module.drawControl._toolbars.draw._modes.rectangle;
        if (rectangleButton && rectangleButton.handler) {
          rectangleButton.handler.enable();
          addApiLog('üéØ –†–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ –æ–±–ª–∞—Å—Ç–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ù–∞—Ä–∏—Å—É–π—Ç–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –Ω–∞ –∫–∞—Ä—Ç–µ.');
        }
      }
    });
  });
  
  // –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –æ–±–ª–∞—Å—Ç–∏
  clearAreaBtn.addEventListener('click', () => {
    console.log('üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏');
    import('./mapModule.js').then(module => {
      module.clearAll();
      addApiLog('üóëÔ∏è –û–±–ª–∞—Å—Ç—å –æ—á–∏—â–µ–Ω–∞');
    });
  });
  
  // –ö–Ω–æ–ø–∫–∏ –≤ info-panel
  refreshBtn.addEventListener('click', () => {
    console.log('üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—á–µ–∫');
    import('./mapModule.js').then(module => {
      module.triggerPointGeneration();
      addApiLog('üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—á–µ–∫...');
    });
  });
  
  deleteBtn.addEventListener('click', () => {
    console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö');
    import('./mapModule.js').then(module => {
      module.clearAll();
      addApiLog('üóëÔ∏è –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã');
    });
  });
  
  startNavBtn.addEventListener('click', () => {
    console.log('üéß –ó–∞–ø—É—Å–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏');
    addApiLog('üéß –ó–∞–ø—É—Å–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏...');
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∑–∞–ø—É—Å–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  });
  
  // –ö–Ω–æ–ø–∫–∏ –∑—É–º–∞ –∏ GPS
  zoomInBtn.addEventListener('click', () => {
    import('./mapModule.js').then(module => {
      if (module.map) {
        module.map.zoomIn();
        addApiLog('üîç –ü—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ');
      }
    });
  });
  
  zoomOutBtn.addEventListener('click', () => {
    import('./mapModule.js').then(module => {
      if (module.map) {
        module.map.zoomOut();
        addApiLog('üîç –û—Ç–¥–∞–ª–µ–Ω–∏–µ');
      }
    });
  });
  
  gpsBtn.addEventListener('click', () => {
    if ('geolocation' in navigator) {
      addApiLog('üìç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏...');
      navigator.geolocation.getCurrentPosition(
        (position) => {
          const { latitude, longitude } = position.coords;
          import('./mapModule.js').then(module => {
            if (module.map) {
              module.map.setView([latitude, longitude], 16);
              addApiLog(`üìç –ü–æ–∑–∏—Ü–∏—è: ${latitude.toFixed(5)}, ${longitude.toFixed(5)}`);
            }
          });
        },
        (error) => {
          addApiLog('‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏');
          console.error('Geolocation error:', error);
        }
      );
    } else {
      addApiLog('‚ùå –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
    }
  });
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
  settingsBtn.addEventListener('click', () => settingsModal.classList.add('show'));
  settingsClose.addEventListener('click', () => settingsModal.classList.remove('show'));
  settingsModal.addEventListener('click', (e) => {
    if (e.target === settingsModal) settingsModal.classList.remove('show');
  });
  
  // –ü—É–Ω–∫—Ç—ã –º–µ–Ω—é
  saveGpxMenuItem.addEventListener('click', handleSaveGPX);
  loadGpxMenuItem.addEventListener('click', () => {
    menuModal.classList.remove('show');
    gpxFileInput.click();
  });
  savedRoutesMenuItem.addEventListener('click', handleShowSavedRoutes);
  
  // GPX —Ñ–∞–π–ª input
  gpxFileInput.addEventListener('change', handleLoadGPX);
  
  // –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –æ–±–ª–∞—Å—Ç–∏
  clearAreaBtn.addEventListener('click', handleClearArea);
  
  // –ö–Ω–æ–ø–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏
  if (refreshBtn) refreshBtn.addEventListener('click', handleRefresh);
  if (deleteBtn) deleteBtn.addEventListener('click', handleDelete);
}

/**
 * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
 */
export function setStep(step) {
  currentStep = step;
  
  switch(step) {
    case 'select_area':
      showHint('–£–∫–∞–∂–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏');
      drawAreaBtn.classList.add('active');
      hideInfoPanel();
      hideClearButton();
      break;
      
    case 'area_selected':
      showHint('–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç–µ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ—á–∫–∏ —Å—Ç–∞—Ä—Ç–∞');
      showClearButton();
      isAreaSelected = true;
      break;
      
    case 'start_placed':
      hideHint();
      isStartPlaced = true;
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–Ω–µ—Ç—Å—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
      break;
      
    case 'points_generated':
      hideHint();
      drawAreaBtn.classList.remove('active');
      showInfoPanel();
      break;
      
    case 'navigating':
      // –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
      hideInfoPanel();
      break;
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É
 */
export function showHint(text) {
  hintSticker.textContent = text;
  hintSticker.classList.add('show');
}

/**
 * –°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É
 */
export function hideHint() {
  hintSticker.classList.remove('show');
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏ –æ–±–ª–∞—Å—Ç–∏
 */
export function showClearButton() {
  if (clearAreaBtn) {
    clearAreaBtn.style.display = 'flex';
  }
}

/**
 * –°–∫—Ä—ã—Ç—å –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏ –æ–±–ª–∞—Å—Ç–∏
 */
export function hideClearButton() {
  if (clearAreaBtn) {
    clearAreaBtn.style.display = 'none';
  }
}

/**
 * –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏ –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É –æ–±–ª–∞—Å—Ç–∏
 */
export function positionClearButton(bounds, map) {
  if (!clearAreaBtn || !bounds || !map) return;
  
  try {
    const northEast = bounds.getNorthEast();
    const point = map.latLngToContainerPoint(northEast);
    
    clearAreaBtn.style.left = (point.x + 5) + 'px';
    clearAreaBtn.style.top = (point.y - 35) + 'px';
    clearAreaBtn.style.display = 'flex';
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –æ—á–∏—Å—Ç–∫–∏:', e);
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –ø–∞–Ω–µ–ª—å
 */
export function showInfoPanel() {
  if (infoPanel) {
    infoPanel.classList.add('show');
  }
}

/**
 * –°–∫—Ä—ã—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –ø–∞–Ω–µ–ª—å
 */
export function hideInfoPanel() {
  if (infoPanel) {
    infoPanel.classList.remove('show');
  }
}

/**
 * –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ø–∞–Ω–µ–ª–∏
 */
export function updateInfoPanel(pointsCount, sequenceText, distance) {
  if (infoPanelPoints) {
    infoPanelPoints.textContent = `–¢–æ—á–µ–∫: ${pointsCount}`;
  }
  
  if (sequenceLink && sequenceText) {
    sequenceLink.textContent = sequenceText;
  }
  
  if (sequenceDistance && distance !== undefined) {
    sequenceDistance.textContent = `–î–∏—Å—Ç–∞–Ω—Ü–∏—è: ${distance.toFixed(2)} –∫–º`;
  }
}

/**
 * –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥ API
 */
export function addApiLog(message) {
  if (!apiLogs) return;
  
  const logEntry = document.createElement('div');
  logEntry.className = 'api-log-entry';
  logEntry.textContent = message;
  
  apiLogs.appendChild(logEntry);
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)
  while (apiLogs.children.length > 10) {
    apiLogs.removeChild(apiLogs.firstChild);
  }
  
  // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑
  apiLogs.scrollTop = apiLogs.scrollHeight;
}

/**
 * –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏ API
 */
export function clearApiLogs() {
  if (apiLogs) {
    apiLogs.innerHTML = '';
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è GPX
 */
function handleSaveGPX() {
  menuModal.classList.remove('show');
  // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ pointGeneration
  import('./pointGeneration.js').then(module => {
    module.downloadGPX();
  });
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ GPX
 */
function handleLoadGPX(event) {
  const file = event.target.files[0];
  if (!file) return;
  
  addApiLog('–ó–∞–≥—Ä—É–∑–∫–∞ GPX —Ñ–∞–π–ª–∞...');
  
  const reader = new FileReader();
  reader.onload = (e) => {
    try {
      const gpxContent = e.target.result;
      // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ GPX
      addApiLog('GPX —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω');
      console.log('GPX Content:', gpxContent);
    } catch (error) {
      addApiLog('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ GPX');
      console.error('GPX Load Error:', error);
    }
  };
  reader.readAsText(file);
  
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º input –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≥–æ –∂–µ —Ñ–∞–π–ª–∞
  event.target.value = '';
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
 */
function handleShowSavedRoutes() {
  menuModal.classList.remove('show');
  const routesModal = document.getElementById('routesModal');
  if (routesModal) {
    routesModal.style.display = 'flex';
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–∏—Å—Ç–∫–∏ –æ–±–ª–∞—Å—Ç–∏
 */
function handleClearArea() {
  if (confirm('–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ?')) {
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—á–∏—Å—Ç–∫–∏
    import('./mapModule.js').then(module => {
      module.clearAll();
      setStep('select_area');
      isAreaSelected = false;
      isStartPlaced = false;
    });
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—á–µ–∫)
 */
function handleRefresh() {
  addApiLog('–†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—á–µ–∫...');
  // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –≤—ã–∑—ã–≤–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
  import('./pointGeneration.js').then(module => {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫
    const pointsInput = document.getElementById('pointsCount');
    const count = pointsInput ? parseInt(pointsInput.value) : 10;
    
    import('./mapModule.js').then(mapModule => {
      const selectedBounds = mapModule.getSelectedBounds();
      const startPoint = mapModule.getStartPoint();
      
      if (selectedBounds && startPoint) {
        module.regeneratePoints(selectedBounds, startPoint, count);
      }
    });
  });
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è (–æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ)
 */
function handleDelete() {
  handleClearArea();
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —à–∞–≥
 */
export function getCurrentStep() {
  return currentStep;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –≤—ã–±—Ä–∞–Ω–∞ –ª–∏ –æ–±–ª–∞—Å—Ç—å
 */
export function isAreaDrawn() {
  return isAreaSelected;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ª–∏ —Ç–æ—á–∫–∞ —Å—Ç–∞—Ä—Ç–∞
 */
export function isStartSet() {
  return isStartPlaced;
}

