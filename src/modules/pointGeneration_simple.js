/**
 * –ú–æ–¥—É–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫ –Ω–∞ —Ç—Ä–æ–ø–∞—Ö - –£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
 * –ü—Ä–æ—Å—Ç–∞—è –∏ –Ω–∞–¥–µ–∂–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—á–µ–∫ –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
 */

import { haversine, rectangleArea, extractPolygons, pointInPolygon, getRandomPointOnLine, segmentIntersectsPolygon } from './utils.js';
import { fetchAllMapData, clearMapDataCache } from './optimizedOverpassAPI.js';
import { showClosedAreasOnMap, showWaterAreasOnMap, showBarriersOnMap, addPointMarker, addFailedAttemptMarker, clearPointMarkers, clearFailedAttemptMarkers, getStartPoint, clearGraphDebugLayers, updateStartPointPosition } from './mapModule.js';
import { buildPathGraph, findNearestNodeIdx, isReachable } from './algorithms.js';
import { updateTargetPointsList } from './navigation.js';
import { setTrailGraph } from './routeSequence.js';

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–º–µ–Ω—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
let cancelGeneration = false;

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ—á–µ–∫ - –ü–†–û–°–¢–ê–Ø –í–ï–†–°–ò–Ø
export async function generatePointsSimple(selectedBounds, startPoint, count, statusCallback, buttonCallback, cancelCallback) {
  if (!selectedBounds) {
    statusCallback('–°–Ω–∞—á–∞–ª–∞ –≤—ã–¥–µ–ª–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ!');
    return;
  }
  if (!startPoint) {
    statusCallback('–°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ—á–∫—É —Å—Ç–∞—Ä—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç–µ!');
    return;
  }
  if (isNaN(count) || count < 1) {
    statusCallback('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫!');
    return;
  }

  buttonCallback(true); // –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
  cancelCallback(true); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
  cancelGeneration = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Ç–º–µ–Ω—ã

  statusCallback('–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö OSM...');

  const sw = selectedBounds.getSouthWest();
  const ne = selectedBounds.getNorthEast();

  // –ì–ò–ë–ö–ò–ô —Ä–∞—Å—á–µ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è - —Å—Ç—Ä–µ–º–∏–º—Å—è –∫ –º–∞–∫—Å–∏–º—É–º—É, –Ω–æ –≥–æ—Ç–æ–≤—ã –∫ –∫–æ–º–ø—Ä–æ–º–∏—Å—Å–∞–º
  const area = rectangleArea(selectedBounds); // –≤ –º^2
  
  // –ù–∞—á–∏–Ω–∞–µ–º —Å –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ (90% –ø–ª–æ—â–∞–¥–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è)
  const optimisticAreaPerPoint = (area * 0.9) / count;
  const optimisticMinDist = 2 * Math.sqrt(optimisticAreaPerPoint / Math.PI);
  
  // –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π —Ä–∞—Å—á–µ—Ç (60% –ø–ª–æ—â–∞–¥–∏ - —É—á–∏—Ç—ã–≤–∞–µ–º –º–Ω–æ–≥–æ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π)
  const conservativeAreaPerPoint = (area * 0.6) / count;
  const conservativeMinDist = 2 * Math.sqrt(conservativeAreaPerPoint / Math.PI);
  
  // –ù–∞—á–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: –º–µ–∂–¥—É –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–º –∏ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–º, –Ω–æ –Ω–µ –º–µ–Ω–µ–µ 50–º
  const initialMinDist = Math.max((optimisticMinDist + conservativeMinDist) / 2, 50);
  
  // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ, –Ω–∏–∂–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ –æ–ø—É—Å–∫–∞–µ–º—Å—è (–≥–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞)
  const absoluteMinDist = Math.max(conservativeMinDist * 0.7, 40);
  
  const adaptiveMinDist = Math.min(initialMinDist, 400); // –ú–∞–∫—Å–∏–º—É–º 400–º –¥–ª—è —Ä–∞–∑—É–º–Ω–æ—Å—Ç–∏
  
  console.log(`üìè –ì–∏–±–∫–∏–π —Ä–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π:`);
  console.log(`   –ü–ª–æ—â–∞–¥—å –æ–±–ª–∞—Å—Ç–∏: ${(area / 1000000).toFixed(2)} –∫–º¬≤`);
  console.log(`   –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${optimisticMinDist.toFixed(1)}–º`);
  console.log(`   –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${conservativeMinDist.toFixed(1)}–º`);
  console.log(`   –ù–∞—á–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${adaptiveMinDist.toFixed(1)}–º`);
  console.log(`   –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –º–∏–Ω–∏–º—É–º: ${absoluteMinDist.toFixed(1)}–º`);

  statusCallback(`üéØ –ù–∞—á–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${adaptiveMinDist.toFixed(0)}–º (–±—É–¥–µ—Ç –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤—Å–µ—Ö ${count} —Ç–æ—á–µ–∫)`);

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±–ª–∞—Å—Ç—å –≤—ã–±—Ä–∞–Ω–∞
    if (!selectedBounds || !selectedBounds.south || !selectedBounds.west || !selectedBounds.north || !selectedBounds.east) {
      throw new Error('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ, –Ω–∞—Ä–∏—Å–æ–≤–∞–≤ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫');
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
    const bbox = `${selectedBounds.south},${selectedBounds.west},${selectedBounds.north},${selectedBounds.east}`;
    console.log(`üéØ –í—ã–±—Ä–∞–Ω–Ω–∞—è –æ–±–ª–∞—Å—Ç—å: ${bbox}`);
    const mapData = await fetchAllMapData(bbox, statusCallback);
    
    const closedAreasData = mapData.closed_areas || [];
    const waterAreasData = mapData.water_areas || [];
    const barriersData = mapData.barriers || [];
    const pathsData = mapData.paths || [];

    if (cancelGeneration) {
      statusCallback('–û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.');
      buttonCallback(false);
      cancelCallback(false);
      return;
    }

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –Ω–∞ –∫–∞—Ä—Ç–µ
    showClosedAreasOnMap(closedAreasData);
    showWaterAreasOnMap(waterAreasData);
    showBarriersOnMap(barriersData);

    statusCallback('–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞ —Ç—Ä–æ–ø...');
    clearGraphDebugLayers();
    await new Promise(resolve => setTimeout(resolve, 100));

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ –ø–æ–ª–∏–≥–æ–Ω—ã
    const allForbiddenAreas = [...closedAreasData, ...waterAreasData];
    const forbiddenPolygons = extractPolygons(allForbiddenAreas);
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${forbiddenPolygons.length} –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤`);

    // –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ —Ç—Ä–æ–ø
    console.log(`–°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ –∏–∑ ${pathsData.length} –ø—É—Ç–µ–π...`);
    const graphResult = buildPathGraph(pathsData, forbiddenPolygons, barriersData);
    const graph = { nodes: graphResult.nodes, adj: graphResult.adj };
    console.log(`–ì—Ä–∞—Ñ –ø–æ—Å—Ç—Ä–æ–µ–Ω: ${graph.nodes.length} —É–∑–ª–æ–≤`);
    
    if (graph.nodes.length === 0) {
      statusCallback('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ —Ç—Ä–æ–ø. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.');
      buttonCallback(false);
      cancelCallback(false);
      return;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    setTrailGraph(graph);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–Ω–æ—Å—Ç—å —Å –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–æ–π
    const startNodeIdx = findNearestNodeIdx(startPoint.lat, startPoint.lng, graph.nodes);
    
    if (startNodeIdx === -1) {
      statusCallback('–ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ç—Ä–æ–ø—ã —Ä—è–¥–æ–º —Å —Ç–æ—á–∫–æ–π —Å—Ç–∞—Ä—Ç–∞! –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç–µ —Ç–æ—á–∫—É —Å—Ç–∞—Ä—Ç–∞ –±–ª–∏–∂–µ –∫ —Ç—Ä–æ–ø–∞–º.');
      buttonCallback(false);
      cancelCallback(false);
      return;
    }

    const nearestNode = graph.nodes[startNodeIdx];
    const distanceToNearestPath = haversine(startPoint.lat, startPoint.lng, nearestNode.lat, nearestNode.lon);
    
    if (distanceToNearestPath > 50) {
      statusCallback(`‚ö†Ô∏è –¢–æ—á–∫–∞ —Å—Ç–∞—Ä—Ç–∞ –¥–∞–ª–µ–∫–æ –æ—Ç —Ç—Ä–æ–ø (${distanceToNearestPath.toFixed(0)}–º). –ü–æ–¥–≤–æ–¥–∏–º –∫ –±–ª–∏–∂–∞–π—à–µ–π —Ç—Ä–æ–ø–µ...`);
      updateStartPointPosition(nearestNode.lat, nearestNode.lon);
      startPoint.lat = nearestNode.lat;
      startPoint.lng = nearestNode.lon;
      statusCallback(`‚úÖ –¢–æ—á–∫–∞ —Å—Ç–∞—Ä—Ç–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –∫ –±–ª–∏–∂–∞–π—à–µ–π —Ç—Ä–æ–ø–µ`);
      await new Promise(resolve => setTimeout(resolve, 1000));
    } else {
      statusCallback(`‚úÖ –¢–æ—á–∫–∞ —Å—Ç–∞—Ä—Ç–∞ —Ä—è–¥–æ–º —Å —Ç—Ä–æ–ø–æ–π (${distanceToNearestPath.toFixed(0)}–º)`);
    }

    statusCallback(`–ì–µ–Ω–µ—Ä–∞—Ü–∏—è ${count} —Ç–æ—á–µ–∫ –ø—Ä–æ—Å—Ç—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º...`);
    await new Promise(resolve => setTimeout(resolve, 100));

    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –º–∞—Ä–∫–µ—Ä—ã
    clearPointMarkers();
    clearFailedAttemptMarkers();
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—á–µ–∫ —Å —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º
    const generatedPoints = [];
    let attempts = 0;
    const maxAttempts = count * 1000; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    let currentMinDist = adaptiveMinDist;
    const minFloor = absoluteMinDist; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –º–∏–Ω–∏–º—É–º

    console.log(`–ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é ${count} —Ç–æ—á–µ–∫ —Å —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º`);
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π
    let rejectedByGraph = 0;
    let rejectedByDirectPath = 0;

    // –°–æ–∑–¥–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é —Å–µ—Ç–∫—É –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    const gridSize = Math.max(3, Math.ceil(Math.sqrt(count))); // –ú–∏–Ω–∏–º—É–º 3x3, –æ–±—ã—á–Ω–æ sqrt(count)
    const cellWidth = (ne.lng - sw.lng) / gridSize;
    const cellHeight = (ne.lat - sw.lat) / gridSize;
    
    console.log(`–°–æ–∑–¥–∞–Ω–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Å–µ—Ç–∫–∞ ${gridSize}x${gridSize} –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è`);

    // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Å–æ–±–∏—Ä–∞–µ–º —Ç–æ—á–∫–∏ –ø–æ —è—á–µ–π–∫–∞–º —Å–µ—Ç–∫–∏
    const cellPoints = new Map();
    
    // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Å–µ —Ç–æ—á–∫–∏ —Ç—Ä–æ–ø –ø–æ —è—á–µ–π–∫–∞–º
    pathsData.forEach(path => {
      if (!path.geometry || !Array.isArray(path.geometry)) return;
      
      // –ë–µ—Ä–µ–º –∫–∞–∂–¥—É—é 5-—é —Ç–æ—á–∫—É –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
      for (let i = 0; i < path.geometry.length; i += 5) {
        const coord = path.geometry[i];
        let lat, lon;
        
        if (Array.isArray(coord) && coord.length >= 2) {
          [lat, lon] = coord;
        } else if (coord && typeof coord === 'object') {
          lat = coord.lat;
          lon = coord.lon;
        } else {
          continue;
        }
        
        if (typeof lat !== 'number' || typeof lon !== 'number' || 
            lat < sw.lat || lat > ne.lat || lon < sw.lng || lon > ne.lng) continue;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è—á–µ–π–∫—É
        const cellX = Math.min(Math.floor((lon - sw.lng) / cellWidth), gridSize - 1);
        const cellY = Math.min(Math.floor((lat - sw.lat) / cellHeight), gridSize - 1);
        const cellIndex = cellY * gridSize + cellX;
        
        if (!cellPoints.has(cellIndex)) {
          cellPoints.set(cellIndex, []);
        }
        cellPoints.get(cellIndex).push([lat, lon]);
      }
    });

    console.log(`–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ —Ç–æ—á–∫–∏ –ø–æ ${cellPoints.size} —è—á–µ–π–∫–∞–º –∏–∑ ${gridSize * gridSize} –≤–æ–∑–º–æ–∂–Ω—ã—Ö`);

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —è—á–µ–µ–∫ –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏
    const cellUsage = new Map();
    cellPoints.forEach((points, cellIndex) => {
      cellUsage.set(cellIndex, 0);
    });

    // –£–õ–£–ß–®–ï–ù–ù–ê–Ø –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—á–µ–∫ —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º
    const targetPointsPerCell = Math.ceil(count / cellPoints.size); // –¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –Ω–∞ —è—á–µ–π–∫—É
    console.log(`–¶–µ–ª—å: –º–∞–∫—Å–∏–º—É–º ${targetPointsPerCell} —Ç–æ—á–µ–∫ –Ω–∞ —è—á–µ–π–∫—É –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏`);
    
    while (generatedPoints.length < count && attempts < maxAttempts) {
      if (cancelGeneration) {
        statusCallback('–û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.');
        buttonCallback(false);
        cancelCallback(false);
        return;
      }

      attempts++;

      // –£–ú–ù–û–ï –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
      const progress = generatedPoints.length / count;
      const attemptProgress = attempts / maxAttempts;
      
      // –°–Ω–∏–∂–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏:
      // 1. –ú–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      // 2. –ú–∞–ª–æ —Ç–æ—á–µ–∫ —Ä–∞–∑–º–µ—â–µ–Ω–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–ª–µ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
      let shouldReduce = false;
      let reductionFactor = 1.0;
      
      if (attempts > 0 && attempts % 100 === 0) {
        if (progress < 0.3 && attemptProgress > 0.2) {
          // –ï—Å–ª–∏ —Ä–∞–∑–º–µ—â–µ–Ω–æ –º–µ–Ω—å—à–µ 30% —Ç–æ—á–µ–∫, –∞ –ø–æ–ø—ã—Ç–æ–∫ —É–∂–µ –±–æ–ª—å—à–µ 20%
          shouldReduce = true;
          reductionFactor = 0.9; // –°–Ω–∏–∂–∞–µ–º –Ω–∞ 10%
        } else if (progress < 0.6 && attemptProgress > 0.4) {
          // –ï—Å–ª–∏ —Ä–∞–∑–º–µ—â–µ–Ω–æ –º–µ–Ω—å—à–µ 60% —Ç–æ—á–µ–∫, –∞ –ø–æ–ø—ã—Ç–æ–∫ —É–∂–µ –±–æ–ª—å—à–µ 40%
          shouldReduce = true;
          reductionFactor = 0.93; // –°–Ω–∏–∂–∞–µ–º –Ω–∞ 7%
        } else if (progress < 0.8 && attemptProgress > 0.6) {
          // –ï—Å–ª–∏ —Ä–∞–∑–º–µ—â–µ–Ω–æ –º–µ–Ω—å—à–µ 80% —Ç–æ—á–µ–∫, –∞ –ø–æ–ø—ã—Ç–æ–∫ —É–∂–µ –±–æ–ª—å—à–µ 60%
          shouldReduce = true;
          reductionFactor = 0.95; // –°–Ω–∏–∂–∞–µ–º –Ω–∞ 5%
        } else if (progress < 1.0 && attemptProgress > 0.8) {
          // –í –∫–æ–Ω—Ü–µ - –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ
          shouldReduce = true;
          reductionFactor = 0.85; // –°–Ω–∏–∂–∞–µ–º –Ω–∞ 15%
        }
      }
      
      if (shouldReduce) {
        const oldDist = currentMinDist;
        currentMinDist = Math.max(minFloor, currentMinDist * reductionFactor);
        console.log(`‚öôÔ∏è –ê–î–ê–ü–¢–ò–í–ù–û–ï —Å–Ω–∏–∂–µ–Ω–∏–µ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏: ${oldDist.toFixed(1)}–º ‚Üí ${currentMinDist.toFixed(1)}–º`);
        console.log(`   –ü—Ä–æ–≥—Ä–µ—Å—Å: ${(progress * 100).toFixed(1)}% —Ç–æ—á–µ–∫, ${(attemptProgress * 100).toFixed(1)}% –ø–æ–ø—ã—Ç–æ–∫`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        statusCallback(`‚öôÔ∏è –ê–¥–∞–ø—Ç–∞—Ü–∏—è: —Å–Ω–∏–∂–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ ${currentMinDist.toFixed(0)}–º –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–æ—á–µ–∫ (${generatedPoints.length}/${count})`);
      }

      // –ü–æ–ª—É—á–∞–µ–º —è—á–µ–π–∫–∏, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–º)
      const availableCells = Array.from(cellUsage.entries())
        .filter(([cellIndex, usage]) => cellPoints.has(cellIndex) && cellPoints.get(cellIndex).length > 0)
        .sort((a, b) => a[1] - b[1]); // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

      if (availableCells.length === 0) {
        console.log('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —è—á–µ–µ–∫ —Å —Ç–æ—á–∫–∞–º–∏');
        break;
      }

      // –°–¢–†–û–ì–ò–ô –≤—ã–±–æ—Ä —è—á–µ–π–∫–∏: —Å–Ω–∞—á–∞–ª–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —è—á–µ–π–∫–∏
      const minUsage = availableCells[0][1];
      const leastUsedCells = availableCells.filter(([cellIndex, usage]) => usage === minUsage);
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–≤—Å–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —è—á–µ–π–∫–∏, –≤—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–∑ –Ω–∏—Ö
      let selectedCell;
      if (minUsage === 0) {
        selectedCell = leastUsedCells[Math.floor(Math.random() * leastUsedCells.length)];
      } else if (minUsage < targetPointsPerCell) {
        // –ï—Å–ª–∏ –≤—Å–µ —è—á–µ–π–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã, –Ω–æ –Ω–µ –¥–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–∏, –≤—ã–±–∏—Ä–∞–µ–º –∏–∑ –Ω–µ–¥–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö
        selectedCell = leastUsedCells[Math.floor(Math.random() * leastUsedCells.length)];
      } else {
        // –í—Å–µ —è—á–µ–π–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –¥–æ —Ü–µ–ª–∏, –≤—ã–±–∏—Ä–∞–µ–º –Ω–∞–∏–º–µ–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—É—é
        selectedCell = availableCells[0];
      }
      
      const cellIndex = selectedCell[0];

      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ—á–∫–∏ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —è—á–µ–π–∫–∏
      const cellPointsList = cellPoints.get(cellIndex);
      if (!cellPointsList || cellPointsList.length === 0) {
        continue;
      }

      // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ç–æ—á–∫—É –∏–∑ —è—á–µ–π–∫–∏
      const randomPointIndex = Math.floor(Math.random() * cellPointsList.length);
      const [lat, lon] = cellPointsList[randomPointIndex];

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –∑–æ–Ω—ã
      let inForbiddenArea = false;
      for (const poly of forbiddenPolygons) {
        if (pointInPolygon(lat, lon, poly)) {
          inForbiddenArea = true;
          break;
        }
      }
      if (inForbiddenArea) {
        // –£–¥–∞–ª—è–µ–º –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â—É—é —Ç–æ—á–∫—É –∏–∑ —è—á–µ–π–∫–∏
        cellPointsList.splice(randomPointIndex, 1);
        addFailedAttemptMarker(lat, lon);
        continue;
      }

      // –û–ß–ï–ù–¨ –°–¢–†–û–ì–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
      let tooClose = false;
      let minDistanceFound = Infinity;
      let closestPointIndex = -1;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ—á–µ–∫
      for (let i = 0; i < generatedPoints.length; i++) {
        const existingPoint = generatedPoints[i];
        const distance = haversine(lat, lon, existingPoint[0], existingPoint[1]);
        if (distance < minDistanceFound) {
          minDistanceFound = distance;
          closestPointIndex = i + 1; // +1 –¥–ª—è –Ω–æ–º–µ—Ä–∞ —Ç–æ—á–∫–∏ (–Ω–∞—á–∏–Ω–∞—è —Å 1)
        }
        if (distance < currentMinDist) {
          tooClose = true;
          break;
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ç–æ—á–∫–∏ —Å—Ç–∞—Ä—Ç–∞
      const distanceToStart = haversine(lat, lon, startPoint.lat, startPoint.lng);
      if (distanceToStart < minDistanceFound) {
        minDistanceFound = distanceToStart;
        closestPointIndex = 0; // 0 –¥–ª—è —Ç–æ—á–∫–∏ —Å—Ç–∞—Ä—Ç–∞
      }
      if (distanceToStart < currentMinDist) {
        tooClose = true;
      }
      
      if (tooClose) {
        // –ë–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ—á–µ–∫ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        if (attempts > 50 && minDistanceFound < currentMinDist * 0.7) {
          cellPointsList.splice(randomPointIndex, 1);
        }
        
        addFailedAttemptMarker(lat, lon);
        continue;
      }
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —Ç–æ—á–∫–∞ –≤ —Ç–æ–π –∂–µ —è—á–µ–π–∫–µ, —á—Ç–æ –∏ —É–∂–µ —Ä–∞–∑–º–µ—â–µ–Ω–Ω–∞—è
      const currentCellX = cellIndex % gridSize;
      const currentCellY = Math.floor(cellIndex / gridSize);
      
      for (let i = 0; i < generatedPoints.length; i++) {
        const existingPoint = generatedPoints[i];
        const existingCellX = Math.floor((existingPoint[1] - sw.lng) / cellWidth);
        const existingCellY = Math.floor((existingPoint[0] - sw.lat) / cellHeight);
        
        // –ï—Å–ª–∏ —Ç–æ—á–∫–∏ –≤ —Å–æ—Å–µ–¥–Ω–∏—Ö —è—á–µ–π–∫–∞—Ö, –ø—Ä–∏–º–µ–Ω—è–µ–º –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
        const cellDistance = Math.max(Math.abs(currentCellX - existingCellX), Math.abs(currentCellY - existingCellY));
        if (cellDistance <= 1) { // –¢–∞ –∂–µ –∏–ª–∏ —Å–æ—Å–µ–¥–Ω—è—è —è—á–µ–π–∫–∞
          const distance = haversine(lat, lon, existingPoint[0], existingPoint[1]);
          const strictMinDist = currentMinDist * 1.2; // –ù–∞ 20% –±–æ–ª—å—à–µ –¥–ª—è —Å–æ—Å–µ–¥–Ω–∏—Ö —è—á–µ–µ–∫
          
          if (distance < strictMinDist) {
            console.log(`‚ùå –¢–æ—á–∫–∞ —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ –∫ —Ç–æ—á–∫–µ ${i + 1} –≤ —Å–æ—Å–µ–¥–Ω–µ–π —è—á–µ–π–∫–µ: ${distance.toFixed(1)}–º < ${strictMinDist.toFixed(1)}–º`);
            addFailedAttemptMarker(lat, lon);
            tooClose = true;
            break;
          }
        }
      }
      
      if (tooClose) {
        continue;
      }

      // –ê–î–ê–ü–¢–ò–í–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–∏–º–æ—Å—Ç–∏ (—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –º–µ–Ω–µ–µ —Å—Ç—Ä–æ–≥–æ–π –±—ã—Å—Ç—Ä–µ–µ)
      const progressRatio = generatedPoints.length / count;
      const attemptsRatio = attempts / maxAttempts;
      const shouldSkipStrictChecks = (progressRatio < 0.5 && attemptsRatio > 0.3) || attemptsRatio > 0.6;
      
      if (!shouldSkipStrictChecks) {
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–∏–º–æ—Å—Ç—å –ø–æ –≥—Ä–∞—Ñ—É —Ç—Ä–æ–ø
        const pointNodeIdx = findNearestNodeIdx(lat, lon, graph.nodes);
        if (pointNodeIdx === -1 || !isReachable(graph, startNodeIdx, pointNodeIdx)) {
          rejectedByGraph++;
          cellPointsList.splice(randomPointIndex, 1);
          addFailedAttemptMarker(lat, lon);
          continue;
        }
        
        // 2. –ü–†–û–°–¢–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞: –æ—Ç–∫–ª–æ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ—á–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –í–ù–£–¢–†–ò –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –∑–æ–Ω
        // (–Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –ø—É—Ç–∏ - –¥–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞—Ñ—É —Ç—Ä–æ–ø)
        let pointInForbiddenZone = false;
        
        for (const poly of forbiddenPolygons) {
          if (pointInPolygon(lat, lon, poly)) {
            pointInForbiddenZone = true;
            if (generatedPoints.length < 3) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–ª—è –ø–µ—Ä–≤—ã—Ö 3 —Ç–æ—á–µ–∫
              console.log(`üö´ –¢–æ—á–∫–∞ ${generatedPoints.length + 1} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞: –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–π –∑–æ–Ω—ã`);
            }
            break;
          }
        }
        
        if (pointInForbiddenZone) {
          rejectedByDirectPath++;
          cellPointsList.splice(randomPointIndex, 1);
          addFailedAttemptMarker(lat, lon);
          continue;
        }
      } else {
        // –í —Ä–µ–∂–∏–º–µ –ø–æ–Ω–∏–∂–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–≥–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—É—é –¥–æ—Å—Ç–∏–∂–∏–º–æ—Å—Ç—å –∏ —á—Ç–æ —Ç–æ—á–∫–∞ –Ω–µ –≤ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–π –∑–æ–Ω–µ
        const pointNodeIdx = findNearestNodeIdx(lat, lon, graph.nodes);
        if (pointNodeIdx === -1 || !isReachable(graph, startNodeIdx, pointNodeIdx)) {
          rejectedByGraph++;
          cellPointsList.splice(randomPointIndex, 1);
          addFailedAttemptMarker(lat, lon);
          continue;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–æ—á–∫–∞ –Ω–µ –≤–Ω—É—Ç—Ä–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–π –∑–æ–Ω—ã (–Ω–æ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç—å)
        let pointInForbiddenZone = false;
        for (const poly of forbiddenPolygons) {
          if (pointInPolygon(lat, lon, poly)) {
            pointInForbiddenZone = true;
            break;
          }
        }
        
        if (pointInForbiddenZone) {
          rejectedByDirectPath++;
          cellPointsList.splice(randomPointIndex, 1);
          addFailedAttemptMarker(lat, lon);
          continue;
        }
        
        if (generatedPoints.length < 2) {
          console.log(`‚ö° –†–µ–∂–∏–º –ø–æ–Ω–∏–∂–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–≥–æ—Å—Ç–∏: —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ—á–∫–∏ —Å –æ–±—Ö–æ–¥–Ω—ã–º–∏ –ø—É—Ç—è–º–∏`);
        }
      }

      // –¢–æ—á–∫–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç!
      generatedPoints.push([lat, lon]);
      addPointMarker(lat, lon, generatedPoints.length);

      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —è—á–µ–π–∫–∏
      cellUsage.set(cellIndex, cellUsage.get(cellIndex) + 1);
      
      // –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—É—é —Ç–æ—á–∫—É –∏–∑ —è—á–µ–π–∫–∏
      cellPointsList.splice(randomPointIndex, 1);

      console.log(`‚úÖ –†–∞–∑–º–µ—â–µ–Ω–∞ —Ç–æ—á–∫–∞ ${generatedPoints.length}: (${lat.toFixed(6)}, ${lon.toFixed(6)}) –≤ —è—á–µ–π–∫–µ ${cellIndex}`);
      statusCallback(`‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${generatedPoints.length}/${count} —Ç–æ—á–µ–∫ (–ø–æ–ø—ã—Ç–æ–∫: ${attempts}/${maxAttempts})`);
      
      if (generatedPoints.length % 3 === 0) {
        await new Promise(resolve => setTimeout(resolve, 10));
      }
    }

    // –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if (generatedPoints.length === count) {
      statusCallback(`üéØ –£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${count} —Ç–æ—á–µ–∫ –∑–∞ ${attempts} –ø–æ–ø—ã—Ç–æ–∫!`);
      console.log(`‚úÖ –£–°–ü–ï–•: –í—Å–µ ${count} —Ç–æ—á–µ–∫ —Ä–∞–∑–º–µ—â–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ`);
    } else {
      const successRate = (generatedPoints.length / count * 100).toFixed(1);
      statusCallback(`‚ö†Ô∏è –†–∞–∑–º–µ—â–µ–Ω–æ ${generatedPoints.length} –∏–∑ ${count} —Ç–æ—á–µ–∫ (${successRate}%) –∑–∞ ${attempts} –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –∏–ª–∏ —É–≤–µ–ª–∏—á–∏—Ç—å –æ–±–ª–∞—Å—Ç—å.`);
      console.log(`‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–´–ô –£–°–ü–ï–•: ${generatedPoints.length}/${count} —Ç–æ—á–µ–∫ (${successRate}%)`);
      console.log(`   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:`);
      console.log(`   - –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç–æ—á–µ–∫ –¥–ª—è –¥–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏`);
      console.log(`   - –ú–Ω–æ–≥–æ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π (–≤–æ–¥–æ–µ–º—ã, –∑–∞–∫—Ä—ã—Ç—ã–µ –∑–æ–Ω—ã)`);
      console.log(`   - –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç—Ä–æ–ø –≤ –æ–±–ª–∞—Å—Ç–∏`);
      console.log(`   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:`);
      console.log(`   - –£–º–µ–Ω—å—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –¥–æ ${Math.floor(generatedPoints.length * 1.2)}-${Math.floor(generatedPoints.length * 1.5)}`);
      console.log(`   - –£–≤–µ–ª–∏—á—å—Ç–µ –≤—ã–¥–µ–ª–µ–Ω–Ω—É—é –æ–±–ª–∞—Å—Ç—å`);
      console.log(`   - –í—ã–±–µ—Ä–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç—Ä–æ–ø`);
    }

    // –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ —è—á–µ–π–∫–∞–º
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ —è—á–µ–π–∫–∞–º:`);
    console.log(`üéØ –¶–µ–ª—å: –º–∞–∫—Å–∏–º—É–º ${targetPointsPerCell} —Ç–æ—á–µ–∫ –Ω–∞ —è—á–µ–π–∫—É`);
    
    const usageStats = Array.from(cellUsage.entries())
      .map(([cellIndex, usage]) => ({ cellIndex, usage }))
      .sort((a, b) => b.usage - a.usage);
    
    console.log(`üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ—á–µ–∫ –ø–æ —è—á–µ–π–∫–∞–º:`);
    usageStats.forEach((stat, index) => {
      if (index < 10 || stat.usage > 0) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10 –∏–ª–∏ –≤—Å–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —è—á–µ–π–∫–∏
        const cellX = stat.cellIndex % gridSize;
        const cellY = Math.floor(stat.cellIndex / gridSize);
        console.log(`   –Ø—á–µ–π–∫–∞ (${cellX},${cellY}): ${stat.usage} —Ç–æ—á–µ–∫`);
      }
    });
    
    const totalUsedCells = usageStats.filter(stat => stat.usage > 0).length;
    const averagePointsPerUsedCell = generatedPoints.length / totalUsedCells;
    const maxUsage = Math.max(...usageStats.map(stat => stat.usage));
    
    console.log(`üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —è—á–µ–µ–∫: ${totalUsedCells} –∏–∑ ${cellPoints.size}`);
    console.log(`   –°—Ä–µ–¥–Ω–µ–µ —Ç–æ—á–µ–∫ –Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º—É—é —è—á–µ–π–∫—É: ${averagePointsPerUsedCell.toFixed(1)}`);
    console.log(`   –ú–∞–∫—Å–∏–º—É–º —Ç–æ—á–µ–∫ –≤ –æ–¥–Ω–æ–π —è—á–µ–π–∫–µ: ${maxUsage}`);
    console.log(`   –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—å: ${maxUsage <= targetPointsPerCell ? '‚úÖ —Ö–æ—Ä–æ—à–∞—è' : '‚ö†Ô∏è –Ω–µ—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ'}`);
    
    console.log(`üö´ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π:`);
    console.log(`   –û—Ç–∫–ª–æ–Ω–µ–Ω–æ –ø–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≥—Ä–∞—Ñ–∞: ${rejectedByGraph}`);
    console.log(`   –û—Ç–∫–ª–æ–Ω–µ–Ω–æ –ø–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—é –ø—Ä—è–º–æ–≥–æ –ø—É—Ç–∏: ${rejectedByDirectPath}`);
    console.log(`   –í—Å–µ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π: ${rejectedByGraph + rejectedByDirectPath}`);

    // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
    console.log(`üîç –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏:`);
    let minActualDistance = Infinity;
    let closestPair = null;
    
    for (let i = 0; i < generatedPoints.length; i++) {
      for (let j = i + 1; j < generatedPoints.length; j++) {
        const distance = haversine(
          generatedPoints[i][0], generatedPoints[i][1],
          generatedPoints[j][0], generatedPoints[j][1]
        );
        if (distance < minActualDistance) {
          minActualDistance = distance;
          closestPair = [i + 1, j + 1]; // +1 –¥–ª—è –Ω–æ–º–µ—Ä–æ–≤ —Ç–æ—á–µ–∫
        }
      }
    }
    
    console.log(`   –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏: ${minActualDistance.toFixed(1)}–º`);
    
    if (closestPair && closestPair.length >= 2) {
      console.log(`   –ë–ª–∏–∂–∞–π—à–∏–µ —Ç–æ—á–∫–∏: ${closestPair[0]} –∏ ${closestPair[1]}`);
    } else {
      console.log(`   –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ—á–µ–∫ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π`);
    }
    
    console.log(`   –¶–µ–ª–µ–≤–æ–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –±—ã–ª–æ: ${adaptiveMinDist.toFixed(1)}–º`);
    console.log(`   –ò—Ç–æ–≥–æ–≤–æ–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${currentMinDist.toFixed(1)}–º`);
    
    if (closestPair && closestPair.length >= 2 && minActualDistance < currentMinDist * 0.9) {
      console.log(`‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ù–∞–π–¥–µ–Ω—ã —Ç–æ—á–∫–∏ –±–ª–∏–∂–µ —Ü–µ–ª–µ–≤–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è!`);
      statusCallback(`‚ö†Ô∏è –¢–æ—á–∫–∏ ${closestPair[0]} –∏ ${closestPair[1]} —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ: ${minActualDistance.toFixed(1)}–º`);
    } else {
      console.log(`‚úÖ –í—Å–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è —Å–æ–±–ª—é–¥–µ–Ω—ã`);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ—á–µ–∫ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    updateTargetPointsList();

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ—á–µ–∫:', error);
    statusCallback(`–û—à–∏–±–∫–∞: ${error.message}`);
  } finally {
    buttonCallback(false); // –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    cancelCallback(false); // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ–Ω—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
export function cancelPointGeneration() {
  cancelGeneration = true;
}
