/**
 * –ú–æ–¥—É–ª—å –∑–≤—É–∫–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∑–≤—É–∫–æ–≤—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é "–ì–æ—Ä—è—á–æ-–•–æ–ª–æ–¥–Ω–æ" —Å –ø—Ä–∏—è—Ç–Ω—ã–º–∏ –∑–≤—É–∫–∞–º–∏
 */

// –°–æ–∑–¥–∞—ë–º –∞—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–≤—É–∫–æ–≤
let audioContext = null;
let isAudioEnabled = true;

// –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –Ω–æ—Ç—ã –∏ –∏—Ö —á–∞—Å—Ç–æ—Ç—ã
const MUSICAL_NOTES = {
  // –ú–∞–∂–æ—Ä–Ω–∞—è –≥–∞–º–º–∞ (–ø—Ä–∏—è—Ç–Ω—ã–µ –∑–≤—É–∫–∏)
  C4: 261.63,   // –î–æ
  D4: 293.66,   // –†–µ
  E4: 329.63,   // –ú–∏
  F4: 349.23,   // –§–∞
  G4: 392.00,   // –°–æ–ª—å
  A4: 440.00,   // –õ—è
  B4: 493.88,   // –°–∏
  C5: 523.25,   // –î–æ –æ–∫—Ç–∞–≤–æ–π –≤—ã—à–µ
  
  // –ú–∏–Ω–æ—Ä–Ω–∞—è –≥–∞–º–º–∞ (–¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è)
  Cm4: 261.63,  // –î–æ –º–∏–Ω–æ—Ä
  Dm4: 293.66,  // –†–µ –º–∏–Ω–æ—Ä
  Em4: 311.13,  // –ú–∏ –º–∏–Ω–æ—Ä
  Fm4: 349.23,  // –§–∞ –º–∏–Ω–æ—Ä
  Gm4: 392.00,  // –°–æ–ª—å –º–∏–Ω–æ—Ä
  Am4: 440.00,  // –õ—è –º–∏–Ω–æ—Ä
  Bm4: 466.16,  // –°–∏ –º–∏–Ω–æ—Ä
};

// –ó–≤—É–∫–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
const SOUND_PATTERNS = {
  close: {
    notes: [MUSICAL_NOTES.C5, MUSICAL_NOTES.E4, MUSICAL_NOTES.G4], // –ú–∞–∂–æ—Ä–Ω—ã–π –∞–∫–∫–æ—Ä–¥
    durations: [0.1, 0.1, 0.1],
    intervals: [0.05, 0.05],
    description: "–ö–æ–ª–æ–∫–æ–ª—å—á–∏–∫–∏ - –æ—á–µ–Ω—å –±–ª–∏–∑–∫–æ"
  },
  hot: {
    notes: [MUSICAL_NOTES.G4, MUSICAL_NOTES.B4],
    durations: [0.15, 0.15],
    intervals: [0.1],
    description: "–°–≤–∏—Å—Ç - –≥–æ—Ä—è—á–æ"
  },
  warm: {
    notes: [MUSICAL_NOTES.E4, MUSICAL_NOTES.A4],
    durations: [0.2, 0.2],
    intervals: [0.15],
    description: "–î–≤–æ–π–Ω–æ–π —Å–∏–≥–Ω–∞–ª - —Ç–µ–ø–ª–æ"
  },
  cool: {
    notes: [MUSICAL_NOTES.C4, MUSICAL_NOTES.F4],
    durations: [0.25, 0.25],
    intervals: [0.2],
    description: "–ù–∏–∑–∫–∏–µ –Ω–æ—Ç—ã - –ø—Ä–æ—Ö–ª–∞–¥–Ω–æ"
  },
  cold: {
    notes: [MUSICAL_NOTES.C4],
    durations: [0.3],
    intervals: [],
    description: "–û–¥–∏–Ω–æ—á–Ω—ã–π –Ω–∏–∑–∫–∏–π —Ç–æ–Ω - —Ö–æ–ª–æ–¥–Ω–æ"
  },
  target: {
    notes: [MUSICAL_NOTES.C5, MUSICAL_NOTES.E4, MUSICAL_NOTES.G4, MUSICAL_NOTES.C5],
    durations: [0.2, 0.15, 0.15, 0.3],
    intervals: [0.1, 0.1, 0.1],
    description: "–¢—Ä–∏—É–º—Ñ–∞–ª—å–Ω—ã–π –∞–∫–∫–æ—Ä–¥ - —Ü–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!"
  }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
function initAudioContext() {
  if (!audioContext) {
    try {
      audioContext = new (window.AudioContext || window.webkitAudioContext)();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:', error);
      isAudioEnabled = false;
    }
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ —Ç–æ–Ω–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∑–≤—É—á–∞–Ω–∏–µ–º
function generateMusicalTone(frequency, duration, volume = 0.3, waveType = 'sine') {
  if (!isAudioEnabled || !audioContext) return;
  
  const oscillator = audioContext.createOscillator();
  const gainNode = audioContext.createGain();
  const filterNode = audioContext.createBiquadFilter();
  
  // –°–æ–∑–¥–∞—ë–º —Ü–µ–ø–æ—á–∫—É: oscillator -> filter -> gain -> destination
  oscillator.connect(filterNode);
  filterNode.connect(gainNode);
  gainNode.connect(audioContext.destination);
  
  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Å—Ü–∏–ª–ª—è—Ç–æ—Ä
  oscillator.frequency.setValueAtTime(frequency, audioContext.currentTime);
  oscillator.type = waveType;
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –±–æ–ª–µ–µ –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –∑–≤—É–∫–∞
  filterNode.type = 'lowpass';
  filterNode.frequency.setValueAtTime(frequency * 2, audioContext.currentTime);
  filterNode.Q.setValueAtTime(1, audioContext.currentTime);
  
  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å —Å –ø–ª–∞–≤–Ω—ã–º –∑–∞—Ç—É—Ö–∞–Ω–∏–µ–º
  gainNode.gain.setValueAtTime(0, audioContext.currentTime);
  gainNode.gain.linearRampToValueAtTime(volume, audioContext.currentTime + 0.01);
  gainNode.gain.exponentialRampToValueAtTime(0.001, audioContext.currentTime + duration);
  
  oscillator.start(audioContext.currentTime);
  oscillator.stop(audioContext.currentTime + duration);
}

// –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
function playMusicalPattern(pattern, direction = 'neutral', distance = null) {
  if (!isAudioEnabled) {
    console.log('–ó–≤—É–∫ –æ—Ç–∫–ª—é—á–µ–Ω:', pattern.description, direction, distance);
    return;
  }
  
  initAudioContext();
  
  if (audioContext.state === 'suspended') {
    audioContext.resume();
  }
  
  console.log('üéµ –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º:', pattern.description, '–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:', direction);
  
  let currentTime = audioContext.currentTime;
  
  // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –Ω–æ—Ç—ã –ø–∞—Ç—Ç–µ—Ä–Ω–∞
  for (let i = 0; i < pattern.notes.length; i++) {
    let frequency = pattern.notes[i];
    let duration = pattern.durations[i];
    let volume = 0.3;
    
    // –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∑–≤—É–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if (direction === 'approaching') {
      // –ü—Ä–∏ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ - –ø–æ–≤—ã—à–∞–µ–º —Ç–æ–Ω –∏ –¥–µ–ª–∞–µ–º –∑–≤—É–∫ —è—Ä—á–µ
      frequency *= 1.1;
      volume = 0.4;
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–µ—É–≥–æ–ª—å–Ω—É—é –≤–æ–ª–Ω—É –¥–ª—è –±–æ–ª–µ–µ –º—è–≥–∫–æ–≥–æ –∑–≤—É–∫–∞
      generateMusicalTone(frequency, duration, volume, 'triangle');
    } else if (direction === 'moving_away') {
      // –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ - –ø–æ–Ω–∏–∂–∞–µ–º —Ç–æ–Ω –∏ –¥–µ–ª–∞–µ–º –∑–≤—É–∫ –≥–ª—É—à–µ
      frequency *= 0.9;
      volume = 0.2;
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∏–ª–æ–æ–±—Ä–∞–∑–Ω—É—é –≤–æ–ª–Ω—É –¥–ª—è –±–æ–ª–µ–µ —Ä–µ–∑–∫–æ–≥–æ –∑–≤—É–∫–∞
      generateMusicalTone(frequency, duration, volume, 'sawtooth');
    } else {
      // –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∑–≤—É–∫
      generateMusicalTone(frequency, duration, volume, 'sine');
    }
    
    console.log(`üéµ –ù–æ—Ç–∞ ${i+1}: ${frequency.toFixed(0)} –ì—Ü, ${duration}—Å`);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –Ω–æ—Ç–∞–º–∏
    if (i < pattern.intervals.length) {
      currentTime += duration + pattern.intervals[i];
    }
  }
}

// –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–æ–≤–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ —Å —É—á—ë—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
export function playSoundPattern(pattern, direction = 'neutral', distance = null) {
  console.log('üîä playSoundPattern –≤—ã–∑–≤–∞–Ω–∞:', { pattern, direction, distance, isAudioEnabled });
  
  if (!isAudioEnabled) {
    console.log('–ó–≤—É–∫ –æ—Ç–∫–ª—é—á–µ–Ω:', pattern, direction, distance);
    return;
  }
  
  initAudioContext();
  
  if (audioContext.state === 'suspended') {
    audioContext.resume();
  }
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–≤—É–∫–∞ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
  let soundType;
  if (pattern.length === 1) {
    const duration = pattern[0];
    if (duration <= 100) soundType = 'close';
    else if (duration <= 150) soundType = 'hot';
    else if (duration <= 200) soundType = 'warm';
    else soundType = 'cold';
  } else {
    soundType = 'target';
  }
  
  // –ü–æ–ª—É—á–∞–µ–º –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
  const musicalPattern = SOUND_PATTERNS[soundType];
  
  // –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
  if (distance !== null) {
    const step = Math.max(distance / 10, 10);
    const steps = Math.floor(distance / step);
    
    // –ß–µ–º –±–ª–∏–∂–µ –∫ —Ü–µ–ª–∏, —Ç–µ–º –≤—ã—à–µ –Ω–æ—Ç—ã
    musicalPattern.notes = musicalPattern.notes.map(note => 
      note * (1 + steps * 0.05) // +5% –∑–∞ –∫–∞–∂–¥—ã–π —à–∞–≥ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è
    );
  }
  
  // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
  playMusicalPattern(musicalPattern, direction, distance);
}

// –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–≤—É–∫–∏ –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è - –º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –∞–∫–∫–æ—Ä–¥—ã
export function playDirectionSound(direction) {
  console.log('üéµ playDirectionSound –≤—ã–∑–≤–∞–Ω–∞:', direction);
  
  if (!isAudioEnabled) return;
  
  initAudioContext();
  
  if (audioContext.state === 'suspended') {
    audioContext.resume();
  }
  
  if (direction === 'approaching') {
    // –ü—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ - —Ä–∞–¥–æ—Å—Ç–Ω—ã–π –º–∞–∂–æ—Ä–Ω—ã–π –∞–∫–∫–æ—Ä–¥ (–î–æ-–ú–∏-–°–æ–ª—å)
    const frequencies = [MUSICAL_NOTES.C4, MUSICAL_NOTES.E4, MUSICAL_NOTES.G4];
    const durations = [0.3, 0.3, 0.3];
    
    console.log('üéµ –ü—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ: –º–∞–∂–æ—Ä–Ω—ã–π –∞–∫–∫–æ—Ä–¥', frequencies);
    
    let currentTime = audioContext.currentTime;
    frequencies.forEach((freq, i) => {
      generateMusicalTone(freq, durations[i], 0.3, 'triangle');
      currentTime += durations[i] + 0.05;
    });
    
  } else if (direction === 'moving_away') {
    // –£–¥–∞–ª–µ–Ω–∏–µ - –≥—Ä—É—Å—Ç–Ω—ã–π –º–∏–Ω–æ—Ä–Ω—ã–π –∞–∫–∫–æ—Ä–¥ (–î–æ-–ú–∏‚ô≠-–°–æ–ª—å)
    const frequencies = [MUSICAL_NOTES.C4, MUSICAL_NOTES.Em4, MUSICAL_NOTES.G4];
    const durations = [0.4, 0.4, 0.4];
    
    console.log('üéµ –£–¥–∞–ª–µ–Ω–∏–µ: –º–∏–Ω–æ—Ä–Ω—ã–π –∞–∫–∫–æ—Ä–¥', frequencies);
    
    let currentTime = audioContext.currentTime;
    frequencies.forEach((freq, i) => {
      generateMusicalTone(freq, durations[i], 0.2, 'sawtooth');
      currentTime += durations[i] + 0.1;
    });
  }
}

// –í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∑–≤—É–∫–∞
export function toggleAudio() {
  isAudioEnabled = !isAudioEnabled;
  return isAudioEnabled;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–≤—É–∫–∞
export function isAudioOn() {
  return isAudioEnabled;
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ (0.0 - 1.0)
export function setVolume(volume) {
  if (audioContext) {
    const gainNode = audioContext.createGain();
    gainNode.gain.setValueAtTime(volume, audioContext.currentTime);
  }
}
