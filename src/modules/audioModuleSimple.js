// –ü—Ä–æ—Å—Ç–æ–π –∞—É–¥–∏–æ –º–æ–¥—É–ª—å –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
// –ú–∞–∂–æ—Ä–Ω—ã–π –∞–∫–∫–æ—Ä–¥ - –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ, –º–∏–Ω–æ—Ä–Ω—ã–π - —É–¥–∞–ª–µ–Ω–∏–µ
// –¢–æ–Ω –∏ —á–∞—Å—Ç–æ—Ç–∞ –∑–∞–≤–∏—Å—è—Ç –æ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è

let audioContext = null;
let isAudioEnabled = true;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
function initAudioContext() {
    if (!audioContext) {
        audioContext = new (window.AudioContext || window.webkitAudioContext)();
    }
    return audioContext;
}

// –°–æ–∑–¥–∞–Ω–∏–µ –º–∞–∂–æ—Ä–Ω–æ–≥–æ –∞–∫–∫–æ—Ä–¥–∞ (–ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ)
function createMajorChord(baseFreq, duration = 0.5) {
    const ctx = initAudioContext();
    
    // –ú–∞–∂–æ—Ä–Ω—ã–π –∞–∫–∫–æ—Ä–¥: –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–Ω, –±–æ–ª—å—à–∞—è —Ç–µ—Ä—Ü–∏—è, —á–∏—Å—Ç–∞—è –∫–≤–∏–Ω—Ç–∞
    const frequencies = [
        baseFreq,           // –û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–Ω (–¥–æ)
        baseFreq * 1.25,    // –ë–æ–ª—å—à–∞—è —Ç–µ—Ä—Ü–∏—è (–º–∏) - 5/4
        baseFreq * 1.5      // –ß–∏—Å—Ç–∞—è –∫–≤–∏–Ω—Ç–∞ (—Å–æ–ª—å) - 3/2
    ];
    
    frequencies.forEach((freq, index) => {
        const oscillator = ctx.createOscillator();
        const gainNode = ctx.createGain();
        
        oscillator.connect(gainNode);
        gainNode.connect(ctx.destination);
        
        oscillator.frequency.setValueAtTime(freq, ctx.currentTime);
        oscillator.type = 'sine';
        
        // –ü–ª–∞–≤–Ω–æ–µ –Ω–∞—Ä–∞—Å—Ç–∞–Ω–∏–µ –∏ –∑–∞—Ç—É—Ö–∞–Ω–∏–µ
        gainNode.gain.setValueAtTime(0, ctx.currentTime);
        gainNode.gain.linearRampToValueAtTime(0.3, ctx.currentTime + 0.1);
        gainNode.gain.linearRampToValueAtTime(0, ctx.currentTime + duration);
        
        oscillator.start(ctx.currentTime);
        oscillator.stop(ctx.currentTime + duration);
    });
}

// –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–Ω–æ—Ä–Ω–æ–≥–æ –∞–∫–∫–æ—Ä–¥–∞ (—É–¥–∞–ª–µ–Ω–∏–µ)
function createMinorChord(baseFreq, duration = 0.5) {
    const ctx = initAudioContext();
    
    // –ú–∏–Ω–æ—Ä–Ω—ã–π –∞–∫–∫–æ—Ä–¥: –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–Ω, –º–∞–ª–∞—è —Ç–µ—Ä—Ü–∏—è, —á–∏—Å—Ç–∞—è –∫–≤–∏–Ω—Ç–∞
    const frequencies = [
        baseFreq,           // –û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–Ω (–¥–æ)
        baseFreq * 1.2,     // –ú–∞–ª–∞—è —Ç–µ—Ä—Ü–∏—è (–º–∏-–±–µ–º–æ–ª—å) - 6/5
        baseFreq * 1.5      // –ß–∏—Å—Ç–∞—è –∫–≤–∏–Ω—Ç–∞ (—Å–æ–ª—å) - 3/2
    ];
    
    frequencies.forEach((freq, index) => {
        const oscillator = ctx.createOscillator();
        const gainNode = ctx.createGain();
        
        oscillator.connect(gainNode);
        gainNode.connect(ctx.destination);
        
        oscillator.frequency.setValueAtTime(freq, ctx.currentTime);
        oscillator.type = 'sine';
        
        // –ü–ª–∞–≤–Ω–æ–µ –Ω–∞—Ä–∞—Å—Ç–∞–Ω–∏–µ –∏ –∑–∞—Ç—É—Ö–∞–Ω–∏–µ
        gainNode.gain.setValueAtTime(0, ctx.currentTime);
        gainNode.gain.linearRampToValueAtTime(0.3, ctx.currentTime + 0.1);
        gainNode.gain.linearRampToValueAtTime(0, ctx.currentTime + duration);
        
        oscillator.start(ctx.currentTime);
        oscillator.stop(ctx.currentTime + duration);
    });
}

// –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —á–∞—Å—Ç–æ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
function getBaseFrequency(distance) {
    // –ß–µ–º –±–ª–∏–∂–µ, —Ç–µ–º –≤—ã—à–µ —Ç–æ–Ω
    // –î–∏–∞–ø–∞–∑–æ–Ω: –æ—Ç 200Hz (–¥–∞–ª–µ–∫–æ) –¥–æ 800Hz (–±–ª–∏–∑–∫–æ)
    const minFreq = 200;
    const maxFreq = 800;
    const maxDistance = 200; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
    const clampedDistance = Math.min(distance, maxDistance);
    
    // –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º: —á–µ–º –º–µ–Ω—å—à–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ, —Ç–µ–º –≤—ã—à–µ —á–∞—Å—Ç–æ—Ç–∞
    const frequency = maxFreq - (clampedDistance / maxDistance) * (maxFreq - minFreq);
    
    return Math.max(frequency, minFreq);
}

// –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –º–µ–∂–¥—É –∑–≤—É–∫–∞–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
function getSoundInterval(distance) {
    // –ß–µ–º –±–ª–∏–∂–µ, —Ç–µ–º —á–∞—â–µ –∑–≤—É–∫–∏
    // –î–∏–∞–ø–∞–∑–æ–Ω: –æ—Ç 2 —Å–µ–∫—É–Ω–¥ (–¥–∞–ª–µ–∫–æ) –¥–æ 0.5 —Å–µ–∫—É–Ω–¥ (–±–ª–∏–∑–∫–æ)
    const minInterval = 0.5;
    const maxInterval = 2.0;
    const maxDistance = 200;
    
    const clampedDistance = Math.min(distance, maxDistance);
    const interval = minInterval + (clampedDistance / maxDistance) * (maxInterval - minInterval);
    
    return interval;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
let lastSoundTime = 0;
let lastDistance = null;

function playNavigationSound(distance, speed) {
    if (!isAudioEnabled) return;
    
    const ctx = initAudioContext();
    const currentTime = ctx.currentTime;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è
    let isApproaching = false;
    if (lastDistance !== null) {
        if (speed > 0) {
            isApproaching = true;  // –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å = –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ
        } else if (speed < 0) {
            isApproaching = false; // –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å = —É–¥–∞–ª–µ–Ω–∏–µ
        } else {
            isApproaching = (distance < lastDistance); // –ï—Å–ª–∏ —Å–∫–æ—Ä–æ—Å—Ç—å 0, —Å–º–æ—Ç—Ä–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
        }
    }
    
    // –í—ã—á–∏—Å–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–≤—É–∫–∞
    const baseFreq = getBaseFrequency(distance);
    const interval = getSoundInterval(distance);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ä–∞ –ª–∏ –∏–≥—Ä–∞—Ç—å –∑–≤—É–∫
    if (currentTime - lastSoundTime >= interval) {
        if (isApproaching) {
            // –ü—Ä–∏–±–ª–∏–∂–∞–µ–º—Å—è - –º–∞–∂–æ—Ä–Ω—ã–π –∞–∫–∫–æ—Ä–¥
            createMajorChord(baseFreq, 0.6);
            console.log(`üéµ –ú–∞–∂–æ—Ä–Ω—ã–π –∞–∫–∫–æ—Ä–¥: ${Math.round(baseFreq)}Hz, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${Math.round(distance)}–º`);
        } else {
            // –£–¥–∞–ª—è–µ–º—Å—è - –º–∏–Ω–æ—Ä–Ω—ã–π –∞–∫–∫–æ—Ä–¥
            createMinorChord(baseFreq, 0.6);
            console.log(`üéµ –ú–∏–Ω–æ—Ä–Ω—ã–π –∞–∫–∫–æ—Ä–¥: ${Math.round(baseFreq)}Hz, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${Math.round(distance)}–º`);
        }
        
        lastSoundTime = currentTime;
    }
    
    lastDistance = distance;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏)
function playTestSound(distance, speed) {
    if (!isAudioEnabled) return;
    
    const baseFreq = getBaseFrequency(distance);
    let isApproaching = false;
    
    if (speed > 0) {
        isApproaching = true;
    } else if (speed < 0) {
        isApproaching = false;
    } else {
        isApproaching = (distance < 100); // –î–ª—è —Ç–µ—Å—Ç–∞ —Å—á–∏—Ç–∞–µ–º –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ–º –µ—Å–ª–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ < 100
    }
    
    if (isApproaching) {
        createMajorChord(baseFreq, 1.0);
        console.log(`üéµ –¢–ï–°–¢ - –ú–∞–∂–æ—Ä–Ω—ã–π –∞–∫–∫–æ—Ä–¥: ${Math.round(baseFreq)}Hz, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${Math.round(distance)}–º, —Å–∫–æ—Ä–æ—Å—Ç—å: ${speed}`);
    } else {
        createMinorChord(baseFreq, 1.0);
        console.log(`üéµ –¢–ï–°–¢ - –ú–∏–Ω–æ—Ä–Ω—ã–π –∞–∫–∫–æ—Ä–¥: ${Math.round(baseFreq)}Hz, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${Math.round(distance)}–º, —Å–∫–æ—Ä–æ—Å—Ç—å: ${speed}`);
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∑–≤—É–∫–∞ –ø–æ–±–µ–¥—ã - –ù–ê–°–¢–û–Ø–©–ò–ï –§–ê–ù–§–ê–†–´!
function createVictorySound() {
    const ctx = initAudioContext();
    
    // –ü–æ–±–µ–¥–Ω–∞—è –º–µ–ª–æ–¥–∏—è - –≤–æ—Å—Ö–æ–¥—è—â–∞—è –≥–∞–º–º–∞ —Å —Ç—Ä–∏—É–º—Ñ–æ–º
    const victoryMelody = [
        { freq: 261.63, duration: 0.2 },  // –î–æ (C4)
        { freq: 293.66, duration: 0.2 },  // –†–µ (D4)
        { freq: 329.63, duration: 0.2 },  // –ú–∏ (E4)
        { freq: 349.23, duration: 0.2 },  // –§–∞ (F4)
        { freq: 392.00, duration: 0.2 },  // –°–æ–ª—å (G4)
        { freq: 440.00, duration: 0.2 },  // –õ—è (A4)
        { freq: 493.88, duration: 0.2 },  // –°–∏ (B4)
        { freq: 523.25, duration: 0.4 }   // –î–æ –æ–∫—Ç–∞–≤–æ–π (C5) - –¥–æ–ª—å—à–µ!
    ];
    
    // –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –º–µ–ª–æ–¥–∏—é –¢–†–ò –†–ê–ó–ê —Å –Ω–∞—Ä–∞—Å—Ç–∞—é—â–µ–π –≥—Ä–æ–º–∫–æ—Å—Ç—å—é
    for (let repeat = 0; repeat < 3; repeat++) {
        const startTime = ctx.currentTime + repeat * 2.0; // 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –ø–æ–≤—Ç–æ—Ä–∞–º–∏
        let currentTime = startTime;
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å —Å –∫–∞–∂–¥—ã–º –ø–æ–≤—Ç–æ—Ä–æ–º
        const volume = 0.4 + (repeat * 0.1); // 0.4, 0.5, 0.6
        
        victoryMelody.forEach((note, index) => {
            const oscillator = ctx.createOscillator();
            const gainNode = ctx.createGain();
            
            oscillator.connect(gainNode);
            gainNode.connect(ctx.destination);
            
            oscillator.frequency.setValueAtTime(note.freq, currentTime);
            oscillator.type = 'sine';
            
            // –ì—Ä–æ–º–∫–æ–µ –Ω–∞—Ä–∞—Å—Ç–∞–Ω–∏–µ –∏ –∑–∞—Ç—É—Ö–∞–Ω–∏–µ
            gainNode.gain.setValueAtTime(0, currentTime);
            gainNode.gain.linearRampToValueAtTime(volume, currentTime + 0.05);
            gainNode.gain.linearRampToValueAtTime(volume, currentTime + note.duration - 0.05);
            gainNode.gain.linearRampToValueAtTime(0, currentTime + note.duration);
            
            oscillator.start(currentTime);
            oscillator.stop(currentTime + note.duration);
            
            currentTime += note.duration;
        });
    }
    
    // –§–ò–ù–ê–õ–¨–ù–´–ô –¢–†–ò–£–ú–§–ê–õ–¨–ù–´–ô –ê–ö–ö–û–†–î - –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ì–†–û–ú–ö–ò–ô!
    setTimeout(() => {
        const finalFrequencies = [
            261.63,  // –î–æ (C4)
            329.63,  // –ú–∏ (E4)
            392.00,  // –°–æ–ª—å (G4)
            523.25,  // –î–æ –æ–∫—Ç–∞–≤–æ–π (C5)
            659.25,  // –ú–∏ –æ–∫—Ç–∞–≤–æ–π (E5)
            783.99   // –°–æ–ª—å –æ–∫—Ç–∞–≤–æ–π (G5)
        ];
        const finalTime = ctx.currentTime;
        
        finalFrequencies.forEach(freq => {
            const oscillator = ctx.createOscillator();
            const gainNode = ctx.createGain();
            
            oscillator.connect(gainNode);
            gainNode.connect(ctx.destination);
            
            oscillator.frequency.setValueAtTime(freq, finalTime);
            oscillator.type = 'sine';
            
            // –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ê–Ø –ì–†–û–ú–ö–û–°–¢–¨!
            gainNode.gain.setValueAtTime(0, finalTime);
            gainNode.gain.linearRampToValueAtTime(0.5, finalTime + 0.1);
            gainNode.gain.linearRampToValueAtTime(0.5, finalTime + 1.5);
            gainNode.gain.linearRampToValueAtTime(0, finalTime + 2.0);
            
            oscillator.start(finalTime);
            oscillator.stop(finalTime + 2.0);
        });
    }, 6000); // –ü–æ—Å–ª–µ –≤—Å–µ—Ö —Ç—Ä–µ—Ö –º–µ–ª–æ–¥–∏–π
    
    console.log('üèÜüé∫üéâ –¢–†–ò–£–ú–§–ê–õ–¨–ù–´–ï –§–ê–ù–§–ê–†–´! –ü–û–ë–ï–î–ê! üéâüé∫üèÜ');
}

// –°–∏–º—É–ª—è—Ç–æ—Ä –¥–≤–∏–∂–µ–Ω–∏—è –∫ —Ü–µ–ª–∏
let simulationInterval = null;
let currentSimulationDistance = 0;
let simulationSpeed = 0;
let simulationTarget = 0;
let simulationCallback = null;

function startMovementSimulation(initialDistance, speed, callback) {
    if (simulationInterval) {
        clearInterval(simulationInterval);
    }
    
    currentSimulationDistance = initialDistance;
    simulationSpeed = speed;
    simulationTarget = 0; // –¶–µ–ª—å - –¥–æ—Å—Ç–∏—á—å 0 –º–µ—Ç—Ä–æ–≤
    simulationCallback = callback;
    
    console.log(`üèÉ‚Äç‚ôÇÔ∏è –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é: ${initialDistance}–º, —Å–∫–æ—Ä–æ—Å—Ç—å ${speed}–º/—Å`);
    
    // –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –∑–≤—É–∫
    if (isAudioEnabled) {
        playTestSound(currentSimulationDistance, simulationSpeed);
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
    simulationInterval = setInterval(() => {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        if (simulationSpeed > 0) {
            // –ü—Ä–∏–±–ª–∏–∂–∞–µ–º—Å—è - —É–º–µ–Ω—å—à–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
            currentSimulationDistance -= simulationSpeed;
        } else if (simulationSpeed < 0) {
            // –£–¥–∞–ª—è–µ–º—Å—è - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
            currentSimulationDistance += Math.abs(simulationSpeed);
        }
        
        if (simulationSpeed > 0 && currentSimulationDistance <= 0) {
            // –î–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–∏ –ø—Ä–∏ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏!
            currentSimulationDistance = 0;
            stopMovementSimulation();
            
            if (isAudioEnabled) {
                createVictorySound();
            }
            
            if (simulationCallback) {
                simulationCallback(true, 0); // true = –¥–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–∏
            }
        } else {
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ
            if (isAudioEnabled) {
                playTestSound(currentSimulationDistance, simulationSpeed);
            }
            
            if (simulationCallback) {
                simulationCallback(false, currentSimulationDistance);
            }
        }
    }, 1000); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
}

function stopMovementSimulation() {
    if (simulationInterval) {
        clearInterval(simulationInterval);
        simulationInterval = null;
    }
}

function getSimulationStatus() {
    return {
        isRunning: simulationInterval !== null,
        distance: currentSimulationDistance,
        speed: simulationSpeed,
        target: simulationTarget
    };
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–≤—É–∫–æ–º
function toggleAudio() {
    isAudioEnabled = !isAudioEnabled;
    console.log(`üîä –ó–≤—É–∫ ${isAudioEnabled ? '–≤–∫–ª—é—á–µ–Ω' : '–æ—Ç–∫–ª—é—á–µ–Ω'}`);
    return isAudioEnabled;
}

function isAudioOn() {
    return isAudioEnabled;
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
export {
    playNavigationSound,
    playTestSound,
    toggleAudio,
    isAudioOn,
    getBaseFrequency,
    getSoundInterval,
    startMovementSimulation,
    stopMovementSimulation,
    getSimulationStatus,
    createVictorySound
};
