/**
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Overpass API
 * –ú–∏–Ω–∏–º–∏–∑–∏—Ä—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –æ–±—ä–µ–¥–∏–Ω—è—è –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
 */

import { OVERPASS_API_BASE, REQUEST_TIMEOUTS, RETRY_CONFIG } from './config.js';

const REQUEST_TIMEOUT = REQUEST_TIMEOUTS.MEDIUM; // 30 —Å–µ–∫—É–Ω–¥

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º (—Ç—Ä–æ–ø—ã, –±–∞—Ä—å–µ—Ä—ã, –∑–∞–∫—Ä—ã—Ç—ã–µ –∑–æ–Ω—ã)
 * @param {string} bbox - bounding box –≤ —Ñ–æ—Ä–º–∞—Ç–µ "south,west,north,east"
 * @param {Function} statusCallback - —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
 * @returns {Promise<Object>}
 */
export async function fetchAllMapData(bbox, statusCallback) {
  const cacheKey = `all_data_${bbox}`;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
  if (window.mapDataCache && window.mapDataCache[cacheKey]) {
    return window.mapDataCache[cacheKey];
  }
  
  statusCallback('–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã...');
  
  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–π API
    const serverData = await fetchAllWithServerOverpass(bbox, statusCallback);
    if (serverData) {
      // –ö—ç—à–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
      if (!window.mapDataCache) window.mapDataCache = {};
      window.mapDataCache[cacheKey] = serverData;
      return serverData;
    }
  } catch (error) {
    // –°–µ—Ä–≤–µ—Ä–Ω—ã–π API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π
  }
  
  // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π
  statusCallback('–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ OpenStreetMap...');
  return await fetchAllWithClientOverpass(bbox, statusCallback);
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π API
 */
async function fetchAllWithServerOverpass(bbox, statusCallback) {
  try {
    const response = await fetch(`${OVERPASS_API_BASE}/all?bbox=${bbox}`, {
      method: 'GET',
      headers: { 'Content-Type': 'application/json' }
    });
    
    if (!response.ok) {
      throw new Error(`–°–µ—Ä–≤–µ—Ä–Ω—ã–π API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (${response.status})`);
    }
    
    const data = await response.json();
    
    if (data.success && data.data) {
      statusCallback(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${data.counts.paths} –¥–æ—Ä–æ–≥, ${data.counts.barriers} –±–∞—Ä—å–µ—Ä–æ–≤, ${data.counts.closed_areas} –∑–∞–∫—Ä—ã—Ç—ã—Ö –∑–æ–Ω`);
      return data.data;
    } else {
      throw new Error(data.error || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ API');
    }
  } catch (error) {
    throw error;
  }
}

/**
 * –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
 */
function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π Overpass API —Å retry –ª–æ–≥–∏–∫–æ–π
 */
async function fetchAllWithClientOverpass(bbox, statusCallback) {
  const [south, west, north, east] = bbox.split(',').map(Number);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å bbox
  if (isNaN(south) || isNaN(west) || isNaN(north) || isNaN(east)) {
    throw new Error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±–ª–∞—Å—Ç–∏`);
  }
  
  if (south >= north || west >= east) {
    throw new Error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±–ª–∞—Å—Ç–∏`);
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –æ–±–ª–∞—Å—Ç–∏ - –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è, —É–º–µ–Ω—å—à–∞–µ–º –∑–∞–ø—Ä–æ—Å
  const latDiff = north - south;
  const lonDiff = east - west;
  const areaSize = latDiff * lonDiff;
  
  if (areaSize > 0.01) { // –ï—Å–ª–∏ –æ–±–ª–∞—Å—Ç—å –±–æ–ª—å—à–µ ~1 –∫–º¬≤
    statusCallback('‚ö†Ô∏è –û–±–ª–∞—Å—Ç—å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –º–µ–Ω—å—à—É—é –æ–±–ª–∞—Å—Ç—å');
    throw new Error('–û–±–ª–∞—Å—Ç—å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
  }
  
  // –ï–¥–∏–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö —Å —É–º–µ–Ω—å—à–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
  const query = `[out:json][timeout:30];
(
  way["highway"~"^(path|footway|cycleway|track|service|bridleway|unclassified|residential|living_street|steps|pedestrian)$"](${south},${west},${north},${east});
  way["barrier"="wall"](${south},${west},${north},${east});
  way["natural"="cliff"](${south},${west},${north},${east});
  way["military"~"^(yes|restricted|prohibited)$"](${south},${west},${north},${east});
  way["access"~"^(no|private|restricted)$"](${south},${west},${north},${east});
);
out geom;`;

  let lastError;
  
  // Retry –ª–æ–≥–∏–∫–∞
  for (let attempt = 1; attempt <= RETRY_CONFIG.MAX_ATTEMPTS; attempt++) {
    try {
      statusCallback(`–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö OSM (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${RETRY_CONFIG.MAX_ATTEMPTS})...`);
      
      const controller = new AbortController();
      const timeoutId = setTimeout(() => {
        console.log(`‚è∞ –¢–∞–π–º–∞—É—Ç ${REQUEST_TIMEOUT}–º—Å –ø—Ä–µ–≤—ã—à–µ–Ω –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ ${attempt}`);
        controller.abort();
      }, REQUEST_TIMEOUT);
      
      const response = await fetch('https://overpass-api.de/api/interpreter', {
        method: 'POST',
        body: query,
        signal: controller.signal,
        headers: { 'Content-Type': 'text/plain' }
      });
      
      clearTimeout(timeoutId);
      
      if (!response.ok) {
        if (response.status === 504 || response.status === 429) {
          // Gateway timeout –∏–ª–∏ rate limit - –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
          throw new Error(`–°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω (${response.status}), –ø–æ–ø—ã—Ç–∫–∞ ${attempt}`);
        } else {
          throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö (${response.status})`);
        }
      }
      
      const data = await response.json();
      
      // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
      const result = {
        paths: [],
        barriers: [],
        closed_areas: [],
        water_areas: []
      };
      
      let pathCount = 0;
      let barrierCount = 0;
      let closedAreaCount = 0;
      
      // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
      console.log('üîç –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è API –¥–∞–Ω–Ω—ã—Ö:');
      console.log(`   –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${data.elements.length}`);
      
      for (const element of data.elements) {
        if (element.type === 'way' && element.geometry) {
          const geometry = element.geometry.map(coord => [coord.lat, coord.lon]);
          
          if (geometry.length >= 2) {
            const tags = element.tags || {};
            const highway = tags.highway || '';
            const barrier = tags.barrier || '';
            const natural = tags.natural || '';
            const military = tags.military || '';
            const access = tags.access || '';
            
            // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ —Ç–µ–≥–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if (military || access === 'no' || access === 'private' || access === 'restricted') {
              console.log(`üîç –ù–∞–π–¥–µ–Ω–∞ –∑–∞–ø—Ä–µ—Ç–Ω–∞—è –∑–æ–Ω–∞:`, {
                id: element.id,
                tags: tags,
                military: military,
                access: access,
                name: tags.name || '–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
                geometry_points: geometry.length
              });
            }
            
            if (highway) {
              result.paths.push({
                geometry: geometry,
                highway: highway,
                name: tags.name || '',
                surface: tags.surface || '',
                access: access,
                osmid: String(element.id),
                length: 0
              });
              pathCount++;
            } else if (barrier || natural === 'cliff') {
              result.barriers.push({
                geometry: geometry,
                type: 'barrier',
                barrier_type: barrier,
                natural: natural,
                osmid: String(element.id)
              });
              barrierCount++;
            } else if (military || access === 'no' || access === 'private' || access === 'restricted') {
              result.closed_areas.push({
                geometry: geometry,
                type: 'closed_area',
                military: military,
                access: access,
                name: tags.name || '',
                osmid: String(element.id)
              });
              closedAreaCount++;
            }
          }
        }
      }
      
      console.log(`üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ API –¥–∞–Ω–Ω—ã—Ö:`);
      console.log(`   –¢—Ä–æ–ø—ã: ${pathCount}`);
      console.log(`   –ë–∞—Ä—å–µ—Ä—ã: ${barrierCount}`);
      console.log(`   –ó–∞–ø—Ä–µ—Ç–Ω—ã–µ –∑–æ–Ω—ã: ${closedAreaCount}`);
      
      statusCallback(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${pathCount} –¥–æ—Ä–æ–≥, ${barrierCount} –±–∞—Ä—å–µ—Ä–æ–≤, ${closedAreaCount} –∑–∞–∫—Ä—ã—Ç—ã—Ö –∑–æ–Ω`);
      
      // –ö—ç—à–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
      if (!window.mapDataCache) window.mapDataCache = {};
      window.mapDataCache[`all_data_${bbox}`] = result;
      
      return result;
      
    } catch (error) {
      lastError = error;
      console.log(`‚ùå –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –Ω–µ—É–¥–∞—á–Ω–∞:`, error.message);
      
      // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
      if (attempt === RETRY_CONFIG.MAX_ATTEMPTS) {
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ ${RETRY_CONFIG.MAX_ATTEMPTS} –ø–æ–ø—ã—Ç–æ–∫. –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: ${error.message}`);
      }
      
      // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
      const delayTime = RETRY_CONFIG.DELAY_BETWEEN_ATTEMPTS * Math.pow(RETRY_CONFIG.BACKOFF_MULTIPLIER, attempt - 1);
      statusCallback(`‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ ${Math.round(delayTime/1000)}—Å...`);
      await delay(delayTime);
    }
  }
}

/**
 * –û—á–∏—â–∞–µ—Ç –∫—ç—à –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç—ã
 */
export function clearMapDataCache() {
  if (window.mapDataCache) {
    window.mapDataCache = {};
  }
}
