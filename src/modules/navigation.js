/**
 * –ú–æ–¥—É–ª—å –≤–∏–±—Ä–æ-–Ω–∞–≤–∏–≥–∞—Ü–∏–∏ "–ì–æ—Ä—è—á–æ-–•–æ–ª–æ–¥–Ω–æ"
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∫ —Ü–µ–ª–µ–≤—ã–º —Ç–æ—á–∫–∞–º —á–µ—Ä–µ–∑ –≤–∏–±—Ä–∞—Ü–∏—é
 */

import { haversine } from './utils.js';
import { pointMarkers, getStartPoint } from './mapModule.js';

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
let isNavigating = false;
let currentTarget = null;
let lastDistance = null;
let navigationInterval = null;
let userPosition = null;
let watchId = null;

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const targetPointSelect = document.getElementById('targetPointSelect');
const vibroNavBtn = document.getElementById('vibroNavBtn');
const stopNavBtn = document.getElementById('stopNavBtn');
const navStatus = document.getElementById('navStatus');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
export function initNavigation() {
  vibroNavBtn.addEventListener('click', startNavigation);
  stopNavBtn.addEventListener('click', stopNavigation);
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ—á–µ–∫ –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
export function updateTargetPointsList() {
  targetPointSelect.innerHTML = '';
  
  if (pointMarkers.length === 0) {
    targetPointSelect.innerHTML = '<option value="">–°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —Ç–æ—á–∫–∏</option>';
    targetPointSelect.disabled = true;
    vibroNavBtn.disabled = true;
    return;
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Ç–æ—á–∫—É
  const startPoint = getStartPoint();
  if (startPoint) {
    const option = document.createElement('option');
    option.value = 'start';
    option.textContent = '–°–¢–ê–†–¢';
    targetPointSelect.appendChild(option);
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ—á–∫–∏
  pointMarkers.forEach((marker, i) => {
    const option = document.createElement('option');
    option.value = i;
    option.textContent = `–¢–æ—á–∫–∞ ${i + 1}`;
    targetPointSelect.appendChild(option);
  });
  
  targetPointSelect.disabled = false;
  vibroNavBtn.disabled = false;
}

// –§—É–Ω–∫—Ü–∏—è –≤–∏–±—Ä–∞—Ü–∏–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏
function vibratePattern(pattern) {
  if ('vibrate' in navigator) {
    navigator.vibrate(pattern);
  } else {
    console.log('–í–∏–±—Ä–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è:', pattern);
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ü–µ–ª–µ–≤–æ–π —Ç–æ—á–∫–∏
function getTargetCoords() {
  const selectedValue = targetPointSelect.value;
  const startPoint = getStartPoint();
  if (selectedValue === 'start' && startPoint) {
    return { lat: startPoint.lat, lng: startPoint.lng };
  } else if (selectedValue !== '' && pointMarkers[selectedValue]) {
    const marker = pointMarkers[selectedValue];
    return marker.getLatLng();
  }
  return null;
}

// –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
function navigationStep() {
  if (!isNavigating || !userPosition || !currentTarget) return;
  
  const distance = haversine(userPosition.lat, userPosition.lng, currentTarget.lat, currentTarget.lng);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
  navStatus.textContent = `üìç ${distance.toFixed(0)}–º`;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–∏
  if (distance < 5) {
    vibratePattern([200, 100, 200, 100, 200]); // –°–∏–≥–Ω–∞–ª "—Ü–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞"
    navStatus.textContent = 'üéØ –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!';
    navStatus.style.color = 'green';
    setTimeout(() => {
      navStatus.style.color = 'black';
    }, 3000);
    return;
  }
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –≤–∏–±—Ä–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
  let vibrateDelay, pattern;
  
  if (distance < 20) {
    // –û—á–µ–Ω—å –±–ª–∏–∑–∫–æ - –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–∞—è –≤–∏–±—Ä–∞—Ü–∏—è
    pattern = [100];
    vibrateDelay = 500;
  } else if (distance < 50) {
    // –û—á–µ–Ω—å –≥–æ—Ä—è—á–æ
    pattern = [50];
    vibrateDelay = 1000;
  } else if (distance < 100) {
    // –ì–æ—Ä—è—á–æ
    pattern = [80];
    vibrateDelay = 2000;
  } else if (distance < 200) {
    // –¢–µ–ø–ª–æ
    pattern = [100];
    vibrateDelay = 3000;
  } else if (distance < 500) {
    // –ü—Ä–æ—Ö–ª–∞–¥–Ω–æ
    pattern = [150];
    vibrateDelay = 5000;
  } else {
    // –•–æ–ª–æ–¥–Ω–æ
    pattern = [200];
    vibrateDelay = 10000;
  }
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞: –µ—Å–ª–∏ –æ—Ç–¥–∞–ª—è–µ–º—Å—è, –¥–µ–ª–∞–µ–º –≤–∏–±—Ä–∞—Ü–∏—é –¥–ª–∏–Ω–Ω–µ–µ –∏ —Ä–µ–∂–µ
  if (lastDistance !== null && distance > lastDistance + 2) {
    pattern = [300]; // –î–ª–∏–Ω–Ω–∞—è –≤–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –æ—Ç–¥–∞–ª–µ–Ω–∏–∏
    vibrateDelay = Math.min(vibrateDelay * 1.5, 15000);
  }
  
  vibratePattern(pattern);
  lastDistance = distance;
  
  // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
  clearTimeout(navigationInterval);
  navigationInterval = setTimeout(navigationStep, vibrateDelay);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function onPositionUpdate(position) {
  userPosition = {
    lat: position.coords.latitude,
    lng: position.coords.longitude
  };
  
  if (isNavigating) {
    navigationStep();
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
function onPositionError(error) {
  navStatus.textContent = `‚ùå –û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: ${error.message}`;
  navStatus.style.color = 'red';
}

// –ù–∞—á–∞–ª–æ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
function startNavigation() {
  const target = getTargetCoords();
  if (!target) {
    alert('–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é —Ç–æ—á–∫—É!');
    return;
  }
  
  currentTarget = target;
  isNavigating = true;
  lastDistance = null;
  
  // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
  if ('geolocation' in navigator) {
    watchId = navigator.geolocation.watchPosition(
      onPositionUpdate, 
      onPositionError,
      {
        enableHighAccuracy: true,
        timeout: 5000,
        maximumAge: 1000
      }
    );
    
    navStatus.textContent = 'üîç –ü–æ–∏—Å–∫ GPS...';
    navStatus.style.color = 'blue';
    
    vibroNavBtn.style.display = 'none';
    stopNavBtn.style.display = 'inline-block';
    
    // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–∞—è –≤–∏–±—Ä–∞—Ü–∏—è
    vibratePattern([100, 100, 100]);
  } else {
    alert('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤–∞—à–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º!');
  }
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
function stopNavigation() {
  isNavigating = false;
  
  if (watchId !== null) {
    navigator.geolocation.clearWatch(watchId);
    watchId = null;
  }
  
  if (navigationInterval) {
    clearTimeout(navigationInterval);
    navigationInterval = null;
  }
  
  navStatus.textContent = '';
  vibroNavBtn.style.display = 'inline-block';
  stopNavBtn.style.display = 'none';
  
  // –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–∏–±—Ä–∞—Ü–∏—è
  vibratePattern([200]);
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
export { isNavigating, currentTarget, userPosition }; 