/**
 * –ú–æ–¥—É–ª—å –∑–≤—É–∫–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å –ø—Ä–æ—Å—Ç–æ–π –ª–æ–≥–∏–∫–æ–π –º–∞–∂–æ—Ä/–º–∏–Ω–æ—Ä
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–∫–∫–æ—Ä–¥—ã: –º–∞–∂–æ—Ä–Ω—ã–π –¥–ª—è –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è, –º–∏–Ω–æ—Ä–Ω—ã–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
 */

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
let isAudioEnabled = true;
let audioContext = null;
let lastDistance = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
function initAudioContext() {
  if (!audioContext) {
    try {
      audioContext = new (window.AudioContext || window.webkitAudioContext)();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:', error);
      isAudioEnabled = false;
    }
  }
  return audioContext;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —á–∞—Å—Ç–æ—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
function getBaseFrequency(distance) {
    const minDistance = 10;
    const maxDistance = 200;
    const minFreq = 200; // –ù–∏–∑–∫–∏–π —Ç–æ–Ω –¥–ª—è –¥–∞–ª–µ–∫–æ
    const maxFreq = 800; // –í—ã—Å–æ–∫–∏–π —Ç–æ–Ω –¥–ª—è –±–ª–∏–∑–∫–æ

    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç 0 –¥–æ 1
    const normalizedDistance = 1 - Math.min(1, Math.max(0, (distance - minDistance) / (maxDistance - minDistance)));

    // –í—ã—á–∏—Å–ª—è–µ–º –±–∞–∑–æ–≤—É—é —á–∞—Å—Ç–æ—Ç—É
    return minFreq + (maxFreq - minFreq) * normalizedDistance;
}

// –°–æ–∑–¥–∞–Ω–∏–µ –º–∞–∂–æ—Ä–Ω–æ–≥–æ –∞–∫–∫–æ—Ä–¥–∞
function createMajorChord(baseFrequency, volume = 0.8) {
    const ctx = initAudioContext();
    if (!ctx || !isAudioEnabled) return;
    
    const frequencies = [
        baseFrequency,                    // –ü—Ä–∏–º–∞
        baseFrequency * Math.pow(2, 4/12), // –ë–æ–ª—å—à–∞—è —Ç–µ—Ä—Ü–∏—è
        baseFrequency * Math.pow(2, 7/12)  // –ß–∏—Å—Ç–∞—è –∫–≤–∏–Ω—Ç–∞
    ];
    
    frequencies.forEach(freq => {
        const oscillator = ctx.createOscillator();
        const gainNode = ctx.createGain();
        
        oscillator.connect(gainNode);
        gainNode.connect(ctx.destination);
        
        oscillator.frequency.setValueAtTime(freq, ctx.currentTime);
        oscillator.type = 'sine';
        
        gainNode.gain.setValueAtTime(0, ctx.currentTime);
        gainNode.gain.linearRampToValueAtTime(volume, ctx.currentTime + 0.1);
        gainNode.gain.exponentialRampToValueAtTime(0.001, ctx.currentTime + 0.5);
        
        oscillator.start(ctx.currentTime);
        oscillator.stop(ctx.currentTime + 0.5);
    });
}

// –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–Ω–æ—Ä–Ω–æ–≥–æ –∞–∫–∫–æ—Ä–¥–∞
function createMinorChord(baseFrequency, volume = 0.8) {
    const ctx = initAudioContext();
    if (!ctx || !isAudioEnabled) return;
    
    const frequencies = [
        baseFrequency,                    // –ü—Ä–∏–º–∞
        baseFrequency * Math.pow(2, 3/12), // –ú–∞–ª–∞—è —Ç–µ—Ä—Ü–∏—è
        baseFrequency * Math.pow(2, 7/12)  // –ß–∏—Å—Ç–∞—è –∫–≤–∏–Ω—Ç–∞
    ];
    
    frequencies.forEach(freq => {
        const oscillator = ctx.createOscillator();
        const gainNode = ctx.createGain();
        
        oscillator.connect(gainNode);
        gainNode.connect(ctx.destination);
        
        oscillator.frequency.setValueAtTime(freq, ctx.currentTime);
        oscillator.type = 'sine';
        
        gainNode.gain.setValueAtTime(0, ctx.currentTime);
        gainNode.gain.linearRampToValueAtTime(volume, ctx.currentTime + 0.1);
        gainNode.gain.exponentialRampToValueAtTime(0.001, ctx.currentTime + 0.5);
        
        oscillator.start(ctx.currentTime);
        oscillator.stop(ctx.currentTime + 0.5);
    });
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∑–≤—É–∫–∞ –ø–æ–±–µ–¥—ã - –ù–ê–°–¢–û–Ø–©–ò–ï –§–ê–ù–§–ê–†–´!
function createVictorySound() {
    const ctx = initAudioContext();
    
    // –ü–æ–±–µ–¥–Ω–∞—è –º–µ–ª–æ–¥–∏—è - –≤–æ—Å—Ö–æ–¥—è—â–∞—è –≥–∞–º–º–∞ —Å —Ç—Ä–∏—É–º—Ñ–æ–º
    const victoryMelody = [
        { freq: 261.63, duration: 0.2 },  // –î–æ (C4)
        { freq: 293.66, duration: 0.2 },  // –†–µ (D4)
        { freq: 329.63, duration: 0.2 },  // –ú–∏ (E4)
        { freq: 349.23, duration: 0.2 },  // –§–∞ (F4)
        { freq: 392.00, duration: 0.2 },  // –°–æ–ª—å (G4)
        { freq: 440.00, duration: 0.2 },  // –õ—è (A4)
        { freq: 493.88, duration: 0.2 },  // –°–∏ (B4)
        { freq: 523.25, duration: 0.4 }   // –î–æ –æ–∫—Ç–∞–≤–æ–π (C5) - –¥–æ–ª—å—à–µ!
    ];
    
    // –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –º–µ–ª–æ–¥–∏—é –¢–†–ò –†–ê–ó–ê —Å –Ω–∞—Ä–∞—Å—Ç–∞—é—â–µ–π –≥—Ä–æ–º–∫–æ—Å—Ç—å—é
    for (let repeat = 0; repeat < 3; repeat++) {
        const startTime = ctx.currentTime + repeat * 2.0; // 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –ø–æ–≤—Ç–æ—Ä–∞–º–∏
        let currentTime = startTime;
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å —Å –∫–∞–∂–¥—ã–º –ø–æ–≤—Ç–æ—Ä–æ–º
        const volume = 0.3 + (repeat * 0.1); // 0.3, 0.4, 0.5
        
        victoryMelody.forEach((note, index) => {
            const oscillator = ctx.createOscillator();
            const gainNode = ctx.createGain();
            
            oscillator.connect(gainNode);
            gainNode.connect(ctx.destination);
            
            oscillator.frequency.setValueAtTime(note.freq, currentTime);
            oscillator.type = 'sine';
            
            // –ì—Ä–æ–º–∫–æ–µ –Ω–∞—Ä–∞—Å—Ç–∞–Ω–∏–µ –∏ –∑–∞—Ç—É—Ö–∞–Ω–∏–µ
            gainNode.gain.setValueAtTime(0, currentTime);
            gainNode.gain.linearRampToValueAtTime(volume, currentTime + 0.05);
            gainNode.gain.linearRampToValueAtTime(volume, currentTime + note.duration - 0.05);
            gainNode.gain.linearRampToValueAtTime(0, currentTime + note.duration);
            
            oscillator.start(currentTime);
            oscillator.stop(currentTime + note.duration);
            
            currentTime += note.duration;
        });
    }
    
    // –§–ò–ù–ê–õ–¨–ù–´–ô –¢–†–ò–£–ú–§–ê–õ–¨–ù–´–ô –ê–ö–ö–û–†–î - –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ì–†–û–ú–ö–ò–ô!
    setTimeout(() => {
        const finalFrequencies = [
            261.63,  // –î–æ (C4)
            329.63,  // –ú–∏ (E4)
            392.00,  // –°–æ–ª—å (G4)
            523.25,  // –î–æ –æ–∫—Ç–∞–≤–æ–π (C5)
            659.25,  // –ú–∏ –æ–∫—Ç–∞–≤–æ–π (E5)
            783.99   // –°–æ–ª—å –æ–∫—Ç–∞–≤–æ–π (G5)
        ];
        const finalTime = ctx.currentTime;
        
        finalFrequencies.forEach(freq => {
            const oscillator = ctx.createOscillator();
            const gainNode = ctx.createGain();
            
            oscillator.connect(gainNode);
            gainNode.connect(ctx.destination);
            
            oscillator.frequency.setValueAtTime(freq, finalTime);
            oscillator.type = 'sine';
            
            // –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ê–Ø –ì–†–û–ú–ö–û–°–¢–¨!
            gainNode.gain.setValueAtTime(0, finalTime);
            gainNode.gain.linearRampToValueAtTime(0.4, finalTime + 0.1);
            gainNode.gain.linearRampToValueAtTime(0.4, finalTime + 1.5);
            gainNode.gain.linearRampToValueAtTime(0, finalTime + 2.0);
            
            oscillator.start(finalTime);
            oscillator.stop(finalTime + 2.0);
        });
    }, 6000); // –ü–æ—Å–ª–µ –≤—Å–µ—Ö —Ç—Ä–µ—Ö –º–µ–ª–æ–¥–∏–π
    
    console.log('üèÜüé∫üéâ –¢–†–ò–£–ú–§–ê–õ–¨–ù–´–ï –§–ê–ù–§–ê–†–´! –ü–û–ë–ï–î–ê! üéâüé∫üèÜ');
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ - –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç –∑–≤—É–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –∏ —Å–∫–æ—Ä–æ—Å—Ç–∏
export function playNavigationSound(distance, speed) {
    if (!isAudioEnabled) return;
    
    const baseFreq = getBaseFrequency(distance);
    let isApproaching = false;
    
    if (speed > 0.1) {
        isApproaching = true;
    } else if (speed < -0.1) {
        isApproaching = false;
    } else {
        isApproaching = (distance < 100); // –î–ª—è –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–≥–æ —Å—á–∏—Ç–∞–µ–º –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ–º –µ—Å–ª–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ < 100
    }
    
    if (isApproaching) {
        createMajorChord(baseFreq, 1.0);
        console.log(`üéµ –ú–∞–∂–æ—Ä–Ω—ã–π –∞–∫–∫–æ—Ä–¥: ${Math.round(baseFreq)}Hz, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${Math.round(distance)}–º, —Å–∫–æ—Ä–æ—Å—Ç—å: ${speed}`);
    } else {
        createMinorChord(baseFreq, 1.0);
        console.log(`üéµ –ú–∏–Ω–æ—Ä–Ω—ã–π –∞–∫–∫–æ—Ä–¥: ${Math.round(baseFreq)}Hz, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${Math.round(distance)}–º, —Å–∫–æ—Ä–æ—Å—Ç—å: ${speed}`);
    }
    
    lastDistance = distance;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞ –ø–æ–±–µ–¥—ã
export function playVictorySound() {
    if (!isAudioEnabled) return;
    createVictorySound();
}

// –í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∑–≤—É–∫–∞
export function toggleAudio() {
    isAudioEnabled = !isAudioEnabled;
    console.log(`üîä –ó–≤—É–∫ ${isAudioEnabled ? '–≤–∫–ª—é—á–µ–Ω' : '–æ—Ç–∫–ª—é—á–µ–Ω'}`);
    return isAudioEnabled;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–≤—É–∫–∞
export function isAudioOn() {
    return isAudioEnabled;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –º–µ–∂–¥—É –∑–≤—É–∫–∞–º–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
export function getSoundInterval(distance) {
    const minDistance = 10;
    const maxDistance = 200;
    const minInterval = 0.5; // –ß–∞—â–µ –¥–ª—è –±–ª–∏–∑–∫–æ
    const maxInterval = 2; // –†–µ–∂–µ –¥–ª—è –¥–∞–ª–µ–∫–æ

    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç 0 –¥–æ 1
    const normalizedDistance = Math.min(1, Math.max(0, (distance - minDistance) / (maxDistance - minDistance)));

    // –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
    return minInterval + (maxInterval - minInterval) * normalizedDistance;
}
