/**
 * –ú–æ–¥—É–ª—å –∑–≤—É–∫–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –∑–≤—É–∫–∞–º–∏
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–æ–Ω–æ–≤ –¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏
 */

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
let isAudioEnabled = true;
let audioContext = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
function initAudioContext() {
  if (!audioContext) {
    try {
      audioContext = new (window.AudioContext || window.webkitAudioContext)();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:', error);
      isAudioEnabled = false;
    }
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∑–≤—É–∫–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –≥–∞—Ä–º–æ–Ω–∏–∫–∞–º–∏
function createRichTone(frequency, duration, volume = 0.3, waveType = 'sine') {
  if (!isAudioEnabled || !audioContext) return;
  
  const oscillator = audioContext.createOscillator();
  const gainNode = audioContext.createGain();
  const filterNode = audioContext.createBiquadFilter();
  
  oscillator.connect(filterNode);
  filterNode.connect(gainNode);
  gainNode.connect(audioContext.destination);
  
  oscillator.frequency.setValueAtTime(frequency, audioContext.currentTime);
  oscillator.type = waveType;
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –±–æ–ª–µ–µ –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –∑–≤—É–∫–∞
  filterNode.type = 'lowpass';
  filterNode.frequency.setValueAtTime(frequency * 3, audioContext.currentTime);
  filterNode.Q.setValueAtTime(0.5, audioContext.currentTime);
  
  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å —Å –ø–ª–∞–≤–Ω—ã–º –∑–∞—Ç—É—Ö–∞–Ω–∏–µ–º
  gainNode.gain.setValueAtTime(0, audioContext.currentTime);
  gainNode.gain.linearRampToValueAtTime(volume, audioContext.currentTime + 0.01);
  gainNode.gain.exponentialRampToValueAtTime(0.001, audioContext.currentTime + duration);
  
  oscillator.start(audioContext.currentTime);
  oscillator.stop(audioContext.currentTime + duration);
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–∫–æ–ª—å—á–∏–∫–æ–≤ (–≤—ã—Å–æ–∫–∏–µ –≥–∞—Ä–º–æ–Ω–∏–∫–∏) - –ø–æ–¥–Ω—è—Ç—ã–µ —á–∞—Å—Ç–æ—Ç—ã
function createBellSound(frequencies, durations) {
  initAudioContext();
  
  frequencies.forEach((freq, i) => {
    setTimeout(() => {
      // –û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–Ω - –ø–æ–¥–Ω–∏–º–∞–µ–º –≤—Å–µ —á–∞—Å—Ç–æ—Ç—ã –¥–ª—è –ª—É—á—à–µ–π —Å–ª—ã—à–∏–º–æ—Å—Ç–∏
      createRichTone(freq, durations[i], 0.5, 'sine');
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≥–∞—Ä–º–æ–Ω–∏–∫–∏ –¥–ª—è –±–æ–ª–µ–µ –±–æ–≥–∞—Ç–æ–≥–æ –∑–≤—É–∫–∞
      setTimeout(() => createRichTone(freq * 1.5, durations[i] * 0.5, 0.3, 'triangle'), 50);
      setTimeout(() => createRichTone(freq * 2, durations[i] * 0.3, 0.2, 'triangle'), 100);
    }, i * 120);
  });
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–∏—Å—Ç–∞ (–±—ã—Å—Ç—Ä—ã–µ –≤—ã—Å–æ–∫–∏–µ —Ç–æ–Ω—ã)
function createWhistleSound(frequencies, durations) {
  initAudioContext();
  
  frequencies.forEach((freq, i) => {
    setTimeout(() => {
      createRichTone(freq, durations[i], 0.5, 'triangle');
    }, i * 100);
  });
}

// –°–æ–∑–¥–∞–Ω–∏–µ –≥–æ–Ω–≥–∞ (–Ω–∏–∑–∫–∏–π —Ç–æ–Ω —Å –∑–∞—Ç—É—Ö–∞–Ω–∏–µ–º) - –ø–æ–¥–Ω—è—Ç—ã–µ —á–∞—Å—Ç–æ—Ç—ã
function createGongSound(frequency, duration) {
  initAudioContext();
  
  const oscillator = audioContext.createOscillator();
  const gainNode = audioContext.createGain();
  const filterNode = audioContext.createBiquadFilter();
  
  oscillator.connect(filterNode);
  filterNode.connect(gainNode);
  gainNode.connect(audioContext.destination);
  
  // –ü–æ–¥–Ω–∏–º–∞–µ–º –±–∞–∑–æ–≤—É—é —á–∞—Å—Ç–æ—Ç—É –≥–æ–Ω–≥–∞ –¥–ª—è –ª—É—á—à–µ–π —Å–ª—ã—à–∏–º–æ—Å—Ç–∏
  oscillator.frequency.setValueAtTime(frequency, audioContext.currentTime);
  oscillator.type = 'sine';
  
  // –§–∏–ª—å—Ç—Ä –¥–ª—è –≥–æ–Ω–≥–∞
  filterNode.type = 'lowpass';
  filterNode.frequency.setValueAtTime(frequency * 3, audioContext.currentTime);
  filterNode.Q.setValueAtTime(1.5, audioContext.currentTime);
  
  // –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –∑–∞—Ç—É—Ö–∞–Ω–∏–µ –¥–ª—è –≥–æ–Ω–≥–∞
  gainNode.gain.setValueAtTime(0, audioContext.currentTime);
  gainNode.gain.linearRampToValueAtTime(0.7, audioContext.currentTime + 0.1);
  gainNode.gain.exponentialRampToValueAtTime(0.001, audioContext.currentTime + duration);
  
  oscillator.start(audioContext.currentTime);
  oscillator.stop(audioContext.currentTime + duration);
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∏—É–º—Ñ–∞–ª—å–Ω–æ–≥–æ –∑–≤—É–∫–∞
function createTriumphSound() {
  initAudioContext();
  
  const frequencies = [523, 659, 784, 1047]; // –î–æ-–ú–∏-–°–æ–ª—å-–î–æ (–º–∞–∂–æ—Ä–Ω—ã–π –∞–∫–∫–æ—Ä–¥)
  const durations = [0.3, 0.3, 0.3, 0.5];
  
  frequencies.forEach((freq, i) => {
    setTimeout(() => {
      createRichTone(freq, durations[i], 0.6, 'triangle');
    }, i * 200);
  });
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∑–≤—É–∫–∞ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è (–≤–æ—Å—Ö–æ–¥—è—â–∏–π –∞–∫–∫–æ—Ä–¥)
function createApproachingSound() {
  initAudioContext();
  
  const frequencies = [261, 329, 392]; // –î–æ-–ú–∏-–°–æ–ª—å (–º–∞–∂–æ—Ä–Ω—ã–π –∞–∫–∫–æ—Ä–¥)
  const durations = [0.4, 0.4, 0.4];
  
  frequencies.forEach((freq, i) => {
    setTimeout(() => {
      createRichTone(freq, durations[i], 0.5, 'triangle');
    }, i * 150);
  });
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∑–≤—É–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è (–Ω–∏—Å—Ö–æ–¥—è—â–∏–π –∞–∫–∫–æ—Ä–¥)
function createMovingAwaySound() {
  initAudioContext();
  
  const frequencies = [392, 311, 261]; // –°–æ–ª—å-–ú–∏‚ô≠-–î–æ (–º–∏–Ω–æ—Ä–Ω—ã–π –∞–∫–∫–æ—Ä–¥)
  const durations = [0.5, 0.5, 0.5];
  
  frequencies.forEach((freq, i) => {
    setTimeout(() => {
      createRichTone(freq, durations[i], 0.3, 'sawtooth');
    }, i * 200);
  });
}

// –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–æ–≤–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ —Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Ç–æ–Ω–∞
export function playSoundPattern(pattern, direction = 'neutral', distance = null) {
  console.log('üîä playSoundPattern –≤—ã–∑–≤–∞–Ω–∞:', { pattern, direction, distance, isAudioEnabled });
  
  if (!isAudioEnabled) {
    console.log('–ó–≤—É–∫ –æ—Ç–∫–ª—é—á–µ–Ω');
    return;
  }
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–≤—É–∫–∞ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
  let soundType;
  if (pattern.length === 1) {
    const duration = pattern[0];
    if (duration <= 100) soundType = 'close';
    else if (duration <= 150) soundType = 'hot';
    else if (duration <= 200) soundType = 'warm';
    else soundType = 'cold';
  } else {
    soundType = 'target';
  }
  
  console.log(`üéµ –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫: ${soundType}, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${direction}, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${distance}–º`);
  
  // –û–¢–ù–û–°–ò–¢–ï–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê: —Ç–æ–Ω –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ —Ü–µ–ª–∏
  if (distance !== null) {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—É—é —á–∞—Å—Ç–æ—Ç—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
    let baseFrequency;
    if (distance < 20) {
      baseFrequency = 1200; // –û—á–µ–Ω—å –±–ª–∏–∑–∫–æ - –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π —Ç–æ–Ω
    } else if (distance < 50) {
      baseFrequency = 1000; // –ì–æ—Ä—è—á–æ - –≤—ã—Å–æ–∫–∏–π —Ç–æ–Ω
    } else if (distance < 100) {
      baseFrequency = 800;  // –¢–µ–ø–ª–æ - —Å—Ä–µ–¥–Ω–µ-–≤—ã—Å–æ–∫–∏–π
    } else if (distance < 200) {
      baseFrequency = 600;  // –ü—Ä–æ—Ö–ª–∞–¥–Ω–æ - —Å—Ä–µ–¥–Ω–∏–π
    } else if (distance < 500) {
      baseFrequency = 400;  // –•–æ–ª–æ–¥–Ω–æ - —Å—Ä–µ–¥–Ω–µ-–Ω–∏–∑–∫–∏–π
    } else {
      baseFrequency = 300;  // –û—á–µ–Ω—å —Ö–æ–ª–æ–¥–Ω–æ - –Ω–∏–∑–∫–∏–π, –Ω–æ —Å–ª—ã—à–∏–º—ã–π
    }
    
    // –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∑–≤—É–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if (direction === 'approaching') {
      // –ü—Ä–∏ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –¥–µ–ª–∞–µ–º –∑–≤—É–∫–∏ –≤—ã—à–µ –∏ —è—Ä—á–µ
      switch (soundType) {
        case 'close':
          createBellSound([baseFrequency, baseFrequency * 1.2, baseFrequency * 1.4], [0.1, 0.1, 0.1]);
          break;
        case 'hot':
          createWhistleSound([baseFrequency, baseFrequency * 1.3], [0.15, 0.15]);
          break;
        case 'warm':
          createRichTone(baseFrequency, 0.2, 0.5, 'triangle');
          setTimeout(() => createRichTone(baseFrequency * 1.2, 0.2, 0.5, 'triangle'), 150);
          break;
        case 'cold':
          createRichTone(baseFrequency, 0.3, 0.5, 'triangle');
          break;
        case 'target':
          createTriumphSound();
          break;
      }
    } else if (direction === 'moving_away') {
      // –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–µ–ª–∞–µ–º –∑–≤—É–∫–∏ –Ω–∏–∂–µ –∏ –≥–ª—É—à–µ
      switch (soundType) {
        case 'close':
          createBellSound([baseFrequency * 0.8, baseFrequency * 0.9, baseFrequency], [0.15, 0.15, 0.15]);
          break;
        case 'hot':
          createWhistleSound([baseFrequency * 0.7, baseFrequency * 0.8], [0.2, 0.2]);
          break;
        case 'warm':
          createRichTone(baseFrequency * 0.8, 0.25, 0.3, 'sawtooth');
          setTimeout(() => createRichTone(baseFrequency * 0.9, 0.25, 0.3, 'sawtooth'), 200);
          break;
        case 'cold':
          createGongSound(baseFrequency * 0.6, 0.8);
          break;
        case 'target':
          createTriumphSound();
          break;
      }
    } else {
      // –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
      switch (soundType) {
        case 'close':
          createBellSound([baseFrequency, baseFrequency * 1.1, baseFrequency * 1.2], [0.1, 0.1, 0.1]);
          break;
        case 'hot':
          createWhistleSound([baseFrequency, baseFrequency * 1.2], [0.15, 0.15]);
          break;
        case 'warm':
          createRichTone(baseFrequency, 0.2, 0.4, 'sine');
          setTimeout(() => createRichTone(baseFrequency * 1.1, 0.2, 0.4, 'sine'), 150);
          break;
        case 'cold':
          createGongSound(baseFrequency * 0.8, 0.6);
          break;
        case 'target':
          createTriumphSound();
          break;
      }
    }
  } else {
    // –ï—Å–ª–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —á–∞—Å—Ç–æ—Ç—ã
    console.log('‚ö†Ô∏è –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —á–∞—Å—Ç–æ—Ç—ã');
    // ... —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–µ–∑ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
  }
}

// –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–≤—É–∫–∏ –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
export function playDirectionSound(direction) {
  console.log('üéµ playDirectionSound –≤—ã–∑–≤–∞–Ω–∞:', direction);
  
  if (!isAudioEnabled) return;
  
  if (direction === 'approaching') {
    console.log('üéµ –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è');
    createApproachingSound();
  } else if (direction === 'moving_away') {
    console.log('üéµ –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ —É–¥–∞–ª–µ–Ω–∏—è');
    createMovingAwaySound();
  }
}

// –í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∑–≤—É–∫–∞
export function toggleAudio() {
  isAudioEnabled = !isAudioEnabled;
  return isAudioEnabled;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–≤—É–∫–∞
export function isAudioOn() {
  return isAudioEnabled;
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ (0.0 - 1.0)
export function setVolume(volume) {
  // –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–Ω–æ–≤ –≥—Ä–æ–º–∫–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
  console.log('üîä –ì—Ä–æ–º–∫–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞:', volume);
}
