/**
 * UI –º–æ–¥—É–ª—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–æ—á–µ–∫
 */

import { 
  generateOptimalSequence, 
  getCurrentSequence, 
  toggleDirection, 
  updateSequence,
  getRouteStats,
  getDirection 
} from './routeSequence.js';
import { pointMarkers } from './mapModule.js';

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
let sequenceSection;
let sequenceLink;
let routeStatsSpan;
let toggleDirectionBtn;
let sequenceModal;
let sequenceModalClose;
let sequenceEditor;
let sequenceInput;
let applySequenceBtn;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI
export function initSequenceUI() {
  // –ü–æ–ª—É—á–∞–µ–º DOM —ç–ª–µ–º–µ–Ω—Ç—ã
  sequenceSection = document.getElementById('sequenceSection');
  sequenceLink = document.getElementById('sequenceLink');
  routeStatsSpan = document.getElementById('routeStats');
  toggleDirectionBtn = document.getElementById('toggleDirectionBtn');
  sequenceModal = document.getElementById('sequenceModal');
  sequenceModalClose = document.getElementById('sequenceModalClose');
  sequenceEditor = document.getElementById('sequenceEditor');
  sequenceInput = document.getElementById('sequenceInput');
  applySequenceBtn = document.getElementById('applySequenceBtn');
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  if (!sequenceSection || !sequenceLink || !routeStatsSpan || !toggleDirectionBtn) {
    console.error('–ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ DOM —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');
    return false;
  }
  
  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
  setupEventHandlers();
  
  console.log('‚úÖ UI –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  return true;
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventHandlers() {
  // –ö–ª–∏–∫ –ø–æ —Å—Å—ã–ª–∫–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ - –æ—Ç–∫—Ä—ã—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä
  sequenceLink.addEventListener('click', (e) => {
    e.preventDefault();
    openSequenceEditor();
  });
  
  // –ö–Ω–æ–ø–∫–∞ —Å–º–µ–Ω—ã –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  toggleDirectionBtn.addEventListener('click', () => {
    const isClockwise = toggleDirection();
    updateSequenceDisplay();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const direction = isClockwise ? '–ø–æ —á–∞—Å–æ–≤–æ–π' : '–ø—Ä–æ—Ç–∏–≤ —á–∞—Å–æ–≤–æ–π';
    showNotification(`üîÑ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ: ${direction}`);
  });
  
  // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  sequenceModalClose.addEventListener('click', closeSequenceEditor);
  sequenceModal.addEventListener('click', (e) => {
    if (e.target === sequenceModal) closeSequenceEditor();
  });
  
  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  applySequenceBtn.addEventListener('click', applyNewSequence);
  
  // Enter –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
  sequenceInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
      applyNewSequence();
    }
  });
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
export function generateAndDisplaySequence() {
  if (!pointMarkers || pointMarkers.length === 0) {
    hideSequenceSection();
    return;
  }
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
  const sequence = generateOptimalSequence();
  
  if (sequence.length === 0) {
    hideSequenceSection();
    return;
  }
  
  // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
  updateSequenceDisplay();
  showSequenceSection();
  
  console.log('‚úÖ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞');
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
export function updateSequenceDisplay() {
  const sequence = getCurrentSequence();
  
  if (sequence.length === 0) {
    hideSequenceSection();
    return;
  }
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–Ω–æ–º–µ—Ä–∞ —Ç–æ—á–µ–∫, –Ω–∞—á–∏–Ω–∞—è —Å 1)
  const sequenceText = sequence.map(idx => idx + 1).join(' ‚Üí ');
  sequenceLink.textContent = `–°–¢–ê–†–¢ ‚Üí ${sequenceText} ‚Üí –°–¢–ê–†–¢`;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Ä—à—Ä—É—Ç–∞
  const stats = getRouteStats();
  if (stats) {
    const distanceKm = (stats.totalDistance / 1000).toFixed(2);
    routeStatsSpan.textContent = `${distanceKm} –∫–º, ${stats.direction}`;
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  const isClockwise = getDirection();
  toggleDirectionBtn.innerHTML = isClockwise ? 'üîÑ –ü—Ä–æ—Ç–∏–≤ —á–∞—Å–æ–≤–æ–π' : 'üîÑ –ü–æ —á–∞—Å–æ–≤–æ–π';
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–µ–∫—Ü–∏—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
function showSequenceSection() {
  if (sequenceSection) {
    sequenceSection.style.display = 'block';
  }
}

// –°–∫—Ä—ã—Ç—å —Å–µ–∫—Ü–∏—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
function hideSequenceSection() {
  if (sequenceSection) {
    sequenceSection.style.display = 'none';
  }
}

// –û—Ç–∫—Ä—ã—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
function openSequenceEditor() {
  const sequence = getCurrentSequence();
  
  if (sequence.length === 0) {
    showNotification('‚ùå –ù–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', 'error');
    return;
  }
  
  // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä
  renderSequenceEditor(sequence);
  
  // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
  sequenceInput.value = sequence.map(idx => idx + 1).join(', ');
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
  sequenceModal.style.display = 'flex';
}

// –ó–∞–∫—Ä—ã—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
function closeSequenceEditor() {
  sequenceModal.style.display = 'none';
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
function renderSequenceEditor(sequence) {
  sequenceEditor.innerHTML = '';
  
  sequence.forEach((pointIdx, seqIdx) => {
    const item = document.createElement('div');
    item.draggable = true;
    item.dataset.pointIdx = pointIdx;
    item.dataset.seqIdx = seqIdx;
    item.style.cssText = `
      display: flex;
      align-items: center;
      gap: 10px;
      padding: 10px;
      background: #f0f0f0;
      border-radius: 6px;
      cursor: move;
      user-select: none;
    `;
    
    item.innerHTML = `
      <span style="font-size: 20px;">‚ò∞</span>
      <span style="flex: 1; font-weight: 500;">–¢–æ—á–∫–∞ ${pointIdx + 1}</span>
      <span style="color: #777; font-size: 12px;">–ü–æ–∑–∏—Ü–∏—è ${seqIdx + 1}</span>
    `;
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ drag & drop
    item.addEventListener('dragstart', handleDragStart);
    item.addEventListener('dragover', handleDragOver);
    item.addEventListener('drop', handleDrop);
    item.addEventListener('dragend', handleDragEnd);
    
    sequenceEditor.appendChild(item);
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ drag & drop
let draggedElement = null;

function handleDragStart(e) {
  draggedElement = e.currentTarget;
  e.currentTarget.style.opacity = '0.5';
}

function handleDragOver(e) {
  e.preventDefault();
  e.dataTransfer.dropEffect = 'move';
  
  const afterElement = getDragAfterElement(sequenceEditor, e.clientY);
  if (afterElement == null) {
    sequenceEditor.appendChild(draggedElement);
  } else {
    sequenceEditor.insertBefore(draggedElement, afterElement);
  }
}

function handleDrop(e) {
  e.preventDefault();
}

function handleDragEnd(e) {
  e.currentTarget.style.opacity = '1';
  draggedElement = null;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
  updateSequenceFromEditor();
}

function getDragAfterElement(container, y) {
  const draggableElements = [...container.querySelectorAll('[draggable="true"]:not(.dragging)')];
  
  return draggableElements.reduce((closest, child) => {
    const box = child.getBoundingClientRect();
    const offset = y - box.top - box.height / 2;
    
    if (offset < 0 && offset > closest.offset) {
      return { offset: offset, element: child };
    } else {
      return closest;
    }
  }, { offset: Number.NEGATIVE_INFINITY }).element;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–∑ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
function updateSequenceFromEditor() {
  const items = sequenceEditor.querySelectorAll('[draggable="true"]');
  const newSequence = Array.from(items).map(item => parseInt(item.dataset.pointIdx));
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
  sequenceInput.value = newSequence.map(idx => idx + 1).join(', ');
}

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
function applyNewSequence() {
  const inputValue = sequenceInput.value.trim();
  
  if (!inputValue) {
    showNotification('‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å', 'error');
    return;
  }
  
  try {
    // –ü–∞—Ä—Å–∏–º –≤–≤–µ–¥–µ–Ω–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    const numbers = inputValue.split(',').map(s => {
      const num = parseInt(s.trim());
      if (isNaN(num) || num < 1 || num > pointMarkers.length) {
        throw new Error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–æ—á–∫–∏: ${s.trim()}`);
      }
      return num - 1; // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –∏–Ω–¥–µ–∫—Å (–Ω–∞—á–∏–Ω–∞—è —Å 0)
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ç–æ—á–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã
    const uniqueNumbers = new Set(numbers);
    if (uniqueNumbers.size !== numbers.length) {
      throw new Error('–ï—Å—Ç—å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Ç–æ—á–∫–∏');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ç–æ—á–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
    if (uniqueNumbers.size !== pointMarkers.length) {
      throw new Error('–ù–µ –≤—Å–µ —Ç–æ—á–∫–∏ —É–∫–∞–∑–∞–Ω—ã –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');
    }
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    if (updateSequence(numbers)) {
      updateSequenceDisplay();
      closeSequenceEditor();
      showNotification('‚úÖ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞', 'success');
    } else {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å');
    }
  } catch (error) {
    showNotification(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`, 'error');
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
function showNotification(message, type = 'info') {
  const status = document.getElementById('status');
  if (status) {
    status.textContent = message;
    status.className = type === 'error' ? 'error' : type === 'success' ? 'success' : '';
    
    setTimeout(() => {
      status.textContent = '';
      status.className = '';
    }, 3000);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
export { updateSequenceDisplay as refreshSequenceDisplay };

