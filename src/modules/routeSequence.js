/**
 * –ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –≤–∑—è—Ç–∏—è —Ç–æ—á–µ–∫
 * –†–µ–∞–ª–∏–∑—É–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–æ–º —Ç–æ—á–µ–∫
 */

import { haversine } from './utils.js';
import { pointMarkers, getStartPoint } from './mapModule.js';
import { dijkstra, findNearestNodeIdx } from './algorithms.js';

// –¢–µ–∫—É—â–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–æ—á–µ–∫ (–º–∞—Å—Å–∏–≤ –∏–Ω–¥–µ–∫—Å–æ–≤)
let currentSequence = [];
let isClockwise = true; // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞

// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≥—Ä–∞—Ñ–∞ —Ç—Ä–æ–ø
let trailGraph = null;

/**
 * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥—Ä–∞—Ñ–∞ —Ç—Ä–æ–ø –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
 * @param {Object} graph - –ì—Ä–∞—Ñ —Ç—Ä–æ–ø {nodes, adj}
 */
export function setTrailGraph(graph) {
  trailGraph = graph;
  console.log(`üìä –ì—Ä–∞—Ñ —Ç—Ä–æ–ø —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞: ${graph?.nodes?.length || 0} —É–∑–ª–æ–≤`);
}

/**
 * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ —Å —É—á–µ—Ç–æ–º –≥—Ä–∞—Ñ–∞ —Ç—Ä–æ–ø
 * @param {Object} from - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏ {lat, lng}
 * @param {Object} to - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–æ–Ω–µ—á–Ω–æ–π —Ç–æ—á–∫–∏ {lat, lng}
 * @returns {number} - –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø–æ —Ç—Ä–æ–ø–∞–º (–∏–ª–∏ –ø–æ –ø—Ä—è–º–æ–π, –µ—Å–ª–∏ –≥—Ä–∞—Ñ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
 */
function calculatePathDistance(from, to) {
  // –ï—Å–ª–∏ –≥—Ä–∞—Ñ–∞ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
  if (!trailGraph || !trailGraph.nodes || trailGraph.nodes.length === 0) {
    return haversine(from.lat, from.lng, to.lat, to.lng);
  }
  
  // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–µ —É–∑–ª—ã –≥—Ä–∞—Ñ–∞ –∫ –æ–±–µ–∏–º —Ç–æ—á–∫–∞–º
  const fromNodeIdx = findNearestNodeIdx(from.lat, from.lng, trailGraph.nodes);
  const toNodeIdx = findNearestNodeIdx(to.lat, to.lng, trailGraph.nodes);
  
  if (fromNodeIdx === -1 || toNodeIdx === -1) {
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —É–∑–ª—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
    return haversine(from.lat, from.lng, to.lat, to.lng);
  }
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º –î–µ–π–∫—Å—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫—Ä–∞—Ç—á–∞–π—à–µ–≥–æ –ø—É—Ç–∏ –ø–æ –≥—Ä–∞—Ñ—É
  const result = dijkstra(trailGraph, fromNodeIdx, toNodeIdx);
  
  // –ï—Å–ª–∏ –ø—É—Ç—å –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø–æ –≥—Ä–∞—Ñ—É
  if (result.distance < Infinity) {
    return result.distance;
  }
  
  // –ï—Å–ª–∏ –ø—É—Ç–∏ –Ω–µ—Ç (—Ç–æ—á–∫–∏ –Ω–µ —Å–≤—è–∑–∞–Ω—ã), –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ * —à—Ç—Ä–∞—Ñ
  // –®—Ç—Ä–∞—Ñ –Ω—É–∂–µ–Ω, —á—Ç–æ–±—ã –∞–ª–≥–æ—Ä–∏—Ç–º –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–ª —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–æ—á–∫–∏
  return haversine(from.lat, from.lng, to.lat, to.lng) * 10;
}

/**
 * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–æ—á–µ–∫ —É–ª—É—á—à–µ–Ω–Ω—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º
 * @param {Array} points - –ú–∞—Å—Å–∏–≤ –º–∞—Ä–∫–µ—Ä–æ–≤ —Ç–æ—á–µ–∫
 * @param {Object} startPoint - –¢–æ—á–∫–∞ —Å—Ç–∞—Ä—Ç–∞ {lat, lng}
 * @param {boolean} clockwise - –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ö–æ–¥–∞
 * @returns {Array} - –ú–∞—Å—Å–∏–≤ –∏–Ω–¥–µ–∫—Å–æ–≤ –≤ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
 */
export function buildOptimalSequence(points, startPoint, clockwise = true) {
  if (!points || points.length === 0) {
    return [];
  }

  const numPoints = points.length;
  
  // –î–ª—è –º–∞–ª–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ—á–µ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º
  if (numPoints <= 3) {
    return buildSimpleSequence(points, startPoint, clockwise);
  }
  
  // –î–ª—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ—á–µ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º
  return buildAdvancedSequence(points, startPoint, clockwise);
}

/**
 * –ü—Ä–æ—Å—Ç–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –º–∞–ª–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ—á–µ–∫
 */
function buildSimpleSequence(points, startPoint, clockwise) {
  const sequence = [];
  const visited = new Array(points.length).fill(false);
  let currentPos = startPoint;
  
  for (let i = 0; i < points.length; i++) {
    let nearestIdx = -1;
    let minDist = Infinity;
    
    for (let j = 0; j < points.length; j++) {
      if (!visited[j]) {
        const coords = points[j].getLatLng();
        const dist = haversine(currentPos.lat, currentPos.lng, coords.lat, coords.lng);
        
        if (dist < minDist) {
          minDist = dist;
          nearestIdx = j;
        }
      }
    }
    
    if (nearestIdx !== -1) {
      visited[nearestIdx] = true;
      sequence.push(nearestIdx);
      currentPos = points[nearestIdx].getLatLng();
    }
  }
  
  return clockwise ? sequence : sequence.reverse();
}

/**
 * –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ—á–µ–∫
 */
function buildAdvancedSequence(points, startPoint, clockwise) {
  // –°–æ–∑–¥–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö —Ç–æ—á–µ–∫
  const distanceMatrix = createDistanceMatrix(points, startPoint);
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –∂–∞–¥–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Å —É—á–µ—Ç–æ–º –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å—Ç–∞—Ä—Ç—É
  const sequence = greedyWithReturnOptimization(distanceMatrix, points.length);
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
  return clockwise ? sequence : sequence.reverse();
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –º–µ–∂–¥—É –≤—Å–µ–º–∏ —Ç–æ—á–∫–∞–º–∏
 */
function createDistanceMatrix(points, startPoint) {
  const n = points.length;
  const matrix = Array(n + 1).fill().map(() => Array(n + 1).fill(0));
  
  // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –æ—Ç —Å—Ç–∞—Ä—Ç–∞ –∫ —Ç–æ—á–∫–∞–º
  for (let i = 0; i < n; i++) {
    const coords = points[i].getLatLng();
    matrix[0][i + 1] = calculatePathDistance(startPoint, coords);
    matrix[i + 1][0] = matrix[0][i + 1]; // –°–∏–º–º–µ—Ç—Ä–∏—á–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞
  }
  
  // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏
  for (let i = 0; i < n; i++) {
    for (let j = i + 1; j < n; j++) {
      const coords1 = points[i].getLatLng();
      const coords2 = points[j].getLatLng();
      const dist = calculatePathDistance(coords1, coords2);
      matrix[i + 1][j + 1] = dist;
      matrix[j + 1][i + 1] = dist; // –°–∏–º–º–µ—Ç—Ä–∏—á–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞
    }
  }
  
  return matrix;
}

/**
 * –£–ª—É—á—à–µ–Ω–Ω—ã–π –∂–∞–¥–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Å —É—á–µ—Ç–æ–º –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å—Ç–∞—Ä—Ç—É
 */
function greedyWithReturnOptimization(distanceMatrix, numPoints) {
  const sequence = [];
  const visited = new Array(numPoints).fill(false);
  let currentIdx = 0; // –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç —Å—Ç–∞—Ä—Ç–∞ (–∏–Ω–¥–µ–∫—Å 0 –≤ –º–∞—Ç—Ä–∏—Ü–µ)
  
  for (let i = 0; i < numPoints; i++) {
    let bestIdx = -1;
    let minCost = Infinity;
    
    // –ò—â–µ–º –ª—É—á—à—É—é —Å–ª–µ–¥—É—é—â—É—é —Ç–æ—á–∫—É
    for (let j = 1; j <= numPoints; j++) { // j=1..n (—Ç–æ—á–∫–∏, j=0 —ç—Ç–æ —Å—Ç–∞—Ä—Ç)
      if (!visited[j - 1]) {
        let cost = distanceMatrix[currentIdx][j];
        
        // –î–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç–æ—á–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å—Ç–∞—Ä—Ç—É
        if (i === numPoints - 1) {
          cost += distanceMatrix[j][0];
        }
        
        if (cost < minCost) {
          minCost = cost;
          bestIdx = j;
        }
      }
    }
    
    if (bestIdx !== -1) {
      sequence.push(bestIdx - 1); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ –∏–Ω–¥–µ–∫—Å —Ç–æ—á–∫–∏
      visited[bestIdx - 1] = true;
      currentIdx = bestIdx;
    }
  }
  
  return sequence;
}

/**
 * –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–µ—Ç–æ–¥–æ–º 2-opt —Å –ª—É—á—à–∏–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º
 * @param {Array} sequence - –ò—Å—Ö–æ–¥–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
 * @param {Array} points - –ú–∞—Å—Å–∏–≤ –º–∞—Ä–∫–µ—Ä–æ–≤ —Ç–æ—á–µ–∫
 * @param {Object} startPoint - –¢–æ—á–∫–∞ —Å—Ç–∞—Ä—Ç–∞
 * @returns {Array} - –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
 */
export function optimizeSequenceWith2Opt(sequence, points, startPoint) {
  if (sequence.length < 4) {
    return sequence; // –î–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞
  }
  
  let currentSequence = [...sequence];
  let bestSequence = [...sequence];
  let bestDistance = calculateTotalRouteDistance(sequence, points, startPoint);
  
  console.log(`üîß –ù–∞—á–∏–Ω–∞–µ–º 2-opt –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é. –ù–∞—á–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${(bestDistance / 1000).toFixed(2)} –∫–º`);
  
  // –£–ª—É—á—à–µ–Ω–Ω—ã–π 2-opt —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
  const maxIterations = Math.min(100, sequence.length * 3);
  let iteration = 0;
  let improved = true;
  
  while (improved && iteration < maxIterations) {
    improved = false;
    iteration++;
    
    // –ò—â–µ–º –ª—É—á—à–µ–µ —É–ª—É—á—à–µ–Ω–∏–µ –≤ —Ç–µ–∫—É—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
    let bestImprovement = 0;
    let bestI = -1, bestJ = -1;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏
    for (let i = 0; i < currentSequence.length - 1; i++) {
      for (let j = i + 2; j < currentSequence.length; j++) {
        const improvement = calculateSwapImprovement(currentSequence, i, j, points, startPoint);
        if (improvement > bestImprovement) {
          bestImprovement = improvement;
          bestI = i;
          bestJ = j;
        }
      }
    }
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –ª—É—á—à–µ–µ —É–ª—É—á—à–µ–Ω–∏–µ
    if (bestImprovement > 0) {
      const newSequence = [
        ...currentSequence.slice(0, bestI + 1),
        ...currentSequence.slice(bestI + 1, bestJ + 1).reverse(),
        ...currentSequence.slice(bestJ + 1)
      ];
      
      const newDistance = calculateTotalRouteDistance(newSequence, points, startPoint);
      
      if (newDistance < bestDistance) {
        currentSequence = newSequence;
        bestSequence = [...newSequence];
        bestDistance = newDistance;
        improved = true;
        
        console.log(`‚úÖ –ò—Ç–µ—Ä–∞—Ü–∏—è ${iteration}: —É–ª—É—á—à–µ–Ω–∏–µ –Ω–∞ ${(bestImprovement / 1000).toFixed(2)} –∫–º`);
      }
    }
  }
  
  const finalDistance = calculateTotalRouteDistance(bestSequence, points, startPoint);
  const totalImprovement = calculateTotalRouteDistance(sequence, points, startPoint) - finalDistance;
  
  console.log(`üîß 2-opt –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${iteration} –∏—Ç–µ—Ä–∞—Ü–∏–π`);
  console.log(`üìä –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${(finalDistance / 1000).toFixed(2)} –∫–º`);
  console.log(`üí° –û–±—â–µ–µ —É–ª—É—á—à–µ–Ω–∏–µ: ${(totalImprovement / 1000).toFixed(2)} –∫–º (${((totalImprovement / calculateTotalRouteDistance(sequence, points, startPoint)) * 100).toFixed(1)}%)`);
  
  return bestSequence;
}

/**
 * –†–∞—Å—á–µ—Ç –ø–æ–ª–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
 */
function calculateTotalRouteDistance(sequence, points, startPoint) {
  let totalDist = 0;
  let prevPos = startPoint;
  
  for (let idx of sequence) {
    const coords = points[idx].getLatLng();
    totalDist += calculatePathDistance(prevPos, coords);
    prevPos = coords;
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–≤—Ä–∞—Ç –∫ —Å—Ç–∞—Ä—Ç—É
  totalDist += calculatePathDistance(prevPos, startPoint);
  return totalDist;
}

/**
 * –†–∞—Å—á–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–∏ 2-opt –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–µ
 */
function calculateSwapImprovement(sequence, i, j, points, startPoint) {
  if (i >= j - 1) return 0;
  
  // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–µ–∫
  const prevI = i === 0 ? startPoint : points[sequence[i - 1]].getLatLng();
  const currI = points[sequence[i]].getLatLng();
  const currJ = points[sequence[j]].getLatLng();
  const nextJ = j === sequence.length - 1 ? startPoint : points[sequence[j + 1]].getLatLng();
  
  // –°—Ç–∞—Ä–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: prevI -> currI -> ... -> currJ -> nextJ
  const oldDist = calculatePathDistance(prevI, currI) + calculatePathDistance(currJ, nextJ);
  
  // –ù–æ–≤–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: prevI -> currJ -> ... -> currI -> nextJ
  const newDist = calculatePathDistance(prevI, currJ) + calculatePathDistance(currI, nextJ);
  
  return oldDist - newDist; // –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ = —É–ª—É—á—à–µ–Ω–∏–µ
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è —Ç–µ–∫—É—â–∏—Ö —Ç–æ—á–µ–∫
 */
export function generateOptimalSequence() {
  const startPoint = getStartPoint();
  
  if (!startPoint) {
    console.warn('–¢–æ—á–∫–∞ —Å—Ç–∞—Ä—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    return [];
  }
  
  if (!pointMarkers || pointMarkers.length === 0) {
    console.warn('–ù–µ—Ç —Ç–æ—á–µ–∫ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞');
    return [];
  }
  
  // –°—Ç—Ä–æ–∏–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
  const initialSequence = buildOptimalSequence(pointMarkers, startPoint, isClockwise);
  
  // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –º–µ—Ç–æ–¥–æ–º 2-opt
  currentSequence = optimizeSequenceWith2Opt(initialSequence, pointMarkers, startPoint);
  
  console.log(`‚úÖ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å (${isClockwise ? '–ø–æ —á–∞—Å–æ–≤–æ–π' : '–ø—Ä–æ—Ç–∏–≤ —á–∞—Å–æ–≤–æ–π'}):`, currentSequence.map(i => i + 1));
  
  return currentSequence;
}

/**
 * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞
 */
export function toggleDirection() {
  isClockwise = !isClockwise;
  
  if (currentSequence.length > 0) {
    currentSequence.reverse();
    console.log(`üîÑ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ ${isClockwise ? '–ø–æ —á–∞—Å–æ–≤–æ–π' : '–ø—Ä–æ—Ç–∏–≤ —á–∞—Å–æ–≤–æ–π'}`);
  }
  
  return isClockwise;
}

/**
 * –†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 * @param {Array} newSequence - –ù–æ–≤–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–Ω–¥–µ–∫—Å–æ–≤
 */
export function updateSequence(newSequence) {
  if (!Array.isArray(newSequence)) {
    console.error('–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º');
    return false;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  const numPoints = pointMarkers.length;
  const validSequence = newSequence.every(idx => idx >= 0 && idx < numPoints);
  
  if (!validSequence) {
    console.error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–æ—á–µ–∫');
    return false;
  }
  
  currentSequence = [...newSequence];
  console.log('‚úèÔ∏è –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é:', currentSequence.map(i => i + 1));
  
  return true;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */
export function getCurrentSequence() {
  return [...currentSequence];
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π —Ç–æ—á–∫–∏ –ø–æ—Å–ª–µ –∑–∞–¥–∞–Ω–Ω–æ–π
 * @param {number} currentPointIdx - –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–π —Ç–æ—á–∫–∏
 * @returns {number|null} - –ò–Ω–¥–µ–∫—Å —Å–ª–µ–¥—É—é—â–µ–π —Ç–æ—á–∫–∏ –∏–ª–∏ null
 */
export function getNextPoint(currentPointIdx) {
  if (currentSequence.length === 0) {
    return null;
  }
  
  // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —Ç–æ—á–∫–∞ - —Å—Ç–∞—Ä—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—É—é —Ç–æ—á–∫—É –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  if (currentPointIdx === -1 || currentPointIdx === null) {
    return currentSequence[0];
  }
  
  // –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é —Ç–µ–∫—É—â–µ–π —Ç–æ—á–∫–∏ –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  const positionInSequence = currentSequence.indexOf(currentPointIdx);
  
  if (positionInSequence === -1) {
    // –¢–æ—á–∫–∞ –Ω–µ –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—É—é
    return currentSequence[0];
  }
  
  // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Ç–æ—á–∫–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä—Ç (null –∏–ª–∏ -1)
  if (positionInSequence === currentSequence.length - 1) {
    return -1; // -1 –æ–∑–Ω–∞—á–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç –∫ —Å—Ç–∞—Ä—Ç—É
  }
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Ç–æ—á–∫—É –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  return currentSequence[positionInSequence + 1];
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∞—è —Ç–æ—á–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤ –º–∞—Ä—à—Ä—É—Ç–µ
 * @param {number} currentPointIdx - –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–π —Ç–æ—á–∫–∏
 * @returns {boolean}
 */
export function isLastPoint(currentPointIdx) {
  if (currentSequence.length === 0) {
    return false;
  }
  
  const positionInSequence = currentSequence.indexOf(currentPointIdx);
  return positionInSequence === currentSequence.length - 1;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞
 */
export function getDirection() {
  return isClockwise;
}

/**
 * –°–±—Ä–æ—Å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */
export function resetSequence() {
  currentSequence = [];
  isClockwise = true;
  console.log('üîÑ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–±—Ä–æ—à–µ–Ω–∞');
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞ —Å —É—á–µ—Ç–æ–º –≥—Ä–∞—Ñ–∞ —Ç—Ä–æ–ø
 */
export function getRouteStats() {
  if (currentSequence.length === 0) {
    return null;
  }
  
  const startPoint = getStartPoint();
  if (!startPoint) {
    return null;
  }
  
  let totalDistance = 0;
  let prevPos = startPoint;
  
  for (let idx of currentSequence) {
    const coords = pointMarkers[idx].getLatLng();
    totalDistance += calculatePathDistance(prevPos, coords);
    prevPos = coords;
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å—Ç–∞—Ä—Ç—É
  totalDistance += calculatePathDistance(prevPos, startPoint);
  
  return {
    totalPoints: currentSequence.length,
    totalDistance: totalDistance,
    direction: isClockwise ? '–ø–æ —á–∞—Å–æ–≤–æ–π' : '–ø—Ä–æ—Ç–∏–≤ —á–∞—Å–æ–≤–æ–π'
  };
}

