/**
 * –ú–æ–¥—É–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫ –Ω–∞ —Ç—Ä–æ–ø–∞—Ö
 * –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å —Å –ø—Ä–æ—Å—Ç–æ–π –∏ –Ω–∞–¥–µ–∂–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Ç–æ—á–µ–∫
 */

import { haversine, extractPolygons, pointInPolygon, getRandomPointOnLine, segmentIntersectsPolygon } from './utils.js';
import { fetchAllMapData, clearMapDataCache } from './optimizedOverpassAPI.js';
import { showClosedAreasOnMap, showWaterAreasOnMap, showBarriersOnMap, addPointMarker, addFailedAttemptMarker, clearPointMarkers, clearFailedAttemptMarkers, getStartPoint, clearGraphDebugLayers, updateStartPointPosition, pointMarkers, showGraphDebug } from './mapModule.js';
import { buildPathGraph, findNearestNodeIdx, isReachable } from './algorithms.js';
import { updateTargetPointsList } from './navigation.js';
import { setTrailGraph } from './routeSequence.js';

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–º–µ–Ω—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
let cancelGeneration = false;

// –ö–µ—à –¥–ª—è –∑–∞–ø—Ä–µ—Ç–Ω—ã—Ö –∑–æ–Ω (–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
let cachedForbiddenPolygons = null;
let cachedDataHash = null;

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –ø–ª–æ—â–∞–¥–∏ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–∞—Ö
function rectangleArea(bounds) {
  const latDiff = bounds.north - bounds.south;
  const lngDiff = bounds.east - bounds.west;
  
  // –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≥—Ä–∞–¥—É—Å–æ–≤ –≤ –º–µ—Ç—Ä—ã
  const latToMeters = 111000; // 1 –≥—Ä–∞–¥—É—Å —à–∏—Ä–æ—Ç—ã ‚âà 111 –∫–º
  const lngToMeters = 111000 * Math.cos((bounds.north + bounds.south) / 2 * Math.PI / 180);
  
  return latDiff * latToMeters * lngDiff * lngToMeters;
}

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –ø–ª–æ—â–∞–¥–∏ –ø–æ–ª–∏–≥–æ–Ω–∞ –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–∞—Ö (—Ñ–æ—Ä–º—É–ª–∞ —à–Ω—É—Ä–∞)
function calculatePolygonArea(polygon) {
  const latLngs = polygon.getLatLngs()[0];
  if (latLngs.length < 3) return 0;
  
  let area = 0;
  const n = latLngs.length;
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º—É–ª—É —à–Ω—É—Ä–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–ª–æ—â–∞–¥–∏ –Ω–∞ —Å—Ñ–µ—Ä–µ
  for (let i = 0; i < n; i++) {
    const j = (i + 1) % n;
    const lat1 = latLngs[i].lat * Math.PI / 180;
    const lng1 = latLngs[i].lng * Math.PI / 180;
    const lat2 = latLngs[j].lat * Math.PI / 180;
    const lng2 = latLngs[j].lng * Math.PI / 180;
    
    area += (lng2 - lng1) * (2 + Math.sin(lat1) + Math.sin(lat2));
  }
  
  // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –º–µ—Ç—Ä–∞—Ö
  const R = 6371000;
  area = Math.abs(area) * R * R / 2;
  
  return area;
}

/**
 * –†–∞—Å—á–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
 * @param {number} area - –ü–ª–æ—â–∞–¥—å –æ–±–ª–∞—Å—Ç–∏ –≤ –º¬≤
 * @param {number} count - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫
 * @param {number} difficultyLevel - –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (1-3)
 * @returns {number} - –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –º–µ—Ç—Ä–∞—Ö
 */
function calculateMinDistance(area, count, difficultyLevel) {
  const baseDistance = Math.sqrt(area / count);
  
  switch (parseInt(difficultyLevel)) {
    case 1: // üü¢ –ù–æ–≤–∏—á–æ–∫ - –ø–ª–æ—Ç–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ
      return baseDistance * 0.4; // –¢–æ—á–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –≤ 2.5 —Ä–∞–∑–∞ –±–ª–∏–∂–µ
    case 2: // üü° –õ—é–±–∏—Ç–µ–ª—å - —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ (—Ç–µ–∫—É—â–µ–µ)
      return baseDistance * 0.8;
    case 3: // üî¥ –≠–∫—Å–ø–µ—Ä—Ç - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞–∑–Ω–µ—Å–µ–Ω–∏–µ
      return baseDistance * 1.2; // –¢–æ—á–∫–∏ –¥–∞–ª—å—à–µ –¥—Ä—É–≥ –æ—Ç –¥—Ä—É–≥–∞
    default:
      return baseDistance * 0.8;
  }
}

/**
 * –†–∞—Å—á–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ø—ã—Ç–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
 * @param {number} count - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫
 * @param {number} difficultyLevel - –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (1-3)
 * @returns {number} - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
 */
function calculateMaxAttempts(count, difficultyLevel) {
  switch (parseInt(difficultyLevel)) {
    case 1: // üü¢ –ù–æ–≤–∏—á–æ–∫ - –±–æ–ª—å—à–µ –ø–æ–ø—ã—Ç–æ–∫, –ø—Ä–æ—â–µ –Ω–∞–π—Ç–∏ —Ç–æ—á–∫–∏
      return count * 20;
    case 2: // üü° –õ—é–±–∏—Ç–µ–ª—å - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
      return count * 15;
    case 3: // üî¥ –≠–∫—Å–ø–µ—Ä—Ç - –±–æ–ª—å—à–µ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è —Å—Ç—Ä–æ–≥–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
      return count * 30;
    default:
      return count * 15;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ—á–µ–∫
export async function generatePoints(selectedBounds, startPoint, count, difficultyLevel, statusCallback, buttonCallback, cancelCallback) {
  if (!selectedBounds) {
    statusCallback('–°–Ω–∞—á–∞–ª–∞ –≤—ã–¥–µ–ª–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ!');
    return;
  }
  if (!startPoint) {
    statusCallback('–°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ—á–∫—É —Å—Ç–∞—Ä—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç–µ!');
    return;
  }
  if (isNaN(count) || count < 1) {
    statusCallback('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫!');
    return;
  }

  buttonCallback(true); // –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
  cancelCallback(true); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
  cancelGeneration = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Ç–º–µ–Ω—ã

  statusCallback('–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö OSM...');

  const sw = { lat: selectedBounds.south, lng: selectedBounds.west };
  const ne = { lat: selectedBounds.north, lng: selectedBounds.east };

  // –í—ã—á–∏—Å–ª—è–µ–º –ø–ª–æ—â–∞–¥—å –æ–±–ª–∞—Å—Ç–∏ –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Å —É—á–µ—Ç–æ–º —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
  let area;
  if (selectedBounds.type === 'polygon' && selectedBounds.polygon) {
    // –î–ª—è –ø–æ–ª–∏–≥–æ–Ω–∞ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é –ø–ª–æ—â–∞–¥—å
    area = calculatePolygonArea(selectedBounds.polygon);
  } else {
    // –î–ª—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∞—Å—á–µ—Ç
    area = rectangleArea(selectedBounds);
  }
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å—á–µ—Ç–∞ —Å —É—á–µ—Ç–æ–º —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
  const minDist = calculateMinDistance(area, count, difficultyLevel);

  try {
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ç–æ—á–∫–∏ –∏ –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Å–ª–æ–∏
    clearPointMarkers();
    clearFailedAttemptMarkers();
    clearGraphDebugLayers();

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
    const bbox = `${selectedBounds.south},${selectedBounds.west},${selectedBounds.north},${selectedBounds.east}`;
    const mapData = await fetchAllMapData(bbox, statusCallback);
    
    const closedAreasData = mapData.closed_areas || [];
    const waterAreasData = mapData.water_areas || [];
    const barriersData = mapData.barriers || [];
    const pathsData = mapData.paths || [];

    if (cancelGeneration) return;

    statusCallback(`‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: ${pathsData.length} —Ç—Ä–æ–ø, ${closedAreasData.length} –∑–∞–∫—Ä—ã—Ç—ã—Ö –∑–æ–Ω, ${waterAreasData.length} –≤–æ–¥–æ—ë–º–æ–≤, ${barriersData.length} –±–∞—Ä—å–µ—Ä–æ–≤`);

    // DEBUG: –ù–µ —Ä–∏—Å—É–µ–º –∑–∞–∫—Ä—ã—Ç—ã–µ –∑–æ–Ω—ã, –≤–æ–¥–æ—ë–º—ã –∏ –±–∞—Ä—å–µ—Ä—ã –Ω–∞ –∫–∞—Ä—Ç–µ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    // showClosedAreasOnMap(closedAreasData);
    // showWaterAreasOnMap(waterAreasData);
    // showBarriersOnMap(barriersData);

    if (cancelGeneration) return;

    // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ —Ç—Ä–æ–ø
    statusCallback('–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∞ —Ç—Ä–æ–ø...');
    const graph = buildPathGraph(pathsData, [], barriersData);
    
    if (!graph || graph.nodes.length === 0) {
      statusCallback('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç—Ä–æ–ø –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏!');
      buttonCallback(false);
      cancelCallback(false);
      return;
    }

    // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π —É–∑–µ–ª –∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Ç–æ—á–∫–µ
    const startNodeIdx = findNearestNodeIdx(startPoint.lat, startPoint.lng, graph.nodes);
    
    if (startNodeIdx === -1) {
      statusCallback('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à—É—é —Ç—Ä–æ–ø—É –∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Ç–æ—á–∫–µ!');
      buttonCallback(false);
      cancelCallback(false);
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞ (–±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ–∑–∂–µ)
    setTrailGraph(graph);

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∏–≥–æ–Ω—ã –∑–∞–ø—Ä–µ—Ç–Ω—ã—Ö –∑–æ–Ω —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    // –ü—Ä–æ—Å—Ç–æ–π —Ö–µ—à –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –æ–±–ª–∞—Å—Ç–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±—ä–µ–∫—Ç–æ–≤
    const areaHash = selectedBounds.type === 'polygon' 
      ? `${selectedBounds.south}_${selectedBounds.west}_${selectedBounds.north}_${selectedBounds.east}_polygon`
      : `${selectedBounds.south}_${selectedBounds.west}_${selectedBounds.north}_${selectedBounds.east}_rect`;
    const dataHash = `${closedAreasData.length}_${waterAreasData.length}_${areaHash}`;
    let forbiddenPolygons;
    
    if (cachedDataHash === dataHash && cachedForbiddenPolygons) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª–∏–≥–æ–Ω—ã
      forbiddenPolygons = cachedForbiddenPolygons;
      statusCallback(`üö´ –ò—Å–ø–æ–ª—å–∑—É—é –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–µ—Ç–Ω—ã–µ –∑–æ–Ω—ã: ${forbiddenPolygons.length}`);
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª–∏–≥–æ–Ω—ã
      forbiddenPolygons = [];
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫—Ä—ã—Ç—ã–µ –∑–æ–Ω—ã
      const closedAreaPolygons = extractPolygons(closedAreasData);
      forbiddenPolygons.push(...closedAreaPolygons);

      // –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–¥–æ—ë–º—ã
      const waterAreaPolygons = extractPolygons(waterAreasData);
      forbiddenPolygons.push(...waterAreaPolygons);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
      cachedForbiddenPolygons = forbiddenPolygons;
      cachedDataHash = dataHash;
      
      statusCallback(`üö´ –°–æ–∑–¥–∞–Ω–æ –∑–∞–ø—Ä–µ—Ç–Ω—ã—Ö –∑–æ–Ω: ${forbiddenPolygons.length}`);
    }

    if (cancelGeneration) return;

    // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ —Å —É—á–µ—Ç–æ–º –∑–∞–ø—Ä–µ—Ç–Ω—ã—Ö –∑–æ–Ω
    statusCallback('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞ —Å –∑–∞–ø—Ä–µ—Ç–Ω—ã–º–∏ –∑–æ–Ω–∞–º–∏...');
    const updatedGraph = buildPathGraph(pathsData, forbiddenPolygons, barriersData);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞
    setTrailGraph(updatedGraph);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ—á–∫–∏
    statusCallback('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—á–µ–∫...');
    const points = await generatePointsOnPaths(
      pathsData, 
      selectedBounds, 
      startPoint, 
      count, 
      minDist,
      difficultyLevel, 
      forbiddenPolygons, 
      updatedGraph, 
      startNodeIdx, 
      statusCallback
    );

    if (cancelGeneration) return;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (points.length > 0) {
      statusCallback(`‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${points.length} —Ç–æ—á–µ–∫ –∏–∑ ${count} –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã—Ö`);
      updateTargetPointsList(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ—á–µ–∫ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º UI –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
      import('./uiController.js').then(ui => {
        ui.setStep('points_generated');
        ui.updateInfoPanel(points.length, '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å', 0); // –î–∏—Å—Ç–∞–Ω—Ü–∏—è –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      }).catch(err => {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI:', err);
      });
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
      import('./sequenceUI.js').then(sequenceUI => {
        sequenceUI.generateAndDisplaySequence();
      }).catch(err => {
        console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:', err);
      });
    } else {
      statusCallback('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–π —Ç–æ—á–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –æ–±–ª–∞—Å—Ç—å –∏–ª–∏ —É–º–µ–Ω—å—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫.');
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ—á–µ–∫:', error);
    statusCallback(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  } finally {
    buttonCallback(false);
    cancelCallback(false);
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—á–µ–∫ –Ω–∞ —Ç—Ä–æ–ø–∞—Ö
async function generatePointsOnPaths(pathsData, selectedBounds, startPoint, count, minDist, difficultyLevel, forbiddenPolygons, graph, startNodeIdx, statusCallback) {
  const points = [];
  const maxAttempts = calculateMaxAttempts(count, difficultyLevel); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å—á–µ—Ç–∞
  let attempts = 0;
  
  // –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ minDist –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Ç–æ—á–∫–∏
  let currentMinDist = minDist;
  const originalMinDist = minDist;
  let reductionStep = 0;
  const maxReductions = 5; // –ú–∞–∫—Å–∏–º—É–º 5 —Å–Ω–∏–∂–µ–Ω–∏–π
  let lastPointsCount = 0;
  let stuckCounter = 0; // –°—á—ë—Ç—á–∏–∫ "–∑–∞—Å—Ç—Ä–µ–≤–∞–Ω–∏–π"

  // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—Ä–æ–ø—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
  const filteredPaths = pathsData.filter(path => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ geometry —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
    return path.geometry && Array.isArray(path.geometry) && path.geometry.length > 0;
  });
  
  if (filteredPaths.length === 0) {
    statusCallback('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç—Ä–æ–ø –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏!');
    return points;
  }

  statusCallback(`üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—á–µ–∫ –Ω–∞ ${filteredPaths.length} —Ç—Ä–æ–ø–∞—Ö...`);

  let debugStats = {
    totalAttempts: 0,
    invalidPath: 0,
    noRandomPoint: 0,
    outOfBounds: 0,
    outOfPolygon: 0,
    tooClose: 0,
    inForbiddenZone: 0,
    noNearestNode: 0,
    notReachable: 0,
    success: 0
  };
  
  while (points.length < count && attempts < maxAttempts && !cancelGeneration) {
    attempts++;
    debugStats.totalAttempts++;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 50 –ø–æ–ø—ã—Ç–æ–∫ –∏ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ —Å–Ω–∏–∂–∞–µ–º minDist –µ—Å–ª–∏ –∑–∞—Å—Ç—Ä—è–ª–∏
    if (attempts % 50 === 0) {
      const pointsAdded = points.length - lastPointsCount;
      const remainingAttempts = maxAttempts - attempts;
      const remainingPoints = count - points.length;
      
      // –ï—Å–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –ø–æ–ø—ã—Ç–æ–∫ –¥–æ–±–∞–≤–∏–ª–æ—Å—å –º–∞–ª–æ —Ç–æ—á–µ–∫ (0-1) - —Å–Ω–∏–∂–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
      if (pointsAdded <= 1 && points.length < count) {
        stuckCounter++;
        
        if (reductionStep < maxReductions) {
          reductionStep++;
          // –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ: —á–µ–º –±–æ–ª—å—à–µ —à–∞–≥, —Ç–µ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–µ–µ
          const reductionFactor = reductionStep <= 3 ? 0.15 : 0.25; // –ü–µ—Ä–≤—ã–µ 3 —à–∞–≥–∞ -15%, –¥–∞–ª–µ–µ -25%
          currentMinDist = originalMinDist * Math.pow(1 - reductionFactor, reductionStep);
          statusCallback(`‚öôÔ∏è –ê–¥–∞–ø—Ç–∞—Ü–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π (—à–∞–≥ ${reductionStep})...`);
        }
      } else {
        stuckCounter = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –µ—Å–ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –µ—Å—Ç—å
      }
      
      // –ê–í–ê–†–ò–ô–ù–´–ô –†–ï–ñ–ò–ú: –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å –º–∞–ª–æ –ø–æ–ø—ã—Ç–æ–∫ –∏ –Ω–µ –≤—Å–µ —Ç–æ—á–∫–∏ —Ä–∞–∑–º–µ—â–µ–Ω—ã
      if (remainingAttempts < 100 && remainingPoints > 0) {
        // –°–Ω–∏–∂–∞–µ–º –¥–æ –º–∏–Ω–∏–º—É–º–∞ - 30% –æ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
        const emergencyMinDist = originalMinDist * 0.3;
        if (currentMinDist > emergencyMinDist) {
          currentMinDist = emergencyMinDist;
          statusCallback(`üö® –ê–≤–∞—Ä–∏–π–Ω—ã–π —Ä–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...`);
        }
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
      lastPointsCount = points.length;
    }
    
    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ç—Ä–æ–ø—É
    const randomPath = filteredPaths[Math.floor(Math.random() * filteredPaths.length)];
    const coordinates = randomPath.geometry; // geometry —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    
    if (coordinates.length < 2) {
      debugStats.invalidPath++;
      continue;
    }

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç, –æ–∂–∏–¥–∞–µ–º—ã–π getRandomPointOnLine
    const linePoints = coordinates.map(coord => ({
      lat: coord[0],
      lon: coord[1]
    }));
    
    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ç–æ—á–∫—É –Ω–∞ —Ç—Ä–æ–ø–µ
    const randomPoint = getRandomPointOnLine(linePoints);
    
    if (!randomPoint) {
      debugStats.noRandomPoint++;
      continue;
    }
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –æ–±—ä–µ–∫—Ç —Å lat/lng
    const pointObj = {
      lat: randomPoint[0],
      lng: randomPoint[1]
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ—á–∫–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
    if (pointObj.lat < selectedBounds.south || pointObj.lat > selectedBounds.north ||
        pointObj.lng < selectedBounds.west || pointObj.lng > selectedBounds.east) {
      debugStats.outOfBounds++;
      continue;
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –ø–æ–ª–∏–≥–æ–Ω–∞
    if (selectedBounds.type === 'polygon' && selectedBounds.polygon) {
      const polygonLatLngs = selectedBounds.polygon.getLatLngs()[0]; // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª–∏–≥–æ–Ω–∞
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º LatLng –æ–±—ä–µ–∫—Ç—ã –≤ –º–∞—Å—Å–∏–≤—ã [lat, lng]
      const polygonCoords = polygonLatLngs.map(latlng => [latlng.lat, latlng.lng]);
      
      if (!pointInPolygon(pointObj.lat, pointObj.lng, polygonCoords)) {
        debugStats.outOfPolygon++;
        continue;
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –¥—Ä—É–≥–∏—Ö —Ç–æ—á–µ–∫
    // –î–ª—è —É—Ä–æ–≤–Ω—è "–ù–æ–≤–∏—á–æ–∫" –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å (jitter) –¥–ª—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    let tooClose = false;
    for (const existingPoint of points) {
      const distance = haversine(pointObj.lat, pointObj.lng, existingPoint.lat, existingPoint.lng);
      
      // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Å jitter –¥–ª—è —É—Ä–æ–≤–Ω—è 1
      let effectiveMinDist = currentMinDist; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ (–∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ) —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
      if (parseInt(difficultyLevel) === 1) {
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å ¬±30% –¥–ª—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        const jitter = 0.7 + Math.random() * 0.6; // 0.7 - 1.3
        effectiveMinDist = currentMinDist * jitter;
      }
      
      if (distance < effectiveMinDist) {
        tooClose = true;
        break;
      }
    }

    if (tooClose) {
      debugStats.tooClose++;
      continue;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ—á–∫–∞ –Ω–µ –≤ –∑–∞–ø—Ä–µ—Ç–Ω–æ–π –∑–æ–Ω–µ
    // –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –¥–ª—è –±–æ–ª—å—à–∏—Ö –æ–±–ª–∞—Å—Ç–µ–π —Å >100 –∑–æ–Ω–∞–º–∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —É–º–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
    let inForbiddenZone = false;
    
    if (forbiddenPolygons.length > 100) {
      // –í –±–æ–ª—å—à–∏—Ö –≥–æ—Ä–æ–¥–∞—Ö –º–æ–∂–µ—Ç –±—ã—Ç—å 200-300+ –∑–æ–Ω (–∑–¥–∞–Ω–∏—è)
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é 3-—é —Ç–æ—á–∫—É –Ω–∞ –ø–µ—Ä–≤—ã—Ö 30% –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
      const earlyPhase = attempts < maxAttempts * 0.3;
      const shouldCheck = !earlyPhase || (attempts % 3 === 0);
      
      if (shouldCheck) {
        for (let i = 0; i < forbiddenPolygons.length; i++) {
          const polygon = forbiddenPolygons[i];
          if (pointInPolygon(pointObj.lat, pointObj.lng, polygon)) {
            inForbiddenZone = true;
            break;
          }
        }
      }
    } else {
      // –î–ª—è –º–∞–ª–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–æ–Ω - –ø–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ–≥–¥–∞
      for (let i = 0; i < forbiddenPolygons.length; i++) {
        const polygon = forbiddenPolygons[i];
        if (pointInPolygon(pointObj.lat, pointObj.lng, polygon)) {
          inForbiddenZone = true;
          break;
        }
      }
    }

    if (inForbiddenZone) {
      debugStats.inForbiddenZone++;
      continue;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–∏–º–æ—Å—Ç—å –æ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Ç–æ—á–∫–∏
    const pointNodeIdx = findNearestNodeIdx(pointObj.lat, pointObj.lng, graph.nodes);
    if (pointNodeIdx === -1) {
      debugStats.noNearestNode++;
      continue;
    }

    const isReachableResult = isReachable(graph, startNodeIdx, pointNodeIdx);
    if (!isReachableResult) {
      debugStats.notReachable++;
      addFailedAttemptMarker(pointObj.lat, pointObj.lng);
      continue;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É
    points.push(pointObj);
    addPointMarker(pointObj.lat, pointObj.lng, points.length);
    debugStats.success++;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 5 —Ç–æ—á–µ–∫
    if (points.length % 5 === 0) {
      statusCallback(`üéØ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${points.length}/${count} —Ç–æ—á–µ–∫...`);
    }
  }

  return points;
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ–Ω—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
export function cancelPointGeneration() {
  cancelGeneration = true;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è GPX —Ñ–∞–π–ª–∞
export function downloadGPX() {
  const startPoint = getStartPoint();
  
  if (pointMarkers.length === 0) {
    alert('–°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —Ç–æ—á–∫–∏!');
    return;
  }

  let gpxContent = `<?xml version="1.0" encoding="UTF-8"?>
<gpx version="1.1" creator="TrailPointsGenerator" xmlns="http://www.topografix.com/GPX/1/1">
`;

  // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Ç–æ—á–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å
  if (startPoint) {
    gpxContent += `  <wpt lat="${startPoint.lat.toFixed(14)}" lon="${startPoint.lng.toFixed(14)}">
    <ele>0.0</ele>
    <name>START</name>
    <type>MILE MARKER</type>
  </wpt>
`;
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ç–æ—á–∫–∏
  pointMarkers.forEach((marker, i) => {
    const latlng = marker.getLatLng();
    const pointNumber = (i + 1).toString().padStart(2, '0');
    gpxContent += `  <wpt lat="${latlng.lat.toFixed(14)}" lon="${latlng.lng.toFixed(14)}">
    <ele>0.0</ele>
    <name>POINT_${pointNumber}</name>
    <type>MILE MARKER</type>
  </wpt>
`;
  });

  gpxContent += `</gpx>`;

  // –°–æ–∑–¥–∞–µ–º –∏ —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
  const blob = new Blob([gpxContent], { type: 'application/gpx+xml' });
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = `trail_points_${new Date().toISOString().split('T')[0]}.gpx`;
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  URL.revokeObjectURL(url);
}
