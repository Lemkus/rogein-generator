/**
 * –ú–æ–¥—É–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫ –Ω–∞ —Ç—Ä–æ–ø–∞—Ö
 * –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å —Å –ø—Ä–æ—Å—Ç–æ–π –∏ –Ω–∞–¥–µ–∂–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Ç–æ—á–µ–∫
 */

import { haversine, extractPolygons, pointInPolygon, getRandomPointOnLine, segmentIntersectsPolygon } from './utils.js';
import { fetchAllMapData, clearMapDataCache } from './optimizedOverpassAPI.js';
import { showClosedAreasOnMap, showWaterAreasOnMap, showBarriersOnMap, addPointMarker, addFailedAttemptMarker, clearPointMarkers, clearFailedAttemptMarkers, getStartPoint, clearGraphDebugLayers, updateStartPointPosition, pointMarkers, showGraphDebug } from './mapModule.js';
import { buildPathGraph, findNearestNodeIdx, isReachable } from './algorithms.js';
import { updateTargetPointsList } from './navigation.js';
import { setTrailGraph } from './routeSequence.js';

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–º–µ–Ω—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
let cancelGeneration = false;

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –ø–ª–æ—â–∞–¥–∏ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–∞—Ö
function rectangleArea(bounds) {
  const latDiff = bounds.north - bounds.south;
  const lngDiff = bounds.east - bounds.west;
  
  // –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≥—Ä–∞–¥—É—Å–æ–≤ –≤ –º–µ—Ç—Ä—ã
  const latToMeters = 111000; // 1 –≥—Ä–∞–¥—É—Å —à–∏—Ä–æ—Ç—ã ‚âà 111 –∫–º
  const lngToMeters = 111000 * Math.cos((bounds.north + bounds.south) / 2 * Math.PI / 180);
  
  return latDiff * latToMeters * lngDiff * lngToMeters;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ—á–µ–∫
export async function generatePoints(selectedBounds, startPoint, count, statusCallback, buttonCallback, cancelCallback) {
  if (!selectedBounds) {
    statusCallback('–°–Ω–∞—á–∞–ª–∞ –≤—ã–¥–µ–ª–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ!');
    return;
  }
  if (!startPoint) {
    statusCallback('–°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ—á–∫—É —Å—Ç–∞—Ä—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç–µ!');
    return;
  }
  if (isNaN(count) || count < 1) {
    statusCallback('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫!');
    return;
  }

  buttonCallback(true); // –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
  cancelCallback(true); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
  cancelGeneration = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Ç–º–µ–Ω—ã

  statusCallback('–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö OSM...');

  const sw = { lat: selectedBounds.south, lng: selectedBounds.west };
  const ne = { lat: selectedBounds.north, lng: selectedBounds.east };

  // –í—ã—á–∏—Å–ª—è–µ–º –ø–ª–æ—â–∞–¥—å –æ–±–ª–∞—Å—Ç–∏ –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
  const area = rectangleArea(selectedBounds); // –≤ –º^2
  const minDist = Math.sqrt(area / count) * 0.8; // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è

  try {
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ç–æ—á–∫–∏ –∏ –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Å–ª–æ–∏
    clearPointMarkers();
    clearFailedAttemptMarkers();
    clearGraphDebugLayers();

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
    const bbox = `${selectedBounds.south},${selectedBounds.west},${selectedBounds.north},${selectedBounds.east}`;
    console.log(`üéØ –í—ã–±—Ä–∞–Ω–Ω–∞—è –æ–±–ª–∞—Å—Ç—å: ${bbox}`);
    const mapData = await fetchAllMapData(bbox, statusCallback);
    
    const closedAreasData = mapData.closed_areas || [];
    const waterAreasData = mapData.water_areas || [];
    const barriersData = mapData.barriers || [];
    const pathsData = mapData.paths || [];

    if (cancelGeneration) return;

    statusCallback(`‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: ${pathsData.length} —Ç—Ä–æ–ø, ${closedAreasData.length} –∑–∞–∫—Ä—ã—Ç—ã—Ö –∑–æ–Ω, ${waterAreasData.length} –≤–æ–¥–æ—ë–º–æ–≤, ${barriersData.length} –±–∞—Ä—å–µ—Ä–æ–≤`);


    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –∫–∞—Ä—Ç–µ
    showClosedAreasOnMap(closedAreasData);
    showWaterAreasOnMap(waterAreasData);
    showBarriersOnMap(barriersData);

    if (cancelGeneration) return;

    // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ —Ç—Ä–æ–ø
    statusCallback('–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∞ —Ç—Ä–æ–ø...');
    const graph = buildPathGraph(pathsData, [], barriersData);
    
    console.log('üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä–∞—Ñ–µ:');
    console.log(`   –£–∑–ª—ã: ${graph ? graph.nodes.length : 0}`);
    console.log(`   –†—ë–±—Ä–∞: ${graph ? graph.adj.length : 0}`);
    console.log(`   –ò—Å–∫–ª—é—á—ë–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã: ${graph ? graph.excludedSegments.length : 0}`);
    
    // –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–∞—Ö
    if (graph && graph.excludedSegments.length > 0) {
      console.log('üîç –ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã:');
      graph.excludedSegments.forEach((segment, index) => {
        console.log(`   –°–µ–≥–º–µ–Ω—Ç ${index + 1}: ${segment.reason}`);
        if (index < 5) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
          console.log(`     –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: [${segment.segment[0].lat.toFixed(6)}, ${segment.segment[0].lon.toFixed(6)}] -> [${segment.segment[1].lat.toFixed(6)}, ${segment.segment[1].lon.toFixed(6)}]`);
        }
      });
    }
    
    if (!graph || graph.nodes.length === 0) {
      statusCallback('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç—Ä–æ–ø –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏!');
      buttonCallback(false);
      cancelCallback(false);
      return;
    }

    // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π —É–∑–µ–ª –∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Ç–æ—á–∫–µ
    console.log('üîç –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–≥–æ —É–∑–ª–∞ –∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Ç–æ—á–∫–µ...');
    console.log(`   –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ç–æ—á–∫–∞: lat=${startPoint.lat}, lng=${startPoint.lng}`);
    console.log(`   –£–∑–ª–æ–≤ –≤ –≥—Ä–∞—Ñ–µ: ${graph.nodes.length}`);
    
    const startNodeIdx = findNearestNodeIdx(startPoint.lat, startPoint.lng, graph.nodes);
    console.log(`   –ù–∞–π–¥–µ–Ω–Ω—ã–π —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —É–∑–µ–ª: ${startNodeIdx}`);
    
    if (startNodeIdx === -1) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–π —É–∑–µ–ª –∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Ç–æ—á–∫–µ!');
      statusCallback('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à—É—é —Ç—Ä–æ–ø—É –∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Ç–æ—á–∫–µ!');
      buttonCallback(false);
      cancelCallback(false);
      return;
    }
    
    console.log(`‚úÖ –°—Ç–∞—Ä—Ç–æ–≤—ã–π —É–∑–µ–ª –Ω–∞–π–¥–µ–Ω: ${startNodeIdx}`);
    console.log(`   –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —É–∑–ª–∞: lat=${graph.nodes[startNodeIdx].lat}, lon=${graph.nodes[startNodeIdx].lon}`);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞ (–±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ–∑–∂–µ)
    setTrailGraph(graph);

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∏–≥–æ–Ω—ã –∑–∞–ø—Ä–µ—Ç–Ω—ã—Ö –∑–æ–Ω
    const forbiddenPolygons = [];
    
    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    console.log('üîç –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞–ø—Ä–µ—Ç–Ω—ã—Ö –∑–æ–Ω:');
    console.log(`   –ó–∞–∫—Ä—ã—Ç—ã–µ –∑–æ–Ω—ã (raw): ${closedAreasData.length}`);
    console.log(`   –í–æ–¥–æ—ë–º—ã (raw): ${waterAreasData.length}`);
    
    // –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫—Ä—ã—Ç—ã—Ö –∑–æ–Ω–∞—Ö
    if (closedAreasData.length > 0) {
      console.log('üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫—Ä—ã—Ç—ã—Ö –∑–æ–Ω–∞—Ö:');
      closedAreasData.forEach((area, index) => {
        console.log(`   –ó–æ–Ω–∞ ${index + 1}:`, {
          type: area.type,
          osmid: area.osmid,
          name: area.name || '–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
          military: area.military,
          access: area.access,
          geometry_points: area.geometry ? area.geometry.length : 0,
          full_structure: area // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        });
      });
    } else {
      console.log('üîç –ó–∞–∫—Ä—ã—Ç—ã–µ –∑–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ API –¥–∞–Ω–Ω—ã—Ö');
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫—Ä—ã—Ç—ã–µ –∑–æ–Ω—ã
    const closedAreaPolygons = extractPolygons(closedAreasData);
    forbiddenPolygons.push(...closedAreaPolygons);
    console.log(`   –ó–∞–∫—Ä—ã—Ç—ã–µ –∑–æ–Ω—ã (–ø–æ–ª–∏–≥–æ–Ω—ã): ${closedAreaPolygons.length}`);

    // –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–¥–æ—ë–º—ã
    const waterAreaPolygons = extractPolygons(waterAreasData);
    forbiddenPolygons.push(...waterAreaPolygons);
    console.log(`   –í–æ–¥–æ—ë–º—ã (–ø–æ–ª–∏–≥–æ–Ω—ã): ${waterAreaPolygons.length}`);

    statusCallback(`üö´ –ó–∞–ø—Ä–µ—Ç–Ω—ã—Ö –∑–æ–Ω: ${forbiddenPolygons.length}`);
    console.log(`üîç –°–æ–∑–¥–∞–Ω–æ –∑–∞–ø—Ä–µ—Ç–Ω—ã—Ö –∑–æ–Ω: ${forbiddenPolygons.length}`);

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–∞–ø—Ä–µ—Ç–Ω—ã–µ –∑–æ–Ω—ã –Ω–∞ –∫–∞—Ä—Ç–µ –∫—Ä–∞—Å–Ω—ã–º —Ü–≤–µ—Ç–æ–º
    if (closedAreasData.length > 0) {
      console.log('üîç –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç—ã—Ö –∑–æ–Ω –Ω–∞ –∫–∞—Ä—Ç–µ...');
      showClosedAreasOnMap(closedAreasData);
    }
    
    if (waterAreasData.length > 0) {
      console.log('üîç –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ–¥–æ—ë–º–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ...');
      showWaterAreasOnMap(waterAreasData);
    }

    if (cancelGeneration) return;

    // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ —Å —É—á–µ—Ç–æ–º –∑–∞–ø—Ä–µ—Ç–Ω—ã—Ö –∑–æ–Ω
    statusCallback('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞ —Å –∑–∞–ø—Ä–µ—Ç–Ω—ã–º–∏ –∑–æ–Ω–∞–º–∏...');
    console.log('üîç –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∞ —Å –∑–∞–ø—Ä–µ—Ç–Ω—ã–º–∏ –∑–æ–Ω–∞–º–∏...');
    const updatedGraph = buildPathGraph(pathsData, forbiddenPolygons, barriersData);
    
    console.log('üîç –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ:');
    console.log(`   –£–∑–ª—ã: ${updatedGraph ? updatedGraph.nodes.length : 0}`);
    console.log(`   –†—ë–±—Ä–∞: ${updatedGraph ? updatedGraph.adj.length : 0}`);
    console.log(`   –ò—Å–∫–ª—é—á—ë–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã: ${updatedGraph ? updatedGraph.excludedSegments.length : 0}`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞
    setTrailGraph(updatedGraph);
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥—Ä–∞—Ñ —Ç—Ä–æ–ø –Ω–∞ –∫–∞—Ä—Ç–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    showGraphDebug(updatedGraph);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ—á–∫–∏
    statusCallback('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—á–µ–∫...');
    const points = await generatePointsOnPaths(
      pathsData, 
      selectedBounds, 
      startPoint, 
      count, 
      minDist, 
      forbiddenPolygons, 
      updatedGraph, 
      startNodeIdx, 
      statusCallback
    );

    if (cancelGeneration) return;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (points.length > 0) {
      statusCallback(`‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${points.length} —Ç–æ—á–µ–∫ –∏–∑ ${count} –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã—Ö`);
      updateTargetPointsList(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ—á–µ–∫ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º UI –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
      import('./uiController.js').then(ui => {
        ui.setStep('points_generated');
        ui.updateInfoPanel(points.length, '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å', 0); // –î–∏—Å—Ç–∞–Ω—Ü–∏—è –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      }).catch(err => {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI:', err);
      });
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
      import('./sequenceUI.js').then(sequenceUI => {
        sequenceUI.generateAndDisplaySequence();
      }).catch(err => {
        console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:', err);
      });
    } else {
      statusCallback('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–π —Ç–æ—á–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –æ–±–ª–∞—Å—Ç—å –∏–ª–∏ —É–º–µ–Ω—å—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫.');
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ—á–µ–∫:', error);
    statusCallback(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  } finally {
    buttonCallback(false);
    cancelCallback(false);
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—á–µ–∫ –Ω–∞ —Ç—Ä–æ–ø–∞—Ö
async function generatePointsOnPaths(pathsData, selectedBounds, startPoint, count, minDist, forbiddenPolygons, graph, startNodeIdx, statusCallback) {
  console.log('üîç –ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ—á–µ–∫ –Ω–∞ —Ç—Ä–æ–ø–∞—Ö...');
  console.log(`   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: count=${count}, minDist=${minDist}, startNodeIdx=${startNodeIdx}`);
  
  const points = [];
  const maxAttempts = count * 10; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
  let attempts = 0;

  // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—Ä–æ–ø—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
  console.log('üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç—Ä–æ–ø...');
  console.log(`   –í—Å–µ–≥–æ —Ç—Ä–æ–ø: ${pathsData.length}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤—ã—Ö –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç—Ä–æ–ø
  if (pathsData.length > 0) {
    console.log('üîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–µ—Ä–≤–æ–π —Ç—Ä–æ–ø—ã:', pathsData[0]);
    console.log('üîç –ö–ª—é—á–∏ –ø–µ—Ä–≤–æ–π —Ç—Ä–æ–ø—ã:', Object.keys(pathsData[0]));
    if (pathsData[0].geometry) {
      console.log('üîç –ö–ª—é—á–∏ geometry:', Object.keys(pathsData[0].geometry));
    }
  }
  
  const filteredPaths = pathsData.filter(path => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ geometry —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
    return path.geometry && Array.isArray(path.geometry) && path.geometry.length > 0;
  });

  console.log(`   –§–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–æ–ø: ${filteredPaths.length}`);
  
  if (filteredPaths.length === 0) {
    console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç—Ä–æ–ø!');
    statusCallback('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç—Ä–æ–ø –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏!');
    return points;
  }

  statusCallback(`üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—á–µ–∫ –Ω–∞ ${filteredPaths.length} —Ç—Ä–æ–ø–∞—Ö...`);

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  console.log('üîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:');
  console.log(`   –§–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–æ–ø: ${filteredPaths.length}`);
  console.log(`   –ó–∞–ø—Ä–æ—à–µ–Ω–æ —Ç–æ—á–µ–∫: ${count}`);
  console.log(`   –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${minDist}–º`);
  console.log(`   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫: ${maxAttempts}`);
  console.log(`   –ó–∞–ø—Ä–µ—Ç–Ω—ã—Ö –∑–æ–Ω: ${forbiddenPolygons.length}`);
  console.log(`   –£–∑–ª–æ–≤ –≤ –≥—Ä–∞—Ñ–µ: ${graph.nodes.length}`);
  console.log(`   –°—Ç–∞—Ä—Ç–æ–≤—ã–π —É–∑–µ–ª: ${startNodeIdx}`);

  let debugStats = {
    totalAttempts: 0,
    invalidPath: 0,
    noRandomPoint: 0,
    outOfBounds: 0,
    tooClose: 0,
    inForbiddenZone: 0,
    noNearestNode: 0,
    notReachable: 0,
    success: 0
  };

  console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º —Ü–∏–∫–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ—á–µ–∫...');
  
  while (points.length < count && attempts < maxAttempts && !cancelGeneration) {
    attempts++;
    debugStats.totalAttempts++;
    
    // –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 50 –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –±–æ–ª–µ–µ —á–∞—Å—Ç–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    if (attempts % 50 === 0) {
      console.log(`üîç –ü–æ–ø—ã—Ç–∫–∞ ${attempts}: —Ç–æ—á–µ–∫ ${points.length}/${count}`);
    }
    
    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ç—Ä–æ–ø—É
    const randomPath = filteredPaths[Math.floor(Math.random() * filteredPaths.length)];
    const coordinates = randomPath.geometry; // geometry —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    
    if (coordinates.length < 2) {
      debugStats.invalidPath++;
      if (debugStats.invalidPath <= 3) {
        console.log(`üîç –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è —Ç—Ä–æ–ø–∞ ${debugStats.invalidPath}:`, randomPath);
      }
      continue;
    }

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç, –æ–∂–∏–¥–∞–µ–º—ã–π getRandomPointOnLine
    const linePoints = coordinates.map(coord => ({
      lat: coord[0],
      lon: coord[1]
    }));
    
    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ç–æ—á–∫—É –Ω–∞ —Ç—Ä–æ–ø–µ
    const randomPoint = getRandomPointOnLine(linePoints);
    
    if (!randomPoint) {
      debugStats.noRandomPoint++;
      if (debugStats.noRandomPoint <= 3) {
        console.log(`üîç –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —Ç–æ—á–∫—É ${debugStats.noRandomPoint}:`, {
          path: randomPath,
          coordinates: coordinates.slice(0, 3), // –ø–µ—Ä–≤—ã–µ 3 —Ç–æ—á–∫–∏ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
          linePoints: linePoints.slice(0, 3)
        });
      }
      continue;
    }
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –æ–±—ä–µ–∫—Ç —Å lat/lng
    const pointObj = {
      lat: randomPoint[0],
      lng: randomPoint[1]
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ—á–∫–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
    if (pointObj.lat < selectedBounds.south || pointObj.lat > selectedBounds.north ||
        pointObj.lng < selectedBounds.west || pointObj.lng > selectedBounds.east) {
      debugStats.outOfBounds++;
      continue;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –¥—Ä—É–≥–∏—Ö —Ç–æ—á–µ–∫
    let tooClose = false;
    for (const existingPoint of points) {
      const distance = haversine(pointObj.lat, pointObj.lng, existingPoint.lat, existingPoint.lng);
      if (distance < minDist) {
        tooClose = true;
        break;
      }
    }

    if (tooClose) {
      debugStats.tooClose++;
      if (debugStats.tooClose <= 3) {
        console.log(`üîç –°–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ ${debugStats.tooClose}:`, {
          point: pointObj,
          minDist: minDist,
          existingPoints: points.length
        });
      }
      continue;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ—á–∫–∞ –Ω–µ –≤ –∑–∞–ø—Ä–µ—Ç–Ω–æ–π –∑–æ–Ω–µ
    let inForbiddenZone = false;
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–∫—É –Ω–∞ –∑–∞–ø—Ä–µ—Ç–Ω—ã–µ –∑–æ–Ω—ã:`, {
      point: pointObj,
      forbiddenPolygons: forbiddenPolygons.length
    });
    
    for (let i = 0; i < forbiddenPolygons.length; i++) {
      const polygon = forbiddenPolygons[i];
      console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–∏–≥–æ–Ω ${i + 1}:`, {
        polygon_points: polygon.length,
        first_point: polygon[0],
        last_point: polygon[polygon.length - 1]
      });
      
      if (pointInPolygon(pointObj.lat, pointObj.lng, polygon)) {
        inForbiddenZone = true;
        console.log(`üîç ‚ùå –¢–æ—á–∫–∞ –ü–û–ü–ê–õ–ê –≤ –∑–∞–ø—Ä–µ—Ç–Ω—É—é –∑–æ–Ω—É ${i + 1}:`, {
          point: pointObj,
          polygon_points: polygon.length,
          polygon_preview: polygon.slice(0, 3)
        });
        break;
      } else {
        console.log(`üîç ‚úÖ –¢–æ—á–∫–∞ –ù–ï –≤ –∑–∞–ø—Ä–µ—Ç–Ω–æ–π –∑–æ–Ω–µ ${i + 1}`);
      }
    }

    if (inForbiddenZone) {
      debugStats.inForbiddenZone++;
      continue;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–∏–º–æ—Å—Ç—å –æ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Ç–æ—á–∫–∏
    const pointNodeIdx = findNearestNodeIdx(pointObj.lat, pointObj.lng, graph.nodes);
    if (pointNodeIdx === -1) {
      debugStats.noNearestNode++;
      if (debugStats.noNearestNode <= 3) {
        console.log(`üîç –ù–µ –Ω–∞–π–¥–µ–Ω –±–ª–∏–∂–∞–π—à–∏–π —É–∑–µ–ª ${debugStats.noNearestNode}:`, {
          point: pointObj,
          startNodeIdx: startNodeIdx
        });
      }
      continue;
    }

    const isReachableResult = isReachable(graph, startNodeIdx, pointNodeIdx);
    if (!isReachableResult) {
      debugStats.notReachable++;
      if (debugStats.notReachable <= 5) {
        console.log(`üîç –ù–µ–¥–æ—Å—Ç–∏–∂–∏–º–æ ${debugStats.notReachable}:`, {
          point: pointObj,
          pointNodeIdx: pointNodeIdx,
          startNodeIdx: startNodeIdx,
          graphNodes: graph.nodes.length,
          graphAdj: graph.adj.length
        });
      }
      addFailedAttemptMarker(pointObj.lat, pointObj.lng);
      continue;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É
    points.push(pointObj);
    addPointMarker(pointObj.lat, pointObj.lng, points.length);
    debugStats.success++;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 5 —Ç–æ—á–µ–∫
    if (points.length % 5 === 0) {
      statusCallback(`üéØ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${points.length}/${count} —Ç–æ—á–µ–∫...`);
    }
  }

  // –í—ã–≤–æ–¥–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
  console.log('üîç –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ—á–µ–∫:');
  console.log(`   –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: ${debugStats.totalAttempts}`);
  console.log(`   –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Ç—Ä–æ–ø—ã: ${debugStats.invalidPath}`);
  console.log(`   –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —Ç–æ—á–∫—É: ${debugStats.noRandomPoint}`);
  console.log(`   –í–Ω–µ –æ–±–ª–∞—Å—Ç–∏: ${debugStats.outOfBounds}`);
  console.log(`   –°–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ: ${debugStats.tooClose}`);
  console.log(`   –í –∑–∞–ø—Ä–µ—Ç–Ω–æ–π –∑–æ–Ω–µ: ${debugStats.inForbiddenZone}`);
  console.log(`   –ù–µ –Ω–∞–π–¥–µ–Ω –±–ª–∏–∂–∞–π—à–∏–π —É–∑–µ–ª: ${debugStats.noNearestNode}`);
  console.log(`   –ù–µ–¥–æ—Å—Ç–∏–∂–∏–º–æ: ${debugStats.notReachable}`);
  console.log(`   –£—Å–ø–µ—à–Ω–æ: ${debugStats.success}`);
  console.log(`   –§–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–æ–ø: ${filteredPaths.length}`);
  console.log(`   –ó–∞–ø—Ä–µ—Ç–Ω—ã—Ö –∑–æ–Ω: ${forbiddenPolygons.length}`);
  console.log(`   –£–∑–ª–æ–≤ –≤ –≥—Ä–∞—Ñ–µ: ${graph.nodes.length}`);
  console.log(`   –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${minDist}–º`);

  return points;
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ–Ω—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
export function cancelPointGeneration() {
  cancelGeneration = true;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è GPX —Ñ–∞–π–ª–∞
export function downloadGPX() {
  const startPoint = getStartPoint();
  
  if (pointMarkers.length === 0) {
    alert('–°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —Ç–æ—á–∫–∏!');
    return;
  }

  let gpxContent = `<?xml version="1.0" encoding="UTF-8"?>
<gpx version="1.1" creator="TrailPointsGenerator" xmlns="http://www.topografix.com/GPX/1/1">
`;

  // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Ç–æ—á–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å
  if (startPoint) {
    gpxContent += `  <wpt lat="${startPoint.lat.toFixed(14)}" lon="${startPoint.lng.toFixed(14)}">
    <ele>0.0</ele>
    <name>START</name>
    <type>MILE MARKER</type>
  </wpt>
`;
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ç–æ—á–∫–∏
  pointMarkers.forEach((marker, i) => {
    const latlng = marker.getLatLng();
    const pointNumber = (i + 1).toString().padStart(2, '0');
    gpxContent += `  <wpt lat="${latlng.lat.toFixed(14)}" lon="${latlng.lng.toFixed(14)}">
    <ele>0.0</ele>
    <name>POINT_${pointNumber}</name>
    <type>MILE MARKER</type>
  </wpt>
`;
  });

  gpxContent += `</gpx>`;

  // –°–æ–∑–¥–∞–µ–º –∏ —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
  const blob = new Blob([gpxContent], { type: 'application/gpx+xml' });
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = `trail_points_${new Date().toISOString().split('T')[0]}.gpx`;
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  URL.revokeObjectURL(url);
}
