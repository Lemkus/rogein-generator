/**
 * –ú–æ–¥—É–ª—å –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥—Ä–∞—Ñ–∞–º–∏ –∏ –≥–µ–æ–º–µ—Ç—Ä–∏–µ–π
 * –í–∫–ª—é—á–∞–µ—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞ —Ç—Ä–æ–ø, –∞–ª–≥–æ—Ä–∏—Ç–º –î–µ–π–∫—Å—Ç—Ä—ã –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π
 */

import { haversine, segmentIntersectsPolygon, segmentsIntersect, extractPolygons, distancePointToSegment } from './utils.js';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –æ—Ç—Ä–µ–∑–∫–∞ —Å –±–∞—Ä—å–µ—Ä–∞–º–∏
export function segmentIntersectsBarriers(p1, p2, barrierObjs) {
  for (const barrier of barrierObjs) {
    
    if ((barrier.type === 'way' || barrier.type === 'barrier') && barrier.geometry && barrier.geometry.length > 1) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å–æ –≤—Å–µ–º–∏ —Å–µ–≥–º–µ–Ω—Ç–∞–º–∏ –±–∞—Ä—å–µ—Ä–∞-–ª–∏–Ω–∏–∏
      for (let i = 0; i < barrier.geometry.length - 1; i++) {
        const b1 = barrier.geometry[i];
        const b2 = barrier.geometry[i + 1];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        let lat1, lon1, lat2, lon2;
        if (Array.isArray(b1)) {
          lat1 = b1[0]; lon1 = b1[1];
        } else if (b1 && typeof b1 === 'object') {
          lat1 = b1.lat; lon1 = b1.lon;
        } else {
          continue;
        }
        
        if (Array.isArray(b2)) {
          lat2 = b2[0]; lon2 = b2[1];
        } else if (b2 && typeof b2 === 'object') {
          lat2 = b2.lat; lon2 = b2.lon;
        } else {
          continue;
        }
        
        const barrierPoint1 = { lat: lat1, lon: lon1 };
        const barrierPoint2 = { lat: lat2, lon: lon2 };
        
        if (segmentsIntersect(p1, p2, barrierPoint1, barrierPoint2)) {
          return {
            intersects: true,
            barrier: `Barrier ${barrier.osmid || 'unknown'} (${barrier.natural || barrier.barrier_type || 'unknown'})`
          };
        }
      }
    } else if (barrier.type === 'node' && barrier.lat && barrier.lon) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–∏–∑–æ—Å—Ç—å –∫ –±–∞—Ä—å–µ—Ä—É-—Ç–æ—á–∫–µ
      const barrierPoint = { lat: barrier.lat, lon: barrier.lon };
      const distanceToBarrier = distancePointToSegment(barrierPoint, p1, p2);
      if (distanceToBarrier < 5) { // 5 –º–µ—Ç—Ä–æ–≤ tolerance
        return {
          intersects: true,
          barrier: `Node ${barrier.osmid || 'unknown'} (${barrier.natural || barrier.barrier_type || 'unknown'})`
        };
      }
    }
  }
  return { intersects: false };
}

// –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞ —Ç—Ä–æ–ø —Å —É–¥–∞–ª–µ–Ω–∏–µ–º —Ä—ë–±–µ—Ä, –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏—Ö –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ –∑–æ–Ω—ã (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
export function buildPathGraph(paths, forbiddenPolygons, barrierObjs = []) {
  const nodes = []; 
  const edges = [];
  const nodeTolerance = 0.5; // Meters
  const excludedSegments = [];

  // –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø 1: Spatial Grid Hash –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ —É–∑–ª–æ–≤
  // –†–∞–∑–±–∏–≤–∞–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –Ω–∞ —Å–µ—Ç–∫—É —è—á–µ–µ–∫
  const GRID_SIZE = 0.001; // ~100 –º–µ—Ç—Ä–æ–≤ –Ω–∞ —è—á–µ–π–∫—É
  const spatialGrid = new Map(); // key: "lat_grid,lon_grid" -> array of node indices
  
  function getGridKey(lat, lon) {
    const latGrid = Math.floor(lat / GRID_SIZE);
    const lonGrid = Math.floor(lon / GRID_SIZE);
    return `${latGrid},${lonGrid}`;
  }
  
  function getNeighborGridKeys(lat, lon) {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é —è—á–µ–π–∫—É –∏ 8 —Å–æ—Å–µ–¥–Ω–∏—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞
    const latGrid = Math.floor(lat / GRID_SIZE);
    const lonGrid = Math.floor(lon / GRID_SIZE);
    const keys = [];
    for (let dLat = -1; dLat <= 1; dLat++) {
      for (let dLon = -1; dLon <= 1; dLon++) {
        keys.push(`${latGrid + dLat},${lonGrid + dLon}`);
      }
    }
    return keys;
  }

  // –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞/—Å–æ–∑–¥–∞–Ω–∏—è —É–∑–ª–∞
  function getOrCreateNodeIndex(lat, lon) {
    // –ò—â–µ–º —Ç–æ–ª—å–∫–æ –≤ —Å–æ—Å–µ–¥–Ω–∏—Ö —è—á–µ–π–∫–∞—Ö —Å–µ—Ç–∫–∏ (9 —è—á–µ–µ–∫ –≤–º–µ—Å—Ç–æ –≤—Å–µ—Ö —É–∑–ª–æ–≤)
    const neighborKeys = getNeighborGridKeys(lat, lon);
    
    for (const key of neighborKeys) {
      const cellNodes = spatialGrid.get(key);
      if (cellNodes) {
        for (const nodeIdx of cellNodes) {
          const node = nodes[nodeIdx];
          if (haversine(lat, lon, node.lat, node.lon) < nodeTolerance) {
            return nodeIdx; // –ù–∞—à–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —É–∑–µ–ª
          }
        }
      }
    }
    
    // –£–∑–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
    const newIdx = nodes.length;
    nodes.push({lat, lon});
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—É—é —Å–µ—Ç–∫—É
    const gridKey = getGridKey(lat, lon);
    if (!spatialGrid.has(gridKey)) {
      spatialGrid.set(gridKey, []);
    }
    spatialGrid.get(gridKey).push(newIdx);
    
    return newIdx;
  }

  // –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø 2: –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç bounding boxes –¥–ª—è –∑–∞–ø—Ä–µ—Ç–Ω—ã—Ö –∑–æ–Ω
  const forbiddenBBoxes = forbiddenPolygons.map(poly => {
    let minLat = Infinity, maxLat = -Infinity;
    let minLon = Infinity, maxLon = -Infinity;
    
    for (const point of poly) {
      const lat = point[0];
      const lon = point[1];
      if (lat < minLat) minLat = lat;
      if (lat > maxLat) maxLat = lat;
      if (lon < minLon) minLon = lon;
      if (lon > maxLon) maxLon = lon;
    }
    
    return { minLat, maxLat, minLon, maxLon, poly };
  });

  // –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–∞ —Å bbox
  function segmentIntersectsBBox(a, b, bbox) {
    const segMinLat = Math.min(a.lat, b.lat);
    const segMaxLat = Math.max(a.lat, b.lat);
    const segMinLon = Math.min(a.lon, b.lon);
    const segMaxLon = Math.max(a.lon, b.lon);
    
    // –ï—Å–ª–∏ bbox—ã –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è - —Å–µ–≥–º–µ–Ω—Ç —Ç–æ—á–Ω–æ –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç –ø–æ–ª–∏–≥–æ–Ω
    return !(segMaxLat < bbox.minLat || segMinLat > bbox.maxLat ||
             segMaxLon < bbox.minLon || segMinLon > bbox.maxLon);
  }

  // Collect all unique nodes from all paths (snapping close points)
  console.log('üìç –°–±–æ—Ä —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —É–∑–ª–æ–≤...');
  let processedPoints = 0;
  
  paths.forEach(path => {
    if (!path.geometry || path.geometry.length < 2) return;
    path.geometry.forEach(pt => {
      let lat, lon;
      
      if (Array.isArray(pt)) {
        lat = pt[0];
        lon = pt[1];
      } else if (pt && typeof pt === 'object') {
        lat = pt.lat;
        lon = pt.lon;
      } else {
        return;
      }
      
      if (typeof lat !== 'number' || typeof lon !== 'number' || isNaN(lat) || isNaN(lon)) {
        return;
      }
      
      getOrCreateNodeIndex(lat, lon);
      processedPoints++;
    });
  });
  
  console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedPoints} —Ç–æ—á–µ–∫ ‚Üí ${nodes.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —É–∑–ª–æ–≤`);

  // Add edges between neighboring points of each path
  console.log('üîó –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ä—ë–±–µ—Ä —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∑–∞–ø—Ä–µ—Ç–Ω—ã—Ö –∑–æ–Ω...');
  let processedSegments = 0;
  let bboxRejections = 0; // –°—á–µ—Ç—á–∏–∫ –æ—Ç—Å–µ—è–Ω–Ω—ã—Ö –ø–æ bbox
  
  paths.forEach(path => {
    if (!path.geometry || path.geometry.length < 2) return;
    for (let i = 0; i < path.geometry.length - 1; i++) {
      const ptA = path.geometry[i];
      const ptB = path.geometry[i+1];
      
      let latA, lonA, latB, lonB;
      
      if (Array.isArray(ptA)) {
        latA = ptA[0]; lonA = ptA[1];
      } else if (ptA && typeof ptA === 'object') {
        latA = ptA.lat; lonA = ptA.lon;
      } else {
        continue;
      }
      
      if (Array.isArray(ptB)) {
        latB = ptB[0]; lonB = ptB[1];
      } else if (ptB && typeof ptB === 'object') {
        latB = ptB.lat; lonB = ptB.lon;
      } else {
        continue;
      }
      
      if (typeof latA !== 'number' || typeof lonA !== 'number' || 
          typeof latB !== 'number' || typeof lonB !== 'number' ||
          isNaN(latA) || isNaN(lonA) || isNaN(latB) || isNaN(lonB)) {
        continue;
      }
      
      const a = { lat: latA, lon: lonA };
      const b = { lat: latB, lon: lonB };
      let forbidden = false;
      let reason = '';

      // –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å bbox
      for (const bboxData of forbiddenBBoxes) {
        // –°–Ω–∞—á–∞–ª–∞ –±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ bbox (–æ—Ç—Å–µ–µ—Ç ~95% –Ω–µ–Ω—É–∂–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫)
        if (segmentIntersectsBBox(a, b, bboxData)) {
          // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ bbox –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è - –¥–µ–ª–∞–µ–º –ø–æ–ª–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
          if (segmentIntersectsPolygon(a, b, bboxData.poly)) {
            forbidden = true;
            reason = `–ü–µ—Ä–µ—Å–µ–∫–∞–µ—Ç –∑–∞–ø—Ä–µ—Ç–Ω—É—é –∑–æ–Ω—É`;
            break;
          }
        } else {
          bboxRejections++;
        }
      }

      // Check for intersection with barriers
      if (!forbidden && barrierObjs.length > 0) {
        const barrierCheck = segmentIntersectsBarriers(a, b, barrierObjs);
        if (barrierCheck.intersects) {
          forbidden = true;
          reason = `–ü–µ—Ä–µ—Å–µ–∫–∞–µ—Ç –±–∞—Ä—å–µ—Ä: ${barrierCheck.barrier}`;
        }
      }

      if (!forbidden) {
        const idxA = getOrCreateNodeIndex(a.lat, a.lon);
        const idxB = getOrCreateNodeIndex(b.lat, b.lon);

        if (idxA !== idxB) {
          edges.push([idxA, idxB]);
          edges.push([idxB, idxA]); // Undirected graph
        } else {
          excludedSegments.push({segment: [a, b], reason: `–°–µ–≥–º–µ–Ω—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∏–ª–∏ —É–∑–ª—ã —Å–ª–∏–ª–∏—Å—å (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ < ${nodeTolerance}–º)`});
        }
      } else {
        excludedSegments.push({segment: [a, b], reason: reason});
      }
      
      processedSegments++;
      
      // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 1000 —Å–µ–≥–º–µ–Ω—Ç–æ–≤
      if (processedSegments % 1000 === 0) {
        console.log(`  ‚è≥ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤: ${processedSegments}, –æ—Ç—Å–µ—è–Ω–æ –ø–æ bbox: ${bboxRejections}`);
      }
    }
  });
  
  console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedSegments} —Å–µ–≥–º–µ–Ω—Ç–æ–≤, bbox –æ—Ç—Å–µ—è–ª ${bboxRejections} –ø—Ä–æ–≤–µ—Ä–æ–∫ (${(bboxRejections/(processedSegments * forbiddenBBoxes.length || 1)*100).toFixed(1)}%)`);

  // Build adjacency list
  console.log('üî® –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–º–µ–∂–Ω–æ—Å—Ç–∏...');
  const adj = Array(nodes.length).fill(0).map(() => []);
  const edgeSet = new Set();
  
  edges.forEach(([u, v]) => {
    const key1 = `${u}-${v}`;
    const key2 = `${v}-${u}`;
    if (!edgeSet.has(key1)) {
      adj[u].push(v);
      adj[v].push(u);
      edgeSet.add(key1);
      edgeSet.add(key2);
    }
  });

  console.log(`‚úÖ –ì—Ä–∞—Ñ –ø–æ—Å—Ç—Ä–æ–µ–Ω: ${nodes.length} —É–∑–ª–æ–≤, ${edges.length/2} —Ä—ë–±–µ—Ä, ${excludedSegments.length} –∏—Å–∫–ª—é—á–µ–Ω–æ`);

  return {nodes, adj, excludedSegments};
}

// BFS –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–∏–º–æ—Å—Ç–∏
export function isReachable(graph, fromIdx, toIdx) {
  const visited = new Set();
  const queue = [fromIdx];
  while (queue.length) {
    const v = queue.shift();
    if (v === toIdx) return true;
    for (const u of graph.adj[v]) {
      if (!visited.has(u)) {
        visited.add(u);
        queue.push(u);
      }
    }
  }
  return false;
}

// –ö–ª–∞—Å—Å –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏ (min-heap)
class MinHeap {
  constructor() {
    this.heap = [];
  }
  
  push(item) {
    this.heap.push(item);
    this._bubbleUp(this.heap.length - 1);
  }
  
  pop() {
    if (this.heap.length === 0) return null;
    if (this.heap.length === 1) return this.heap.pop();
    
    const min = this.heap[0];
    this.heap[0] = this.heap.pop();
    this._bubbleDown(0);
    return min;
  }
  
  get length() {
    return this.heap.length;
  }
  
  _bubbleUp(index) {
    while (index > 0) {
      const parentIndex = Math.floor((index - 1) / 2);
      if (this.heap[index][0] >= this.heap[parentIndex][0]) break;
      
      [this.heap[index], this.heap[parentIndex]] = [this.heap[parentIndex], this.heap[index]];
      index = parentIndex;
    }
  }
  
  _bubbleDown(index) {
    const length = this.heap.length;
    while (true) {
      let minIndex = index;
      const leftChild = 2 * index + 1;
      const rightChild = 2 * index + 2;
      
      if (leftChild < length && this.heap[leftChild][0] < this.heap[minIndex][0]) {
        minIndex = leftChild;
      }
      if (rightChild < length && this.heap[rightChild][0] < this.heap[minIndex][0]) {
        minIndex = rightChild;
      }
      
      if (minIndex === index) break;
      
      [this.heap[index], this.heap[minIndex]] = [this.heap[minIndex], this.heap[index]];
      index = minIndex;
    }
  }
}

// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –î–µ–π–∫—Å—Ç—Ä—ã —Å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –æ—á–µ—Ä–µ–¥—å—é
export function dijkstra(graph, startIdx, endIdx) {
  const dist = Array(graph.nodes.length).fill(Infinity);
  const prev = Array(graph.nodes.length).fill(null);
  const visited = new Set();
  dist[startIdx] = 0;
  
  // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ—á–µ—Ä–µ–¥—å: [distance, nodeIndex]
  const pq = new MinHeap();
  pq.push([0, startIdx]);
  
  while (pq.length > 0) {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —É–∑–µ–ª —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ–º
    const [currentDist, u] = pq.pop();
    
    // –ï—Å–ª–∏ —É–∂–µ –ø–æ—Å–µ—Ç–∏–ª–∏ —ç—Ç–æ—Ç —É–∑–µ–ª, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    if (visited.has(u)) continue;
    visited.add(u);
    
    // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–∏, –º–æ–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
    if (u === endIdx) break;
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ—Å–µ–¥–µ–π
    for (const v of graph.adj[u]) {
      if (visited.has(v)) continue;
      
      const d = haversine(graph.nodes[u].lat, graph.nodes[u].lon, graph.nodes[v].lat, graph.nodes[v].lon);
      const newDist = dist[u] + d;
      
      if (newDist < dist[v]) {
        dist[v] = newDist;
        prev[v] = u;
        pq.push([newDist, v]);
      }
    }
  }
  
  // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Ç—å (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
  let path = [];
  let cur = endIdx;
  if (dist[endIdx] < Infinity) {
    while (cur !== null) {
      path.push(cur);
      cur = prev[cur];
    }
    path.reverse();
  }
  return {distance: dist[endIdx], path};
}

// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–≥–æ —É–∑–ª–∞ —Å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ–º
export function findNearestNodeIdx(lat, lon, nodes) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  if (!nodes || !Array.isArray(nodes) || nodes.length === 0) {
    return -1;
  }
  
  if (typeof lat !== 'number' || typeof lon !== 'number' || isNaN(lat) || isNaN(lon)) {
    return -1;
  }
  
  let minDist = Infinity;
  let nearestIdx = -1;
  
  // –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —Å–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ —Ä–∞–¥–∏—É—Å–µ 100–º
  const searchRadius = 100; // –º–µ—Ç—Ä–æ–≤
  
  for (let i = 0; i < nodes.length; i++) {
    const node = nodes[i];
    if (!node || typeof node.lat !== 'number' || typeof node.lon !== 'number') {
      continue;
    }
    
    // –ë—ã—Å—Ç—Ä–∞—è –æ—Ü–µ–Ω–∫–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è)
    const latDiff = Math.abs(lat - node.lat);
    const lonDiff = Math.abs(lon - node.lon);
    const roughDist = Math.sqrt(latDiff * latDiff + lonDiff * lonDiff) * 111000; // ~111–∫–º –Ω–∞ –≥—Ä–∞–¥—É—Å
    
    // –ï—Å–ª–∏ –≥—Ä—É–±–∞—è –æ—Ü–µ–Ω–∫–∞ –±–æ–ª—å—à–µ —Ä–∞–¥–∏—É—Å–∞ –ø–æ–∏—Å–∫–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç
    if (roughDist > searchRadius && minDist < Infinity) {
      continue;
    }
    
    const dist = haversine(lat, lon, node.lat, node.lon);
    if (dist < minDist) {
      minDist = dist;
      nearestIdx = i;
    }
  }
  return nearestIdx;
} 