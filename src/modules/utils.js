/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –∏ –≥–µ–æ–º–µ—Ç—Ä–∏–µ–π
 */

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ (–º–µ—Ç—Ä—ã)
export function haversine(lat1, lon1, lat2, lon2) {
  const R = 6371000; // —Ä–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –º–µ—Ç—Ä–∞—Ö
  const toRad = x => x * Math.PI / 180;
  const dLat = toRad(lat2 - lat1);
  const dLon = toRad(lon2 - lon1);
  const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
            Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) *
            Math.sin(dLon/2) * Math.sin(dLon/2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
  return R * c;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø–ª–æ—â–∞–¥–∏ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ (–º–µ—Ç—Ä—ã)
export function rectangleArea(bounds) {
  const sw = bounds.getSouthWest();
  const ne = bounds.getNorthEast();
  // —à–∏—Ä–∏–Ω–∞ (–ø–æ –¥–æ–ª–≥–æ—Ç–µ, –Ω–∞ —Å—Ä–µ–¥–Ω–µ–π —à–∏—Ä–æ—Ç–µ)
  const midLat = (sw.lat + ne.lat) / 2;
  const width = haversine(midLat, sw.lng, midLat, ne.lng);
  // –≤—ã—Å–æ—Ç–∞ (–ø–æ —à–∏—Ä–æ—Ç–µ)
  const height = haversine(sw.lat, sw.lng, ne.lat, sw.lng);
  return width * height;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–æ—á–∫–∞ –≤–Ω—É—Ç—Ä–∏ –ø–æ–ª–∏–≥–æ–Ω–∞ (–∞–ª–≥–æ—Ä–∏—Ç–º –ª—É—á–∞)
export function pointInPolygon(lat, lon, polygon) {
  let inside = false;
  for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {
    const xi = polygon[i][0], yi = polygon[i][1]; // xi = lat, yi = lon
    const xj = polygon[j][0], yj = polygon[j][1]; // xj = lat, yj = lon
    const intersect = ((yi > lon) !== (yj > lon)) &&
      (lat < (xj - xi) * (lon - yi) / (yj - yi + 1e-12) + xi);
    if (intersect) inside = !inside;
  }
  return inside;
}

// –ü–æ–ª—É—á–∏—Ç—å –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –≤–Ω–µ—à–Ω–∏—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤ (–º–∞—Å—Å–∏–≤–æ–≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç) –∏–∑ areas
export function extractPolygons(areaObjs) {
  const polygons = [];
  console.log('üîç extractPolygons: –æ–±—Ä–∞–±–æ—Ç–∫–∞', areaObjs.length, '–æ–±—ä–µ–∫—Ç–æ–≤');
  
  areaObjs.forEach((el, index) => {
    console.log(`üîç extractPolygons: –æ–±—ä–µ–∫—Ç ${index + 1}:`, {
      type: el.type,
      hasGeometry: !!el.geometry,
      geometryLength: el.geometry ? el.geometry.length : 0,
      hasMembers: !!el.members,
      membersLength: el.members ? el.members.length : 0
    });
    
    if ((el.type === 'way' || el.type === 'closed_area') && el.geometry && el.geometry.length >= 2) {
      console.log(`üîç extractPolygons: –¥–æ–±–∞–≤–ª—è–µ–º ${el.type} –ø–æ–ª–∏–≥–æ–Ω —Å ${el.geometry.length} —Ç–æ—á–∫–∞–º–∏`);
      // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ 2 —Ç–æ—á–∫–∏, —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –æ—Ç—Ä–µ–∑–æ–∫ –∫–∞–∫ –ø–æ–ª–∏–≥–æ–Ω
      if (el.geometry.length === 2) {
        console.log(`üîç extractPolygons: —Å–æ–∑–¥–∞–µ–º –ø–æ–ª–∏–≥–æ–Ω –∏–∑ –æ—Ç—Ä–µ–∑–∫–∞ (2 —Ç–æ—á–∫–∏)`);
        // –î–ª—è –æ—Ç—Ä–µ–∑–∫–∞ —Å–æ–∑–¥–∞–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –≤–æ–∫—Ä—É–≥ –Ω–µ–≥–æ
        const p1 = el.geometry[0];
        const p2 = el.geometry[1];
        const lat1 = p1.lat, lon1 = p1.lon;
        const lat2 = p2.lat, lon2 = p2.lon;
        
        console.log(`üîç extractPolygons: –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–µ–∫:`, {
          p1: { lat: lat1, lon: lon1 },
          p2: { lat: lat2, lon: lon2 }
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        if (isNaN(lat1) || isNaN(lon1) || isNaN(lat2) || isNaN(lon2)) {
          console.warn(`üîç extractPolygons: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:`, {
            lat1, lon1, lat2, lon2
          });
          return;
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –≤–æ–∫—Ä—É–≥ –æ—Ç—Ä–µ–∑–∫–∞ (–ø—Ä–∏–º–µ—Ä–Ω–æ 10 –º–µ—Ç—Ä–æ–≤)
        const offset = 0.0001; // –ø—Ä–∏–º–µ—Ä–Ω–æ 10 –º–µ—Ç—Ä–æ–≤
        const rect = [
          [lat1 - offset, lon1 - offset],
          [lat1 + offset, lon1 - offset],
          [lat1 + offset, lon1 + offset],
          [lat2 + offset, lon2 + offset],
          [lat2 - offset, lon2 + offset],
          [lat2 - offset, lon2 - offset],
          [lat1 - offset, lon1 - offset] // –∑–∞–º—ã–∫–∞–µ–º –ø–æ–ª–∏–≥–æ–Ω
        ];
        
        console.log(`üîç extractPolygons: —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫:`, rect);
        polygons.push(rect);
      } else {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –º–Ω–æ–≥–æ—Ç–æ—á–µ—á–Ω—ã—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤
        const validCoords = el.geometry.filter(p => 
          p && typeof p.lat === 'number' && typeof p.lon === 'number' && 
          !isNaN(p.lat) && !isNaN(p.lon)
        );
        
        if (validCoords.length >= 3) {
          console.log(`üîç extractPolygons: –¥–æ–±–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ—Ç–æ—á–µ—á–Ω—ã–π –ø–æ–ª–∏–≥–æ–Ω —Å ${validCoords.length} –≤–∞–ª–∏–¥–Ω—ã–º–∏ —Ç–æ—á–∫–∞–º–∏`);
          polygons.push(validCoords.map(p => [p.lat, p.lon]));
        } else {
          console.warn(`üîç extractPolygons: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª–∏–≥–æ–Ω —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ—á–µ–∫: ${validCoords.length}`);
        }
      }
    }
    if (el.type === 'relation' && el.members) {
      const outers = el.members.filter(m => m.role === 'outer' && m.geometry && m.geometry.length >= 2);
      console.log(`üîç extractPolygons: –Ω–∞–π–¥–µ–Ω–æ ${outers.length} outer members –≤ relation`);
      outers.forEach(outer => {
        console.log(`üîç extractPolygons: –¥–æ–±–∞–≤–ª—è–µ–º relation –ø–æ–ª–∏–≥–æ–Ω —Å ${outer.geometry.length} —Ç–æ—á–∫–∞–º–∏`);
        if (outer.geometry.length === 2) {
          // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è relation
          const p1 = outer.geometry[0];
          const p2 = outer.geometry[1];
          const offset = 0.0001;
          const rect = [
            [p1.lat - offset, p1.lon - offset],
            [p1.lat + offset, p1.lon - offset],
            [p1.lat + offset, p1.lon + offset],
            [p2.lat + offset, p2.lon + offset],
            [p2.lat - offset, p2.lon + offset],
            [p2.lat - offset, p2.lon - offset],
            [p1.lat - offset, p1.lon - offset]
          ];
          polygons.push(rect);
        } else {
          polygons.push(outer.geometry.map(p => [p.lat, p.lon]));
        }
      });
    }
  });
  
  console.log(`üîç extractPolygons: –∏—Ç–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ ${polygons.length} –ø–æ–ª–∏–≥–æ–Ω–æ–≤`);
  return polygons;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –¥–≤—É—Ö –æ—Ç—Ä–µ–∑–∫–æ–≤ (p1,p2) –∏ (q1,q2)
export function segmentsIntersect(p1, p2, q1, q2) {
  function ccw(a, b, c) {
    return (c.lat - a.lat) * (b.lon - a.lon) > (b.lat - a.lat) * (c.lon - a.lon);
  }
  return (ccw(p1, q1, q2) !== ccw(p2, q1, q2)) && (ccw(p1, p2, q1) !== ccw(p1, p2, q2));
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç –ª–∏ –æ—Ç—Ä–µ–∑–æ–∫ (p1, p2) –ø–æ–ª–∏–≥–æ–Ω (poly)
export function segmentIntersectsPolygon(p1, p2, poly) {
  for (let i = 0, j = poly.length - 1; i < poly.length; j = i++) {
    const q1 = {lat: poly[j][0], lon: poly[j][1]};
    const q2 = {lat: poly[i][0], lon: poly[i][1]};
    if (segmentsIntersect(p1, p2, q1, q2)) return true;
  }
  return false;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –æ—Ç —Ç–æ—á–∫–∏ –¥–æ –æ—Ç—Ä–µ–∑–∫–∞
export function distancePointToSegment(point, segStart, segEnd) {
  const A = point.lat - segStart.lat;
  const B = point.lon - segStart.lon;
  const C = segEnd.lat - segStart.lat;
  const D = segEnd.lon - segStart.lon;

  const dot = A * C + B * D;
  const lenSq = C * C + D * D;
  
  if (lenSq === 0) {
    // –°–µ–≥–º–µ–Ω—Ç –≤—ã—Ä–æ–∂–¥–µ–Ω –≤ —Ç–æ—á–∫—É
    return haversine(point.lat, point.lon, segStart.lat, segStart.lon);
  }
  
  let t = dot / lenSq;
  if (t < 0) t = 0;
  if (t > 1) t = 1;
  
  const projection = {
    lat: segStart.lat + t * C,
    lon: segStart.lon + t * D
  };
  
  return haversine(point.lat, point.lon, projection.lat, projection.lon);
}

// –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —Ç–æ—á–∫—É –Ω–∞ –ª–∏–Ω–∏–∏
export function getRandomPointOnLine(line) {
  // line: –º–∞—Å—Å–∏–≤ —Ç–æ—á–µ–∫ [{lat,lon}, ...]
  // 1. –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç
  const segIdx = Math.floor(Math.random() * (line.length - 1));
  const p1 = line[segIdx];
  const p2 = line[segIdx + 1];
  // 2. –°–ª—É—á–∞–π–Ω–∞—è —Ç–æ—á–∫–∞ –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç–µ
  const t = Math.random();
  const lat = p1.lat + t * (p2.lat - p1.lat);
  const lon = p1.lon + t * (p2.lon - p1.lon);
  return [lat, lon];
} 