/**
 * –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Ä–≤–µ—Ä–Ω—ã–º Overpass API
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç backend_simple.py –≤–º–µ—Å—Ç–æ –ø—Ä—è–º—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ overpass-api.de
 */

import { OVERPASS_API_BASE } from './config.js';

const REQUEST_TIMEOUT = 30000; // 30 —Å–µ–∫—É–Ω–¥

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä–Ω–æ–º—É Overpass API
 * @param {string} endpoint - endpoint API
 * @param {string} description - –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 * @param {number} timeout - —Ç–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –≤ –º—Å
 * @returns {Promise<Object>}
 */
async function executeServerOverpassRequest(endpoint, description, timeout = REQUEST_TIMEOUT) {
  console.log(`üöÄ === –ù–ê–ß–ê–õ–û –ó–ê–ü–†–û–°–ê –ö –°–ï–†–í–ï–†–ù–û–ú–£ OVERPASS ===`);
  console.log(`üîó URL: ${OVERPASS_API_BASE}${endpoint}`);
  console.log(`üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${description}`);
  console.log(`‚è±Ô∏è –¢–∞–π–º–∞—É—Ç: ${timeout}–º—Å`);
  
  try {
    const controller = new AbortController();
    const timeoutId = setTimeout(() => {
      console.log(`‚è∞ –¢–∞–π–º–∞—É—Ç ${timeout}–º—Å –ø—Ä–µ–≤—ã—à–µ–Ω, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å`);
      controller.abort();
    }, timeout);
    
    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å...`);
    const startTime = Date.now();
    
    const response = await fetch(`${OVERPASS_API_BASE}${endpoint}`, {
      method: 'GET',
      signal: controller.signal,
      headers: {
        'Content-Type': 'application/json'
      }
    });
    
    const elapsedTime = Date.now() - startTime;
    clearTimeout(timeoutId);
    
    console.log(`üì° –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –∑–∞ ${elapsedTime}–º—Å:`);
    console.log(`   Status: ${response.status} ${response.statusText}`);
    console.log(`   Headers:`, Object.fromEntries(response.headers.entries()));
    
    if (!response.ok) {
      let errorText = '';
      try {
        errorText = await response.text();
        console.log(`üìÑ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –æ—à–∏–±–∫–∏ (${errorText.length} —Å–∏–º–≤–æ–ª–æ–≤):`, errorText);
      } catch (textError) {
        console.log(`üìÑ –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –æ—à–∏–±–∫–∏:`, textError.message);
      }
      
      throw new Error(`HTTP ${response.status}: ${response.statusText}${errorText ? ` - ${errorText}` : ''}`);
    }
    
    // –ß–∏—Ç–∞–µ–º –∏ –ø–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
    const responseText = await response.text();
    console.log(`üìÑ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –¥–ª–∏–Ω–æ–π ${responseText.length} —Å–∏–º–≤–æ–ª–æ–≤`);
    console.log(`üìÑ –ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç–≤–µ—Ç–∞:`, responseText.substring(0, 500));
    
    let data;
    try {
      data = JSON.parse(responseText);
      console.log(`‚úÖ JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω, —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö:`, typeof data);
      if (data && typeof data === 'object') {
        console.log(`üìä –ö–ª—é—á–∏ –≤ –æ—Ç–≤–µ—Ç–µ:`, Object.keys(data));
        if (data.success !== undefined) {
          console.log(`üéØ success:`, data.success);
        }
        if (data.count !== undefined) {
          console.log(`üìä count:`, data.count);
        }
        if (data.error !== undefined) {
          console.log(`‚ùå error:`, data.error);
        }
      }
    } catch (parseError) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:`, parseError);
      console.log(`üìÑ –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç:`, responseText);
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON: ${parseError.message}`);
    }
    
    console.log(`‚úÖ === –ó–ê–ü–†–û–° –ö –°–ï–†–í–ï–†–ù–û–ú–£ OVERPASS –£–°–ü–ï–®–ï–ù ===`);
    return data;
    
  } catch (error) {
    console.log(`‚ùå === –û–®–ò–ë–ö–ê –ó–ê–ü–†–û–°–ê –ö –°–ï–†–í–ï–†–ù–û–ú–£ OVERPASS ===`);
    console.log(`‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏:`, error.name);
    console.log(`‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ:`, error.message);
    console.log(`‚ùå –°—Ç–µ–∫:`, error.stack);
    throw error;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ Overpass API
 * @returns {Promise<boolean>}
 */
export async function isServerOverpassAvailable() {
  try {
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ Overpass API...`);
    const response = await fetch(`${OVERPASS_API_BASE}/health`, {
      method: 'GET',
      signal: AbortSignal.timeout(5000) // 5 —Å–µ–∫—É–Ω–¥ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
    });
    
    if (response.ok) {
      const data = await response.json();
      console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä–Ω—ã–π Overpass API –¥–æ—Å—Ç—É–ø–µ–Ω:`, data);
      return data.status === 'healthy';
    } else {
      console.log(`‚ùå –°–µ—Ä–≤–µ—Ä–Ω—ã–π Overpass API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: HTTP ${response.status}`);
      return false;
    }
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ Overpass API:`, error.message);
    return false;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –ø–µ—à–µ—Ö–æ–¥–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π Overpass API
 * @param {string} bbox - —Å—Ç—Ä–æ–∫–∞ bbox –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'south,west,north,east'
 * @param {string} pathType - —Ç–∏–ø –ø—É—Ç–µ–π –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 * @returns {Promise<Array>}
 */
export async function fetchPathsWithServerOverpass(bbox, pathType = '–ø–µ—à–µ—Ö–æ–¥–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã') {
  console.log(`üõ§Ô∏è –ó–∞–≥—Ä—É–∂–∞–µ–º ${pathType} —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π Overpass API...`);
  
  const endpoint = `/paths?bbox=${bbox}`;
  const data = await executeServerOverpassRequest(endpoint, `–°–µ—Ä–≤–µ—Ä–Ω—ã–π Overpass ${pathType}`);
  
  if (data.success && data.data) {
    console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä–Ω—ã–π Overpass –≤–µ—Ä–Ω—É–ª ${data.count} ${pathType}`);
    return data.data;
  } else {
    throw new Error(data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ Overpass API');
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –±–∞—Ä—å–µ—Ä—ã —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π Overpass API
 * @param {string} bbox - —Å—Ç—Ä–æ–∫–∞ bbox –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'south,west,north,east'
 * @param {string} barrierType - —Ç–∏–ø –±–∞—Ä—å–µ—Ä–æ–≤ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 * @returns {Promise<Array>}
 */
export async function fetchBarriersWithServerOverpass(bbox, barrierType = '–±–∞—Ä—å–µ—Ä—ã') {
  console.log(`üöß –ó–∞–≥—Ä—É–∂–∞–µ–º ${barrierType} —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π Overpass API...`);
  
  const endpoint = `/barriers?bbox=${bbox}`;
  const data = await executeServerOverpassRequest(endpoint, `–°–µ—Ä–≤–µ—Ä–Ω—ã–π Overpass ${barrierType}`);
  
  if (data.success && data.data) {
    console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä–Ω—ã–π Overpass –≤–µ—Ä–Ω—É–ª ${data.count} ${barrierType}`);
    return data.data;
  } else {
    throw new Error(data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ Overpass API');
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ (—Ç—Ä–æ–ø—ã + –±–∞—Ä—å–µ—Ä—ã) —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π Overpass API
 * @param {string} bbox - —Å—Ç—Ä–æ–∫–∞ bbox –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'south,west,north,east'
 * @returns {Promise<Object>}
 */
export async function fetchAllWithServerOverpass(bbox) {
  console.log(`üåç –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π Overpass API...`);
  
  const endpoint = `/all?bbox=${bbox}`;
  const data = await executeServerOverpassRequest(endpoint, '–°–µ—Ä–≤–µ—Ä–Ω—ã–π Overpass –≤—Å–µ –¥–∞–Ω–Ω—ã–µ');
  
  if (data.success) {
    console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä–Ω—ã–π Overpass –≤–µ—Ä–Ω—É–ª ${data.paths_count} —Ç—Ä–æ–ø –∏ ${data.barriers_count} –±–∞—Ä—å–µ—Ä–æ–≤`);
    return {
      paths: data.paths || [],
      barriers: data.barriers || []
    };
  } else {
    throw new Error(data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ Overpass API');
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã–µ –∑–æ–Ω—ã —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π Overpass API
 * @param {string} bbox - —Å—Ç—Ä–æ–∫–∞ bbox –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'south,west,north,east'
 * @param {string} areaType - —Ç–∏–ø –∑–æ–Ω –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 * @returns {Promise<Array>}
 */
export async function fetchClosedAreasWithServerOverpass(bbox, areaType = '–∑–∞–∫—Ä—ã—Ç—ã–µ –∑–æ–Ω—ã') {
  console.log(`üöß –ó–∞–≥—Ä—É–∂–∞–µ–º ${areaType} —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π Overpass API...`);
  
  const endpoint = `/closed-areas?bbox=${bbox}`;
  const data = await executeServerOverpassRequest(endpoint, `–°–µ—Ä–≤–µ—Ä–Ω—ã–π Overpass ${areaType}`);
  
  if (data.success && data.data) {
    console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä–Ω—ã–π Overpass –≤–µ—Ä–Ω—É–ª ${data.count} ${areaType}`);
    return data.data;
  } else {
    throw new Error(data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ Overpass API');
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≤–æ–¥–æ—ë–º—ã —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π Overpass API
 * @param {string} bbox - —Å—Ç—Ä–æ–∫–∞ bbox –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'south,west,north,east'
 * @param {string} waterType - —Ç–∏–ø –≤–æ–¥–æ—ë–º–æ–≤ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 * @returns {Promise<Array>}
 */
export async function fetchWaterAreasWithServerOverpass(bbox, waterType = '–≤–æ–¥–æ—ë–º—ã') {
  console.log(`üíß –ó–∞–≥—Ä—É–∂–∞–µ–º ${waterType} —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π Overpass API...`);
  
  const endpoint = `/water-areas?bbox=${bbox}`;
  const data = await executeServerOverpassRequest(endpoint, `–°–µ—Ä–≤–µ—Ä–Ω—ã–π Overpass ${waterType}`);
  
  if (data.success && data.data) {
    console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä–Ω—ã–π Overpass –≤–µ—Ä–Ω—É–ª ${data.count} ${waterType}`);
    return data.data;
  } else {
    throw new Error(data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ Overpass API');
  }
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç bounds –≤ —Å—Ç—Ä–æ–∫—É bbox
 * @param {Object} bounds - –æ–±—ä–µ–∫—Ç bounds —Å –º–µ—Ç–æ–¥–∞–º–∏ getSouth(), getWest(), getNorth(), getEast()
 * @returns {string} —Å—Ç—Ä–æ–∫–∞ bbox –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'south,west,north,east'
 */
export function getBboxString(bounds) {
  const south = bounds.getSouth();
  const west = bounds.getWest();
  const north = bounds.getNorth();
  const east = bounds.getEast();
  
  return `${south},${west},${north},${east}`;
}
