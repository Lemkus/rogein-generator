/**
 * –ú–æ–¥—É–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫ –Ω–∞ —Ç—Ä–æ–ø–∞—Ö - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
 * –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ—á–µ–∫ —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º
 * –û–ë–ù–û–í–õ–ï–ù–û: –£–±—Ä–∞–Ω—ã –≤—Å–µ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã Leaflet - —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å
 */

import { haversine, rectangleArea, extractPolygons, pointInPolygon, getRandomPointOnLine } from './utils.js';
import { fetchClosedAreas, fetchWaterAreas, fetchBarriers, fetchPaths, fetchPathsInChunks } from './overpassAPI.js';
import { showClosedAreasOnMap, showWaterAreasOnMap, showBarriersOnMap, addPointMarker, addFailedAttemptMarker, clearPointMarkers, clearFailedAttemptMarkers, pointMarkers, getStartPoint, showGraphDebug, clearGraphDebugLayers, updateStartPointPosition, map } from './mapModule.js';
import { buildPathGraph, findNearestNodeIdx, isReachable } from './algorithms.js';
import { updateTargetPointsList } from './navigation.js';

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–º–µ–Ω—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
let cancelGeneration = false;


// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ—á–µ–∫ —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º
export async function generatePointsFixed(selectedBounds, startPoint, count, percent, statusCallback, buttonCallback, cancelCallback) {
  if (!selectedBounds) {
    statusCallback('–°–Ω–∞—á–∞–ª–∞ –≤—ã–¥–µ–ª–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ!');
    return;
  }
  if (!startPoint) {
    statusCallback('–°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ—á–∫—É —Å—Ç–∞—Ä—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç–µ!');
    return;
  }
  if (isNaN(count) || count < 1) {
    statusCallback('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫!');
    return;
  }
  if (isNaN(percent) || percent <= 0) {
    statusCallback('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è –º–∏–Ω. —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è!');
    return;
  }

  buttonCallback(true); // –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
  cancelCallback(true); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
  cancelGeneration = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Ç–º–µ–Ω—ã

  statusCallback('–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö OSM...');

  const sw = selectedBounds.getSouthWest();
  const ne = selectedBounds.getNorthEast();

  // –í—ã—á–∏—Å–ª—è–µ–º –ø–ª–æ—â–∞–¥—å –æ–±–ª–∞—Å—Ç–∏ –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
  const area = rectangleArea(selectedBounds); // –≤ –º^2
  
  // –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞: –∏—Å–ø–æ–ª—å–∑—É–µ–º —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω—É—é —É–ø–∞–∫–æ–≤–∫—É –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
  const hexagonArea = area * (percent / 100) / count;
  const minDist = Math.sqrt(hexagonArea * 2 / Math.sqrt(3)); // –†–∞–¥–∏—É—Å –æ–ø–∏—Å–∞–Ω–Ω–æ–π –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏ —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫–∞
  
  // –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –æ–±–ª–∞—Å—Ç–∏
  // –°–º—è–≥—á–∞–µ–º –≤–µ—Ä—Ö–Ω–∏–π –ø–æ—Ä–æ–≥ –∏ –≤–≤–µ–¥–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ –ø—Ä–∏ –±–æ–ª—å—à–æ–º —á–∏—Å–ª–µ –ø–æ–ø—ã—Ç–æ–∫
  let adaptiveMinDist = Math.max(minDist, Math.min(area / count / 1000, 160)); // –û—Ç ~minDist –¥–æ 160–º
  const dynamicMinFloor = Math.max(60, minDist * 0.6); // –ù–µ –æ–ø—É—Å–∫–∞–µ–º—Å—è –Ω–∏–∂–µ 60 –º –∏–ª–∏ 0.6*minDist

  statusCallback(`–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏: ${adaptiveMinDist.toFixed(0)}–º`);

  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –º–æ–±–∏–ª—å–Ω—ã–º–∏ —Å–µ—Ç—è–º–∏
    let closedAreasData, waterAreasData, barriersData, pathsData;

    try {
      statusCallback('–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫—Ä—ã—Ç—ã—Ö –∑–æ–Ω...');
      closedAreasData = await fetchClosedAreas(selectedBounds);
      statusCallback(`‚úÖ –ó–∞–∫—Ä—ã—Ç—ã–µ –∑–æ–Ω—ã: ${closedAreasData.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
    } catch (error) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–∫—Ä—ã—Ç—ã–µ –∑–æ–Ω—ã:', error.message);
      statusCallback(`‚ö†Ô∏è –ó–∞–∫—Ä—ã—Ç—ã–µ –∑–æ–Ω—ã: ${error.message}`);
      closedAreasData = [];
    }

    try {
      statusCallback('–ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–¥–æ—ë–º–æ–≤...');
      waterAreasData = await fetchWaterAreas(selectedBounds);
      statusCallback(`‚úÖ –í–æ–¥–æ—ë–º—ã: ${waterAreasData.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
    } catch (error) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–æ–¥–æ—ë–º—ã:', error.message);
      statusCallback(`‚ö†Ô∏è –í–æ–¥–æ—ë–º—ã: ${error.message}`);
      waterAreasData = [];
    }

    try {
      statusCallback('–ó–∞–≥—Ä—É–∑–∫–∞ –±–∞—Ä—å–µ—Ä–æ–≤...');
      barriersData = await fetchBarriers(selectedBounds);
      statusCallback(`‚úÖ –ë–∞—Ä—å–µ—Ä—ã: ${barriersData.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
    } catch (error) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞—Ä—å–µ—Ä—ã:', error.message);
      statusCallback(`‚ö†Ô∏è –ë–∞—Ä—å–µ—Ä—ã: ${error.message}`);
      barriersData = [];
    }

    try {
      statusCallback('–ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–æ–ø...');
      
      // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç—Ä–æ–ø—ã —Ü–µ–ª–∏–∫–æ–º, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –ø–æ —á–∞—Å—Ç—è–º
      try {
        pathsData = await fetchPaths(selectedBounds, statusCallback);
      } catch (error) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç—Ä–æ–ø—ã —Ü–µ–ª–∏–∫–æ–º, –ø—Ä–æ–±—É–µ–º –ø–æ —á–∞—Å—Ç—è–º:', error.message);
        statusCallback('–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–æ–ø –ø–æ —á–∞—Å—Ç—è–º...');
        pathsData = await fetchPathsInChunks(selectedBounds, statusCallback);
      }
      
      statusCallback(`‚úÖ –¢—Ä–æ–ø—ã: ${pathsData.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
      
      // –û—Ç–ª–∞–¥–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –ø—É—Ç–µ–π
      if (pathsData.length > 0) {
        console.log(`üîç –ü–µ—Ä–≤–∞—è —Ç—Ä–æ–ø–∞:`, pathsData[0]);
        console.log(`üîç –ì–µ–æ–º–µ—Ç—Ä–∏—è –ø–µ—Ä–≤–æ–π —Ç—Ä–æ–ø—ã:`, pathsData[0].geometry?.slice(0, 3));
        console.log(`üîç –§–æ—Ä–º–∞—Ç —Ç–æ—á–µ–∫ –≥–µ–æ–º–µ—Ç—Ä–∏–∏:`, pathsData[0].geometry?.slice(0, 3).map(pt => ({
          type: typeof pt,
          isArray: Array.isArray(pt),
          keys: pt && typeof pt === 'object' ? Object.keys(pt) : 'not object',
          values: pt
        })));
      }
    } catch (error) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç—Ä–æ–ø—ã:', error.message);
      statusCallback(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–æ–ø: ${error.message}`);
      buttonCallback(false);
      cancelCallback(false);
      return;
    }

    if (cancelGeneration) {
      statusCallback('–û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.');
      buttonCallback(false);
      cancelCallback(false);
      return;
    }

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –Ω–∞ –∫–∞—Ä—Ç–µ
    showClosedAreasOnMap(closedAreasData);
    showWaterAreasOnMap(waterAreasData);
    showBarriersOnMap(barriersData);

    statusCallback('–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞ —Ç—Ä–æ–ø...');
    
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Å–ª–æ–∏ –ü–ï–†–ï–î –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ –≥—Ä–∞—Ñ–∞
    clearGraphDebugLayers();
    
    await new Promise(resolve => setTimeout(resolve, 100)); // –î–∞—ë–º –≤—Ä–µ–º—è UI –æ–±–Ω–æ–≤–∏—Ç—å—Å—è

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ –ø–æ–ª–∏–≥–æ–Ω—ã
    const allForbiddenAreas = [...closedAreasData, ...waterAreasData];
    const forbiddenPolygons = extractPolygons(allForbiddenAreas);
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${forbiddenPolygons.length} –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤`);

    // –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ —Ç—Ä–æ–ø
    console.log(`üîç –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ –∏–∑ ${pathsData.length} –ø—É—Ç–µ–π...`);
    const graphResult = buildPathGraph(pathsData, forbiddenPolygons, barriersData);
    const graph = { nodes: graphResult.nodes, adj: graphResult.adj };
    console.log(`–ì—Ä–∞—Ñ –ø–æ—Å—Ç—Ä–æ–µ–Ω: ${graph.nodes.length} —É–∑–ª–æ–≤, ${graph.adj.reduce((sum, adj) => sum + adj.length, 0) / 2} —Ä—ë–±–µ—Ä`);
    
    // –û—Ç–ª–∞–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∞
    if (graph.nodes.length === 0) {
      console.log(`‚ùå –ì—Ä–∞—Ñ –ø—É—Å—Ç–æ–π! –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—É—Ç–µ–π...`);
      console.log(`üîç –ü—Ä–∏–º–µ—Ä –ø—É—Ç–∏:`, pathsData[0]);
      console.log(`üîç –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –ø–æ–ª–∏–≥–æ–Ω—ã:`, forbiddenPolygons.length);
      console.log(`üîç –ë–∞—Ä—å–µ—Ä—ã:`, barriersData.length);
      statusCallback('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ —Ç—Ä–æ–ø. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.');
      buttonCallback(false);
      cancelCallback(false);
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —É–∑–ª–æ–≤
    const validNodes = graph.nodes.filter(node => 
      node && typeof node.lat === 'number' && typeof node.lon === 'number'
    );
    
    if (validNodes.length === 0) {
      console.log(`‚ùå –í—Å–µ —É–∑–ª—ã –≥—Ä–∞—Ñ–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã!`);
      console.log(`üîç –ü—Ä–∏–º–µ—Ä—ã —É–∑–ª–æ–≤:`, graph.nodes.slice(0, 5));
      console.log(`üîç –¢–∏–ø—ã —É–∑–ª–æ–≤:`, graph.nodes.slice(0, 5).map(node => ({
        type: typeof node,
        keys: node ? Object.keys(node) : 'null',
        lat: node?.lat,
        lon: node?.lon
      })));
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —É–∑–ª–æ–≤
      console.log(`üîß –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —É–∑–ª–æ–≤...`);
      const fixedNodes = graph.nodes.map(node => {
        if (!node) return null;
        
        // –ï—Å–ª–∏ —É–∑–µ–ª —É–∂–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        if (typeof node.lat === 'number' && typeof node.lon === 'number') {
          return node;
        }
        
        // –ï—Å–ª–∏ —É–∑–µ–ª –∏–º–µ–µ—Ç –¥—Ä—É–≥—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –ø–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        if (node.latitude !== undefined && node.longitude !== undefined) {
          return { lat: node.latitude, lon: node.longitude };
        }
        
        if (node[0] !== undefined && node[1] !== undefined) {
          return { lat: node[0], lon: node[1] };
        }
        
        console.log(`üîç –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —É–∑–ª–∞:`, node);
        return null;
      }).filter(node => node !== null);
      
      if (fixedNodes.length > 0) {
        console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${fixedNodes.length} —É–∑–ª–æ–≤ –∏–∑ ${graph.nodes.length}`);
        graph.nodes = fixedNodes;
        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ —É–∑–ª—ã
        const newValidNodes = graph.nodes.filter(node => 
          node && typeof node.lat === 'number' && typeof node.lon === 'number'
        );
        console.log(`‚úÖ –¢–µ–ø–µ—Ä—å –≤–∞–ª–∏–¥–Ω—ã—Ö —É–∑–ª–æ–≤: ${newValidNodes.length}`);
      } else {
        statusCallback('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —É–∑–ª–æ–≤ –≥—Ä–∞—Ñ–∞.');
        buttonCallback(false);
        cancelCallback(false);
        return;
      }
    } else {
      console.log(`‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö —É–∑–ª–æ–≤: ${validNodes.length} –∏–∑ ${graph.nodes.length}`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–Ω–æ—Å—Ç—å —Å –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–æ–π
    console.log(`üîç –ì—Ä–∞—Ñ —Å–æ–¥–µ—Ä–∂–∏—Ç ${graph.nodes.length} —É–∑–ª–æ–≤`);
    console.log(`üîç –ü–µ—Ä–≤—ã–µ 3 —É–∑–ª–∞:`, graph.nodes.slice(0, 3));
    
    const startNodeIdx = findNearestNodeIdx(startPoint.lat, startPoint.lng, graph.nodes);
    console.log(`üîç –ò–Ω–¥–µ–∫—Å –±–ª–∏–∂–∞–π—à–µ–≥–æ —É–∑–ª–∞: ${startNodeIdx}`);
    
    if (startNodeIdx === -1) {
      console.log(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –±–ª–∏–∂–∞–π—à–∏–π —É–∑–µ–ª –¥–ª—è —Ç–æ—á–∫–∏ —Å—Ç–∞—Ä—Ç–∞: ${startPoint.lat}, ${startPoint.lng}`);
      console.log(`üîç –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–π —É–∑–µ–ª –≤—Ä—É—á–Ω—É—é...`);
      
      // –†—É—á–Ω–æ–π –ø–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–≥–æ —É–∑–ª–∞ —Å –æ—Ç–ª–∞–¥–∫–æ–π
      let minDist = Infinity;
      let nearestIdx = -1;
      for (let i = 0; i < Math.min(graph.nodes.length, 10); i++) {
        const node = graph.nodes[i];
        if (!node || typeof node.lat !== 'number' || typeof node.lon !== 'number') {
          console.log(`üîç –£–∑–µ–ª ${i}: –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ`, node);
          continue;
        }
        
        const dist = haversine(startPoint.lat, startPoint.lng, node.lat, node.lon);
        console.log(`üîç –£–∑–µ–ª ${i}: ${node.lat.toFixed(6)}, ${node.lon.toFixed(6)} - —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${dist.toFixed(2)}–º`);
        if (dist < minDist) {
          minDist = dist;
          nearestIdx = i;
        }
      }
      
      if (nearestIdx !== -1) {
        console.log(`üîç –ù–∞–π–¥–µ–Ω –±–ª–∏–∂–∞–π—à–∏–π —É–∑–µ–ª –≤—Ä—É—á–Ω—É—é: ${nearestIdx}, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${minDist.toFixed(2)}–º`);
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π —É–∑–µ–ª
        const nearestNode = graph.nodes[nearestIdx];
        const distanceToNearestPath = minDist;
        
        if (distanceToNearestPath > 50) {
          statusCallback(`‚ö†Ô∏è –¢–æ—á–∫–∞ —Å—Ç–∞—Ä—Ç–∞ –¥–∞–ª–µ–∫–æ –æ—Ç —Ç—Ä–æ–ø (${distanceToNearestPath.toFixed(0)}–º). –ü–æ–¥–≤–æ–¥–∏–º –∫ –±–ª–∏–∂–∞–π—à–µ–π —Ç—Ä–æ–ø–µ...`);
          updateStartPointPosition(nearestNode.lat, nearestNode.lon);
          startPoint.lat = nearestNode.lat;
          startPoint.lng = nearestNode.lon;
          statusCallback(`‚úÖ –¢–æ—á–∫–∞ —Å—Ç–∞—Ä—Ç–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –∫ –±–ª–∏–∂–∞–π—à–µ–π —Ç—Ä–æ–ø–µ (${distanceToNearestPath.toFixed(0)}–º ‚Üí 0–º)`);
          await new Promise(resolve => setTimeout(resolve, 1000));
        } else {
          statusCallback(`‚úÖ –¢–æ—á–∫–∞ —Å—Ç–∞—Ä—Ç–∞ —Ä—è–¥–æ–º —Å —Ç—Ä–æ–ø–æ–π (${distanceToNearestPath.toFixed(0)}–º)`);
        }
      } else {
        statusCallback('–ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ç—Ä–æ–ø—ã —Ä—è–¥–æ–º —Å —Ç–æ—á–∫–æ–π —Å—Ç–∞—Ä—Ç–∞! –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç–µ —Ç–æ—á–∫—É —Å—Ç–∞—Ä—Ç–∞ –±–ª–∏–∂–µ –∫ —Ç—Ä–æ–ø–∞–º.');
        buttonCallback(false);
        cancelCallback(false);
        return;
      }
    } else {
      // –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞, –µ—Å–ª–∏ —É–∑–µ–ª –Ω–∞–π–¥–µ–Ω
      const nearestNode = graph.nodes[startNodeIdx];
      const distanceToNearestPath = haversine(startPoint.lat, startPoint.lng, nearestNode.lat, nearestNode.lon);
      
      console.log(`üîç –¢–æ—á–∫–∞ —Å—Ç–∞—Ä—Ç–∞: ${startPoint.lat.toFixed(6)}, ${startPoint.lng.toFixed(6)}`);
      console.log(`üîç –ë–ª–∏–∂–∞–π—à–∏–π —É–∑–µ–ª: ${nearestNode.lat.toFixed(6)}, ${nearestNode.lon.toFixed(6)}`);
      console.log(`üîç –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –±–ª–∏–∂–∞–π—à–µ–π —Ç—Ä–æ–ø—ã: ${distanceToNearestPath.toFixed(2)}–º`);
      
      if (distanceToNearestPath > 50) {
        statusCallback(`‚ö†Ô∏è –¢–æ—á–∫–∞ —Å—Ç–∞—Ä—Ç–∞ –¥–∞–ª–µ–∫–æ –æ—Ç —Ç—Ä–æ–ø (${distanceToNearestPath.toFixed(0)}–º). –ü–æ–¥–≤–æ–¥–∏–º –∫ –±–ª–∏–∂–∞–π—à–µ–π —Ç—Ä–æ–ø–µ...`);
        updateStartPointPosition(nearestNode.lat, nearestNode.lon);
        startPoint.lat = nearestNode.lat;
        startPoint.lng = nearestNode.lon;
        statusCallback(`‚úÖ –¢–æ—á–∫–∞ —Å—Ç–∞—Ä—Ç–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –∫ –±–ª–∏–∂–∞–π—à–µ–π —Ç—Ä–æ–ø–µ (${distanceToNearestPath.toFixed(0)}–º ‚Üí 0–º)`);
        await new Promise(resolve => setTimeout(resolve, 1000));
      } else {
        statusCallback(`‚úÖ –¢–æ—á–∫–∞ —Å—Ç–∞—Ä—Ç–∞ —Ä—è–¥–æ–º —Å —Ç—Ä–æ–ø–æ–π (${distanceToNearestPath.toFixed(0)}–º)`);
      }
    }

    statusCallback(`–ì–µ–Ω–µ—Ä–∞—Ü–∏—è ${count} —Ç–æ—á–µ–∫ —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º...`);
    await new Promise(resolve => setTimeout(resolve, 100));

    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –º–∞—Ä–∫–µ—Ä—ã
    clearPointMarkers();
    clearFailedAttemptMarkers();
    
    // –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Å–ª–æ–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è, –ø–æ—ç—Ç–æ–º—É –æ—á–∏—Å—Ç–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞

    // –ù–û–í–´–ô –ê–õ–ì–û–†–ò–¢–ú: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    const generatedPoints = [];
    
    // –†–∞–∑–±–∏–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å –Ω–∞ —Å–µ—Ç–∫—É (–±–æ–ª–µ–µ –º—è–≥–∫–∏–π –ø–æ–¥—Ö–æ–¥)
    const gridSize = Math.max(3, Math.ceil(Math.sqrt(count))); // –ú–µ–Ω—å—à–µ —è—á–µ–µ–∫ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è
    const cellWidth = (ne.lng - sw.lng) / gridSize;
    const cellHeight = (ne.lat - sw.lat) / gridSize;
    
    console.log(`–°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É ${gridSize}x${gridSize} = ${gridSize * gridSize} —è—á–µ–µ–∫ –¥–ª—è ${count} —Ç–æ—á–µ–∫`);
    
    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —è—á–µ–µ–∫ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ç—Ä–æ–ø–∞–º–∏
    const cellPaths = new Map();
    
    // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–æ–ø—ã –ø–æ —è—á–µ–π–∫–∞–º (–º—è–≥–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
    statusCallback('–ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç—Ä–æ–ø –ø–æ —è—á–µ–π–∫–∞–º...');
    let validPathsCount = 0;
    
    pathsData.forEach((path, pathIndex) => {
      if (!path.geometry || !Array.isArray(path.geometry)) return;
      
      // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —è—á–µ–π–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç —ç—Ç–∞ —Ç—Ä–æ–ø–∞
      const pathCells = new Set();
      let validCoords = 0;
      
      path.geometry.forEach(coord => {
        if (!Array.isArray(coord) || coord.length < 2) return;
        const [lat, lon] = coord;
        if (typeof lat !== 'number' || typeof lon !== 'number' || 
            isNaN(lat) || isNaN(lon) || !isFinite(lat) || !isFinite(lon)) return;
        
        validCoords++;
        
        const cellX = Math.floor((lon - sw.lng) / cellWidth);
        const cellY = Math.floor((lat - sw.lat) / cellHeight);
        const cellIndex = cellY * gridSize + cellX;
        
        if (cellX >= 0 && cellX < gridSize && cellY >= 0 && cellY < gridSize) {
          pathCells.add(cellIndex);
        }
      });
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–æ–ø—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É –Ω–µ—ë –µ—Å—Ç—å –≤–∞–ª–∏–¥–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
      if (validCoords > 0 && pathCells.size > 0) {
        validPathsCount++;
        pathCells.forEach(cellIndex => {
          if (!cellPaths.has(cellIndex)) {
            cellPaths.set(cellIndex, []);
          }
          cellPaths.get(cellIndex).push(pathIndex);
        });
      }
    });
    
    console.log(`–í–∞–ª–∏–¥–Ω—ã—Ö —Ç—Ä–æ–ø –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: ${validPathsCount} –∏–∑ ${pathsData.length}`);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    if (validPathsCount === 0) {
      console.log('–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç—Ä–æ–ø...');
      pathsData.slice(0, 5).forEach((path, i) => {
        console.log(`–¢—Ä–æ–ø–∞ ${i}:`, {
          hasGeometry: !!path.geometry,
          geometryType: typeof path.geometry,
          isArray: Array.isArray(path.geometry),
          length: path.geometry?.length,
          firstCoord: path.geometry?.[0],
          firstCoordType: typeof path.geometry?.[0]
        });
      });
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —è—á–µ–π–∫–∏ —Å —Ç—Ä–æ–ø–∞–º–∏
    const cellsWithPaths = Array.from(cellPaths.entries())
      .map(([cellIndex, pathIndices]) => ({ cellIndex, pathIndices, pathsCount: pathIndices.length }))
      .sort((a, b) => b.pathsCount - a.pathsCount);
    
    console.log(`–Ø—á–µ–µ–∫ —Å —Ç—Ä–æ–ø–∞–º–∏: ${cellsWithPaths.length} –∏–∑ ${gridSize * gridSize}`);
    statusCallback(`–ù–∞–π–¥–µ–Ω–æ ${cellsWithPaths.length} —è—á–µ–µ–∫ —Å —Ç—Ä–æ–ø–∞–º–∏`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —è—á–µ–π–∫–∞–º
    if (cellsWithPaths.length > 0) {
      console.log('–¢–æ–ø-5 —è—á–µ–µ–∫ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç—Ä–æ–ø:', cellsWithPaths.slice(0, 5));
    }
    
    if (cellsWithPaths.length === 0) {
      statusCallback('‚ö†Ô∏è –°–µ—Ç–æ—á–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è...');
      console.log('Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º');
      
      // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –±–µ–∑ —Å–µ—Ç–∫–∏
      return generatePointsSmart(pathsData, selectedBounds, startPoint, count, percent, 
                                 statusCallback, buttonCallback, cancelCallback, 
                                 forbiddenPolygons, graph, startNodeIdx, adaptiveMinDist);
    }
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ—á–µ–∫ –ø–æ —è—á–µ–π–∫–∞–º
    const pointsPerCell = Math.ceil(count / cellsWithPaths.length);
    const cellUsage = new Map();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —è—á–µ–µ–∫
    cellsWithPaths.forEach(cell => {
      cellUsage.set(cell.cellIndex, 0);
    });
    
    statusCallback(`–¶–µ–ª—å: ${pointsPerCell} —Ç–æ—á–µ–∫ –Ω–∞ —è—á–µ–π–∫—É (–≤—Å–µ–≥–æ —è—á–µ–µ–∫: ${cellsWithPaths.length})`);
    
    // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    let attempts = 0;
    const maxAttempts = count * 50;
    
    while (generatedPoints.length < count && attempts < maxAttempts) {
      if (cancelGeneration) {
        statusCallback('–û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.');
        buttonCallback(false);
        cancelCallback(false);
        return;
      }

      attempts++;

      // –í—ã–±–∏—Ä–∞–µ–º —è—á–µ–π–∫—É —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ—á–µ–∫
      const availableCells = cellsWithPaths.filter(cell => 
        cellUsage.get(cell.cellIndex) < pointsPerCell * 2 // –ú–∞–∫—Å–∏–º—É–º –≤ 2 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ
      );
      
      if (availableCells.length === 0) {
        // –ï—Å–ª–∏ –≤—Å–µ —è—á–µ–π–∫–∏ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç
        const minUsage = Math.min(...Array.from(cellUsage.values()));
        cellsWithPaths.forEach(cell => {
          if (cellUsage.get(cell.cellIndex) === minUsage) {
            cellUsage.set(cell.cellIndex, minUsage + 1);
          }
        });
        continue;
      }
      
      // –í—ã–±–∏—Ä–∞–µ–º —è—á–µ–π–∫—É —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
      availableCells.sort((a, b) => cellUsage.get(a.cellIndex) - cellUsage.get(b.cellIndex));
      const selectedCell = availableCells[0];
      
      // –í—ã—á–∏—Å–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —è—á–µ–π–∫–∏
      const cellX = selectedCell.cellIndex % gridSize;
      const cellY = Math.floor(selectedCell.cellIndex / gridSize);
      const cellSW = {
        lat: sw.lat + cellY * cellHeight,
        lng: sw.lng + cellX * cellWidth
      };
      const cellNE = {
        lat: cellSW.lat + cellHeight,
        lng: cellSW.lng + cellWidth
      };

      // –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–æ–ø—ã –≤ —ç—Ç–æ–π —è—á–µ–π–∫–µ
      const cellPathIndices = cellPaths.get(selectedCell.cellIndex) || [];
      
      // –ü—ã—Ç–∞–µ–º—Å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–æ—á–∫—É –≤ —ç—Ç–æ–π —è—á–µ–π–∫–µ
      let pointGenerated = false;
      for (let pathAttempt = 0; pathAttempt < Math.min(cellPathIndices.length, 20); pathAttempt++) {
        const randomPathIndex = cellPathIndices[Math.floor(Math.random() * cellPathIndices.length)];
        const path = pathsData[randomPathIndex];
        
        if (!path || !path.geometry || !Array.isArray(path.geometry) || path.geometry.length < 2) {
          continue;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ç–æ—á–∫—É –Ω–∞ —ç—Ç–æ–π —Ç—Ä–æ–ø–µ
        const [lat, lon] = getRandomPointOnLine(path.geometry);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ—á–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —è—á–µ–π–∫–µ
        if (lat < cellSW.lat || lat > cellNE.lat || lon < cellSW.lng || lon > cellNE.lng) {
          continue;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã
        if (lat < sw.lat || lat > ne.lat || lon < sw.lng || lon > ne.lng) continue;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –∑–æ–Ω—ã
        let inForbiddenArea = false;
        for (const poly of forbiddenPolygons) {
          if (pointInPolygon(lat, lon, poly)) {
            inForbiddenArea = true;
            break;
          }
        }
        if (inForbiddenArea) {
          addFailedAttemptMarker(lat, lon);
          continue;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
        let tooClose = false;
        for (const existingPoint of generatedPoints) {
          if (haversine(lat, lon, existingPoint[0], existingPoint[1]) < adaptiveMinDist) {
            tooClose = true;
            break;
          }
        }
        if (haversine(lat, lon, startPoint.lat, startPoint.lng) < adaptiveMinDist) {
          tooClose = true;
        }
        if (tooClose) {
          addFailedAttemptMarker(lat, lon);
          continue;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–∏–º–æ—Å—Ç—å
        const pointNodeIdx = findNearestNodeIdx(lat, lon, graph.nodes);
        if (pointNodeIdx === -1 || !isReachable(graph, startNodeIdx, pointNodeIdx)) {
          addFailedAttemptMarker(lat, lon);
          continue;
        }

        // –¢–æ—á–∫–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç!
        generatedPoints.push([lat, lon]);
        cellUsage.set(selectedCell.cellIndex, cellUsage.get(selectedCell.cellIndex) + 1);
        addPointMarker(lat, lon, generatedPoints.length);
        pointGenerated = true;
        
        statusCallback(`‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${generatedPoints.length}/${count} —Ç–æ—á–µ–∫ (—è—á–µ–π–∫–∞ ${selectedCell.cellIndex}/${cellsWithPaths.length}, –ø–æ–ø—ã—Ç–æ–∫: ${attempts})`);
        await new Promise(resolve => setTimeout(resolve, 10));
        break;
      }
      
      if (!pointGenerated) {
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–æ—á–∫—É –≤ —ç—Ç–æ–π —è—á–µ–π–∫–µ, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á
        cellUsage.set(selectedCell.cellIndex, cellUsage.get(selectedCell.cellIndex) + 1);
      }
    }

    // –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    if (generatedPoints.length === count) {
      statusCallback(`üéØ –£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${count} —Ç–æ—á–µ–∫ –∑–∞ ${attempts} –ø–æ–ø—ã—Ç–æ–∫!`);
    } else {
      statusCallback(`‚ö†Ô∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${generatedPoints.length} –∏–∑ ${count} —Ç–æ—á–µ–∫ –∑–∞ ${attempts} –ø–æ–ø—ã—Ç–æ–∫.`);
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ —è—á–µ–π–∫–∞–º
    const cellStats = Array.from(cellUsage.entries())
      .map(([cellIndex, usage]) => ({ cellIndex, usage }))
      .sort((a, b) => b.usage - a.usage);
    
    console.log('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ—á–µ–∫ –ø–æ —è—á–µ–π–∫–∞–º:', cellStats.slice(0, 10));

    console.log(`–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Ç–æ—á–µ–∫: ${generatedPoints.length}`);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ—á–µ–∫ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    updateTargetPointsList();

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ—á–µ–∫:', error);
    statusCallback(`–û—à–∏–±–∫–∞: ${error.message}`);
  } finally {
    buttonCallback(false); // –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    cancelCallback(false); // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ–Ω—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
export function cancelPointGeneration() {
  cancelGeneration = true;
}

// –£–ü–†–û–©–ï–ù–ù–´–ô –∞–ª–≥–æ—Ä–∏—Ç–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ - —Ñ–æ–∫—É—Å –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∞ –Ω–µ –Ω–∞ –∏–¥–µ–∞–ª—å–Ω–æ—Å—Ç—å
async function generatePointsSmart(pathsData, selectedBounds, startPoint, count, percent, 
                                  statusCallback, buttonCallback, cancelCallback, 
                                  forbiddenPolygons, graph, startNodeIdx, adaptiveMinDist) {
  const sw = selectedBounds.getSouthWest();
  const ne = selectedBounds.getNorthEast();
  
  // –£–ø—Ä–æ—â–∞–µ–º: –Ω–∞—á–∏–Ω–∞–µ–º —Å —Ä–∞–∑—É–º–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –∏ –±—ã—Å—Ç—Ä–æ –µ–≥–æ —Å–Ω–∏–∂–∞–µ–º
  let currentMinDist = Math.min(adaptiveMinDist, 120); // –ú–∞–∫—Å–∏–º—É–º 120–º
  const minFloor = 60; // –ú–∏–Ω–∏–º—É–º 60–º
  
  const generatedPoints = [];
  let attempts = 0;
  const maxAttempts = count * 200;
  
  statusCallback(`–ì–µ–Ω–µ—Ä–∞—Ü–∏—è ${count} —Ç–æ—á–µ–∫ —É–º–Ω—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º —Å —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º...`);
  
  console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', {
    pathsDataLength: pathsData.length,
    firstPath: pathsData[0],
    firstPathGeometry: pathsData[0]?.geometry,
    firstPathGeometryLength: pathsData[0]?.geometry?.length,
    firstCoord: pathsData[0]?.geometry?.[0],
    selectedBounds: { sw: { lat: sw.lat, lng: sw.lng }, ne: { lat: ne.lat, lng: ne.lng } },
    startPoint: { lat: startPoint.lat, lng: startPoint.lng }
  });
  
  // –°–æ–∑–¥–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é —Å–µ—Ç–∫—É –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
  const virtualGridSize = Math.ceil(Math.sqrt(count * 2));
  const gridCellWidth = (ne.lng - sw.lng) / virtualGridSize;
  const gridCellHeight = (ne.lat - sw.lat) / virtualGridSize;
  
  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö —è—á–µ–µ–∫
  const virtualCellUsage = new Map();
  for (let i = 0; i < virtualGridSize * virtualGridSize; i++) {
    virtualCellUsage.set(i, 0);
  }
  
  // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ç–æ—á–µ–∫ –Ω–∞ —Ç—Ä–æ–ø–∞—Ö (–º—è–≥–∫–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è)
  const potentialPoints = [];
  let totalCoordsChecked = 0;
  let validCoordsFound = 0;
  
  pathsData.forEach((path, pathIndex) => {
    if (!path.geometry || !Array.isArray(path.geometry)) return;
    
    // –ë–µ—Ä–µ–º –∫–∞–∂–¥—É—é 3-—é —Ç–æ—á–∫—É –Ω–∞ —Ç—Ä–æ–ø–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è
    for (let i = 0; i < path.geometry.length; i += 3) {
      totalCoordsChecked++;
      const coord = path.geometry[i];
      
      let lat, lon;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
      if (Array.isArray(coord) && coord.length >= 2) {
        // –§–æ—Ä–º–∞—Ç –º–∞—Å—Å–∏–≤–∞ [lat, lon]
        lat = coord[0];
        lon = coord[1];
      } else if (coord && typeof coord === 'object' && typeof coord.lat === 'number' && typeof coord.lon === 'number') {
        // –§–æ—Ä–º–∞—Ç –æ–±—ä–µ–∫—Ç–∞ {lat, lon}
        lat = coord.lat;
        lon = coord.lon;
      } else {
        continue;
      }
      
      if (typeof lat !== 'number' || typeof lon !== 'number' || 
          isNaN(lat) || isNaN(lon) || !isFinite(lat) || !isFinite(lon)) continue;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ—á–∫–∞ –≤ –æ–±–ª–∞—Å—Ç–∏ (–º—è–≥–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
      if (lat < sw.lat || lat > ne.lat || lon < sw.lng || lon > ne.lng) continue;
      
      validCoordsFound++;
      
      // –ù–ï –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –∑–æ–Ω—ã –Ω–∞ —ç—Ç–∞–ø–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
      // –≠—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –ø–æ–∑–∂–µ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ —Ç–æ—á–µ–∫
      
      // –í—ã—á–∏—Å–ª—è–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é —è—á–µ–π–∫—É
      const cellX = Math.floor((lon - sw.lng) / gridCellWidth);
      const cellY = Math.floor((lat - sw.lat) / gridCellHeight);
      const cellIndex = cellY * virtualGridSize + cellX;
      
      potentialPoints.push({
        lat, lon, 
        cellIndex,
        pathIndex
      });
    }
  });
  
  console.log(`–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: ${totalCoordsChecked}, –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö: ${validCoordsFound}`);
  
  console.log(`–ù–∞–π–¥–µ–Ω–æ ${potentialPoints.length} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫ –Ω–∞ —Ç—Ä–æ–ø–∞—Ö`);
  console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫:', {
    totalPaths: pathsData.length,
    totalCoordsChecked,
    validCoordsFound,
    potentialPointsLength: potentialPoints.length,
    samplePoint: potentialPoints[0],
    startPoint: { lat: startPoint.lat, lng: startPoint.lng }
  });

  console.log(`–ù–∞–π–¥–µ–Ω–æ ${potentialPoints.length} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫ –Ω–∞ —Ç—Ä–æ–ø–∞—Ö`);
  statusCallback(`–ù–∞–π–¥–µ–Ω–æ ${potentialPoints.length} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫, –Ω–∞—á–∏–Ω–∞–µ–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ...`);
  
  if (potentialPoints.length === 0) {
    statusCallback('‚ö†Ô∏è –£–º–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –Ω–µ –Ω–∞—à–µ–ª —Ç–æ—á–µ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º...');
    console.log('Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–µ–π—à–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏');
    
    // –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback: –ø—Ä–æ—Å—Ç–µ–π—à–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º
    return generatePointsUltraSimple(pathsData, selectedBounds, startPoint, count, percent, 
                                     statusCallback, buttonCallback, cancelCallback, 
                                     forbiddenPolygons, graph, startNodeIdx, adaptiveMinDist);
  }
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ—á–∫–∏ –ø–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º —è—á–µ–π–∫–∞–º –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
  const pointsByCell = new Map();
  potentialPoints.forEach(point => {
    if (!pointsByCell.has(point.cellIndex)) {
      pointsByCell.set(point.cellIndex, []);
    }
    pointsByCell.get(point.cellIndex).push(point);
  });
  
  console.log(`–Ø—á–µ–µ–∫ —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Ç–æ—á–∫–∞–º–∏: ${pointsByCell.size}`);
  
  // –ü–æ–ª—É—á–∞–µ–º —è—á–µ–π–∫–∏ —Å —Ç–æ—á–∫–∞–º–∏
  const cellsWithPoints = Array.from(pointsByCell.entries())
    .map(([cellIndex, points]) => ({ cellIndex, points, count: points.length }))
    .sort((a, b) => b.count - a.count);
  
  console.log(`–Ø—á–µ–µ–∫ —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Ç–æ—á–∫–∞–º–∏: ${cellsWithPoints.length}`);
  
  // –ü–æ–ª—É—á–∞–µ–º —è—á–µ–π–∫–∏ —Å —Ç–æ—á–∫–∞–º–∏ –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
  const sortedCells = Array.from(pointsByCell.entries())
    .map(([cellIndex, points]) => ({ cellIndex, points, count: points.length }))
    .sort((a, b) => a.count - b.count); // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é!
  
  console.log(`–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —è—á–µ–µ–∫ (–º–µ–Ω—å—à–µ —Ç–æ—á–µ–∫ = –≤—ã—à–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç): ${sortedCells.length} —è—á–µ–µ–∫`);
  
  console.log(`–ü—Ä–æ—Å—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è: –Ω—É–∂–Ω–æ ${count} —Ç–æ—á–µ–∫, –Ω–∞—á–∞–ª—å–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è ${currentMinDist}–º`);
  
  // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–æ—á–∫–∏ –≤ –æ–¥–∏–Ω –º–∞—Å—Å–∏–≤ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
  const allPoints = [];
  potentialPoints.forEach(point => {
    allPoints.push(point);
  });
  
  console.log(`–í—Å–µ–≥–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫: ${allPoints.length}`);
  
  while (pointsGenerated < count && attempts < maxAttempts && allPoints.length > 0) {
    if (cancelGeneration) {
      statusCallback('–û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.');
      buttonCallback(false);
      cancelCallback(false);
      return;
    }

    attempts++;
    
    // –ö–∞–∂–¥—ã–µ 50 –ø–æ–ø—ã—Ç–æ–∫ —Å–Ω–∏–∂–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
    if (attempts % 50 === 0 && attempts > 0) {
      const oldDist = currentMinDist;
      currentMinDist = Math.max(minFloor, currentMinDist * 0.9);
      console.log(`‚öôÔ∏è –°–Ω–∏–∂–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–∏—Å—Ç–∞–Ω—Ü–∏—é: ${oldDist.toFixed(1)}–º ‚Üí ${currentMinDist.toFixed(1)}–º (–ø–æ–ø—ã—Ç–∫–∞ ${attempts})`);
    }
    
    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ç–æ—á–∫—É
    const randomIndex = Math.floor(Math.random() * allPoints.length);
    const point = allPoints[randomIndex];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
    let tooClose = false;
    for (const existingPoint of generatedPoints) {
      const distance = haversine(point.lat, point.lon, existingPoint[0], existingPoint[1]);
      if (distance < currentMinDist) {
        tooClose = true;
        break;
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Å—Ç–∞—Ä—Ç–∞
    if (!tooClose) {
      const distanceToStart = haversine(point.lat, point.lon, startPoint.lat, startPoint.lng);
      if (distanceToStart < currentMinDist) {
        tooClose = true;
      }
    }
    
    if (tooClose) {
      // –£–¥–∞–ª—è–µ–º –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â—É—é —Ç–æ—á–∫—É –∏–∑ –º–∞—Å—Å–∏–≤–∞
      allPoints.splice(randomIndex, 1);
      continue;
    }
    
    // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–∏–º–æ—Å—Ç–∏ (—Ç–æ–ª—å–∫–æ –∫–∞–∂–¥—ã–µ 10 –ø–æ–ø—ã—Ç–æ–∫ –ø–æ—Å–ª–µ 100-–π)
    if (attempts > 100 && attempts % 10 !== 0) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç–∏–∂–∏–º–æ—Å—Ç–∏ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
    } else {
      const pointNodeIdx = findNearestNodeIdx(point.lat, point.lon, graph.nodes);
      if (pointNodeIdx === -1 || !isReachable(graph, startNodeIdx, pointNodeIdx)) {
        allPoints.splice(randomIndex, 1);
        continue;
      }
    }
    
    // –¢–æ—á–∫–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç!
    generatedPoints.push([point.lat, point.lon]);
    allPoints.splice(randomIndex, 1);
    pointsGenerated++;
    
    addPointMarker(point.lat, point.lon, generatedPoints.length);
    console.log(`‚úÖ –†–∞–∑–º–µ—â–µ–Ω–∞ —Ç–æ—á–∫–∞ ${pointsGenerated}: (${point.lat.toFixed(6)}, ${point.lon.toFixed(6)}) –∑–∞ ${attempts} –ø–æ–ø—ã—Ç–æ–∫`);
    statusCallback(`‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${pointsGenerated}/${count} —Ç–æ—á–µ–∫ (–ø–æ–ø—ã—Ç–æ–∫: ${attempts})`);
    
    if (pointsGenerated % 2 === 0) {
      await new Promise(resolve => setTimeout(resolve, 10));
    }
  }

  // –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
  if (generatedPoints.length === count) {
    statusCallback(`üéØ –£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${count} —Ç–æ—á–µ–∫ –∑–∞ ${attempts} –ø–æ–ø—ã—Ç–æ–∫!`);
  } else {
    statusCallback(`‚ö†Ô∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${generatedPoints.length} –∏–∑ ${count} —Ç–æ—á–µ–∫ –∑–∞ ${attempts} –ø–æ–ø—ã—Ç–æ–∫.`);
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ—á–µ–∫ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  updateTargetPointsList();
}

// –ü—Ä–æ—Å—Ç–µ–π—à–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–π fallback)
async function generatePointsUltraSimple(pathsData, selectedBounds, startPoint, count, percent, 
                                        statusCallback, buttonCallback, cancelCallback, 
                                        forbiddenPolygons, graph, startNodeIdx, adaptiveMinDist) {
  const sw = selectedBounds.getSouthWest();
  const ne = selectedBounds.getNorthEast();
  
  const generatedPoints = [];
  let attempts = 0;
  const maxAttempts = count * 300; // –ë–æ–ª—å—à–µ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
  
  statusCallback(`–ì–µ–Ω–µ—Ä–∞—Ü–∏—è ${count} —Ç–æ—á–µ–∫ –ø—Ä–æ—Å—Ç–µ–π—à–∏–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º (–º–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫: ${maxAttempts})...`);
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
  console.log('–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç—Ä–æ–ø –¥–ª—è –ø—Ä–æ—Å—Ç–µ–π—à–µ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞:');
  console.log(`–í—Å–µ–≥–æ —Ç—Ä–æ–ø: ${pathsData.length}`);
  const validPaths = pathsData.filter(path => path.geometry && Array.isArray(path.geometry) && path.geometry.length >= 2);
  console.log(`–¢—Ä–æ–ø —Å –≤–∞–ª–∏–¥–Ω–æ–π –≥–µ–æ–º–µ—Ç—Ä–∏–µ–π: ${validPaths.length}`);
  
  if (validPaths.length === 0) {
    statusCallback('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç—Ä–æ–ø —Å –≤–∞–ª–∏–¥–Ω–æ–π –≥–µ–æ–º–µ—Ç—Ä–∏–µ–π!');
    buttonCallback(false);
    cancelCallback(false);
    return;
  }
  
  while (generatedPoints.length < count && attempts < maxAttempts) {
    if (cancelGeneration) {
      statusCallback('–û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.');
      buttonCallback(false);
      cancelCallback(false);
      return;
    }

    attempts++;

    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ç—Ä–æ–ø—É –∏–∑ –≤–∞–ª–∏–¥–Ω—ã—Ö
    const randomPath = validPaths[Math.floor(Math.random() * validPaths.length)];
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ç–æ—á–∫—É –Ω–∞ —ç—Ç–æ–π —Ç—Ä–æ–ø–µ
    const [lat, lon] = getRandomPointOnLine(randomPath.geometry);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ—á–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
    if (lat < sw.lat || lat > ne.lat || lon < sw.lng || lon > ne.lng) continue;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –∑–æ–Ω—ã
    let inForbiddenArea = false;
    for (const poly of forbiddenPolygons) {
      if (pointInPolygon(lat, lon, poly)) {
        inForbiddenArea = true;
        break;
      }
    }
    if (inForbiddenArea) {
      addFailedAttemptMarker(lat, lon);
      continue;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
    let tooClose = false;
    for (const existingPoint of generatedPoints) {
      if (haversine(lat, lon, existingPoint[0], existingPoint[1]) < adaptiveMinDist) {
        tooClose = true;
        break;
      }
    }
    if (haversine(lat, lon, startPoint.lat, startPoint.lng) < adaptiveMinDist) {
      tooClose = true;
    }
    if (tooClose) {
      addFailedAttemptMarker(lat, lon);
      continue;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–∏–º–æ—Å—Ç—å
    const pointNodeIdx = findNearestNodeIdx(lat, lon, graph.nodes);
    if (pointNodeIdx === -1 || !isReachable(graph, startNodeIdx, pointNodeIdx)) {
      addFailedAttemptMarker(lat, lon);
      continue;
    }

    // –¢–æ—á–∫–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç!
    generatedPoints.push([lat, lon]);
    addPointMarker(lat, lon, generatedPoints.length);

    statusCallback(`‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${generatedPoints.length}/${count} —Ç–æ—á–µ–∫ (–ø–æ–ø—ã—Ç–æ–∫: ${attempts}/${maxAttempts})`);
    await new Promise(resolve => setTimeout(resolve, 10));
  }

  // –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
  if (generatedPoints.length === count) {
    statusCallback(`üéØ –£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${count} —Ç–æ—á–µ–∫ –∑–∞ ${attempts} –ø–æ–ø—ã—Ç–æ–∫!`);
  } else {
    statusCallback(`‚ö†Ô∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${generatedPoints.length} –∏–∑ ${count} —Ç–æ—á–µ–∫ –∑–∞ ${attempts} –ø–æ–ø—ã—Ç–æ–∫.`);
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ—á–µ–∫ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  updateTargetPointsList();
}
