/**
 * –ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ —Å–≤—è–∑—ã–≤–∞–µ—Ç –∏—Ö –º–µ–∂–¥—É —Å–æ–±–æ–π
 */

console.log('üöÄ app.js –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...');

import { initMap, map, drawnItems, pointMarkers, getSelectedBounds, getStartPoint, updateSelectedBounds, updateStartPointPosition, clearPointMarkers } from './modules/mapModule.js';
import { initNavigation, updateTargetPointsList, resetCompletedPoints } from './modules/navigation.js';
import { generatePoints, cancelPointGeneration, downloadGPX } from './modules/pointGeneration.js';
import './modules/audioModuleAdvanced.js'; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –∞—É–¥–∏–æ –º–æ–¥—É–ª—è
import { saveRoute, getRouteById, getRoutesList, buildShareUrl } from './modules/storageAPI.js';
import { initSequenceUI, generateAndDisplaySequence } from './modules/sequenceUI.js';
import { resetSequence } from './modules/routeSequence.js';
import { initFullscreenNavigation } from './modules/fullscreenNavigation.js';
import { initMediaSession } from './modules/mediaSessionManager.js';
import { clearMapDataCache } from './modules/optimizedOverpassAPI.js';
import { initUI, setStep as setUIStep, addApiLog, updateInfoPanel, showInfoPanel } from './modules/uiController.js';

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã (–±—É–¥—É—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≤ initApp)
let pointsInput, zoomInBtn, zoomOutBtn, gpsBtn;
let routesModal, routesModalClose, routesList, routesListEmpty;
let shareBtn, sequenceLink, startNavBtn;
let lastSavedRouteId = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
export function initApp() {
  console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è TrailSpot...');
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DOM —ç–ª–µ–º–µ–Ω—Ç—ã
  pointsInput = document.getElementById('pointsCount');
  zoomInBtn = document.getElementById('zoomInBtn');
  zoomOutBtn = document.getElementById('zoomOutBtn');
  gpsBtn = document.getElementById('gpsBtn');
  shareBtn = document.getElementById('shareBtn');
  routesModal = document.getElementById('routesModal');
  routesModalClose = document.getElementById('routesModalClose');
  routesList = document.getElementById('routesList');
  routesListEmpty = document.getElementById('routesListEmpty');
  sequenceLink = document.getElementById('sequenceLink');
  startNavBtn = document.getElementById('startNavBtn');
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
  initMap();
  initUI(); // –ù–æ–≤—ã–π UI –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
  initNavigation();
  initSequenceUI();
  initFullscreenNavigation();
  initMediaSession();
  
  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  setupEventHandlers();

  // –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ URL (?routeId=...)
  bootstrapFromUrl();
  
  // –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ (–≤—Ä–µ–º–µ–Ω–Ω–æ, –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  updateGlobalVars();
  setInterval(updateGlobalVars, 1000); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
  
  addApiLog('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ');
  console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventHandlers() {
  // Zoom –∫–Ω–æ–ø–∫–∏
  if (zoomInBtn) {
    zoomInBtn.addEventListener('click', () => {
      if (map) map.zoomIn();
    });
  }
  
  if (zoomOutBtn) {
    zoomOutBtn.addEventListener('click', () => {
      if (map) map.zoomOut();
    });
  }
  
  // GPS –∫–Ω–æ–ø–∫–∞
  if (gpsBtn) {
    gpsBtn.addEventListener('click', () => {
      if ('geolocation' in navigator) {
        addApiLog('–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏...');
        navigator.geolocation.getCurrentPosition(
          (position) => {
            const { latitude, longitude } = position.coords;
            if (map) {
              map.setView([latitude, longitude], 16);
              addApiLog(`–ü–æ–∑–∏—Ü–∏—è: ${latitude.toFixed(5)}, ${longitude.toFixed(5)}`);
            }
          },
          (error) => {
            addApiLog('‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏');
            console.error('Geolocation error:', error);
          }
        );
      } else {
        addApiLog('‚ùå –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
      }
    });
  }
  
  // –ö–Ω–æ–ø–∫–∞ "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è"
  if (shareBtn) {
    shareBtn.addEventListener('click', handleShareRoute);
  }
  
  // –ö–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é"
  if (startNavBtn) {
    startNavBtn.addEventListener('click', () => {
      import('./modules/navigation.js').then(nav => {
        // –ó–∞–ø—É—Å–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        addApiLog('üéØ –ó–∞–ø—É—Å–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏...');
      });
    });
  }
  
  // –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
  if (sequenceLink) {
    sequenceLink.addEventListener('click', (e) => {
      e.preventDefault();
      const sequenceModal = document.getElementById('sequenceModal');
      if (sequenceModal) {
        sequenceModal.style.display = 'flex';
      }
    });
  }

  // –ú–æ–¥–∞–ª–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤
  if (routesModalClose) {
    routesModalClose.addEventListener('click', closeRoutesModal);
  }
  if (routesModal) {
    routesModal.addEventListener('click', (e) => { 
      if (e.target === routesModal) closeRoutesModal(); 
    });
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
async function handleGenerateClick() {
  const count = parseInt(pointsInput.value, 10);
  
  // –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const difficultyLevelSelect = document.getElementById('difficultyLevel');
  const difficultyLevel = difficultyLevelSelect ? parseInt(difficultyLevelSelect.value) : 2;
  
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏
  resetSequence();
  resetCompletedPoints();
  
  // –û—á–∏—â–∞–µ–º –∫—ç—à –∫–∞—Ä—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö
  clearMapDataCache();
  
  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ mapModule
  const selectedBounds = getSelectedBounds();
  const startPoint = getStartPoint();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±–ª–∞—Å—Ç—å –≤—ã–±—Ä–∞–Ω–∞
  if (!selectedBounds || !selectedBounds.south || !selectedBounds.west || !selectedBounds.north || !selectedBounds.east) {
    updateStatus('‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ, –Ω–∞—Ä–∏—Å–æ–≤–∞–≤ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫');
    return;
  }
  
  await generatePoints(
    selectedBounds,
    startPoint,
    count,
    difficultyLevel,
    updateStatus,
    toggleGenerateButton,
    toggleCancelButton
  );
  
  // –ü–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ—á–µ–∫ —Å–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
  if (pointMarkers && pointMarkers.length > 0) {
    setTimeout(async () => {
      await generateAndDisplaySequence();
      updateTargetPointsList(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ—á–µ–∫ —Å –Ω–æ–≤–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
    }, 500); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Ç–æ—á–µ–∫
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ –æ—Ç–º–µ–Ω—ã
function handleCancelClick() {
  cancelPointGeneration();
  updateStatus('–û—Ç–º–µ–Ω–∞...');
  console.log('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.');
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è GPX
function handleDownloadGPX() {
  downloadGPX();
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –≤ backend
async function handleSaveRoute() {
  try {
    const selectedBounds = getSelectedBounds();
    const startPoint = getStartPoint();
    if (!selectedBounds || !startPoint) {
      updateStatus('–ù—É–∂–Ω—ã –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –∏ —Ç–æ—á–∫–∞ —Å—Ç–∞—Ä—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
      return;
    }
    if (!pointMarkers || pointMarkers.length === 0) {
      updateStatus('–ù–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
      return;
    }

    const points = pointMarkers.map((m, idx) => {
      const ll = m.getLatLng();
      return { lat: ll.lat, lon: ll.lng, name: String(idx + 1) };
    });

    const name = prompt('–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞:', `–ú–∞—Ä—à—Ä—É—Ç ${new Date().toLocaleString()}`) || '–ú–∞—Ä—à—Ä—É—Ç';
    const description = '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ—á–µ–∫';

    const boundsPayload = {
      south: selectedBounds.getSouth(),
      west: selectedBounds.getWest(),
      north: selectedBounds.getNorth(),
      east: selectedBounds.getEast()
    };

    const route = await saveRoute({ name, description, points, startPoint, bounds: boundsPayload });
    lastSavedRouteId = route.id;
    updateStatus(`–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ (ID: ${route.id})`);
  } catch (e) {
    console.error(e);
    updateStatus('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞');
  }
}

// ===== –ú–û–î–ê–õ–ö–ê –ú–ê–†–®–†–£–¢–û–í =====
function openRoutesModal() {
  renderRoutesList();
  routesModal.style.display = 'flex';
}

function closeRoutesModal() {
  routesModal.style.display = 'none';
}

async function renderRoutesList() {
  try {
    routesList.innerHTML = '';
    const list = await getRoutesList();
    if (!Array.isArray(list) || list.length === 0) {
      routesListEmpty.style.display = 'block';
      return;
    }
    routesListEmpty.style.display = 'none';

    list.forEach((r) => {
      const item = document.createElement('div');
      item.style.border = '1px solid #eee';
      item.style.borderRadius = '8px';
      item.style.padding = '10px';
      item.style.display = 'grid';
      item.style.gap = '6px';

      const title = document.createElement('div');
      title.style.fontWeight = '600';
      title.textContent = r.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';

      const meta = document.createElement('div');
      meta.style.color = '#777';
      meta.style.fontSize = '12px';
      meta.textContent = r.id;

      const actions = document.createElement('div');
      actions.style.display = 'grid';
      actions.style.gridTemplateColumns = '1fr 1fr';
      actions.style.gap = '6px';

      const loadBtn = document.createElement('button');
      loadBtn.textContent = '–ó–∞–≥—Ä—É–∑–∏—Ç—å';
      loadBtn.style.margin = '0';
      loadBtn.addEventListener('click', async () => {
        const route = await getRouteById(r.id);
        if (!route) { updateStatus('–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'); return; }
        renderRouteOnMap(route);
        lastSavedRouteId = route.id;
        updateStatus(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ (ID: ${route.id})`);
        closeRoutesModal();
      });

      const shareBtn = document.createElement('button');
      shareBtn.textContent = '–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É';
      shareBtn.style.margin = '0';
      shareBtn.addEventListener('click', async () => {
        const url = buildShareUrl(r.id);
        try {
          await navigator.clipboard.writeText(url);
          updateStatus('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞');
        } catch (_) {
          updateStatus('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É');
        }
      });

      actions.appendChild(loadBtn);
      actions.appendChild(shareBtn);

      item.appendChild(title);
      item.appendChild(meta);
      item.appendChild(actions);
      routesList.appendChild(item);
    });
  } catch (e) {
    console.error(e);
    routesListEmpty.style.display = 'block';
  }
}

// –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π
async function handleShareRoute() {
  try {
    let routeId = lastSavedRouteId;
    if (!routeId) {
      // –ï—Å–ª–∏ –µ—â—ë –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏–º –±—ã—Å—Ç—Ä–æ –±–µ–∑ –≤–æ–ø—Ä–æ—Å–æ–≤
      await handleSaveRoute();
      routeId = lastSavedRouteId;
    }
    if (!routeId) {
      updateStatus('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Å—Å—ã–ª–∫—É');
      return;
    }
    const url = buildShareUrl(routeId);
    await navigator.clipboard.writeText(url);
    updateStatus('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
    alert('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë –¥—Ä—É–≥—É.');
  } catch (e) {
    console.error(e);
    updateStatus('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Å—Å—ã–ª–∫–∏');
  }
}

// –û—Ç—Ä–∏—Å–æ–≤–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç –Ω–∞ –∫–∞—Ä—Ç–µ –ø–æ –¥–∞–Ω–Ω—ã–º backend
function renderRouteOnMap(route) {
  try {
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º bounds
    if (route.bounds && typeof L !== 'undefined') {
      const b = route.bounds;
      const bounds = L.latLngBounds([b.south, b.west], [b.north, b.east]);
      // –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
      drawnItems.getLayers().forEach(l => { if (l instanceof L.Rectangle) drawnItems.removeLayer(l); });
      const rect = L.rectangle(bounds, { color: '#3388ff', weight: 2 });
      drawnItems.addLayer(rect);
      updateSelectedBounds(bounds);
      if (map) map.fitBounds(bounds, { padding: [20, 20] });
    }

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—á–∫—É —Å—Ç–∞—Ä—Ç–∞
    if (route.startPoint && typeof route.startPoint.lat === 'number' && typeof route.startPoint.lon === 'number') {
      updateStartPointPosition(route.startPoint.lat, route.startPoint.lon);
    }

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏
    resetSequence();
    resetCompletedPoints();

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—á–∫–∏
    clearPointMarkers();
    if (Array.isArray(route.points)) {
      route.points.forEach((p, idx) => {
        if (typeof p.lat === 'number' && typeof p.lon === 'number') {
          const marker = L.marker([p.lat, p.lon], {
            icon: L.divIcon({
              className: 'custom-marker',
              html: `<div style="background: green; color: white; border-radius: 50%; width: 30px; height: 30px; display: flex; align-items: center; justify-content: center; font-weight: bold; border: 2px solid white;">${idx + 1}</div>`,
              iconSize: [30, 30],
              iconAnchor: [15, 15]
            })
          }).addTo(map);
          pointMarkers.push(marker);
        }
      });
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
      setTimeout(() => {
        generateAndDisplaySequence();
        updateTargetPointsList(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ—á–µ–∫
      }, 500);
    }
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞:', e);
  }
}

// –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ URL
async function bootstrapFromUrl() {
  try {
    const params = new URLSearchParams(window.location.search);
    const routeId = params.get('routeId');
    if (routeId) {
      const route = await getRouteById(routeId);
      if (route) {
        renderRouteOnMap(route);
        lastSavedRouteId = route.id;
        updateStatus(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ —Å—Å—ã–ª–∫–∏ (ID: ${route.id})`);
      }
    }
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ URL:', e);
  }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è UI
function updateStatus(message) {
  if (status) {
    status.textContent = message;
  }
}

function toggleGenerateButton(disabled) {
  if (generateBtn) {
    generateBtn.disabled = disabled;
  }
}

function toggleCancelButton(show) {
  if (cancelBtn) {
    cancelBtn.style.display = show ? 'inline-block' : 'none';
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
function updateGlobalVars() {
  window.pointMarkers = pointMarkers;
  window.startPoint = getStartPoint();
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', initApp); 