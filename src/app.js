/**
 * –ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ —Å–≤—è–∑—ã–≤–∞–µ—Ç –∏—Ö –º–µ–∂–¥—É —Å–æ–±–æ–π
 */

console.log('üöÄ app.js –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...');

import { initMap, map, drawnItems, pointMarkers, getSelectedBounds, getStartPoint, updateSelectedBounds, updateStartPointPosition, clearPointMarkers } from './modules/mapModule.js';
import { initNavigation, updateTargetPointsList, resetCompletedPoints } from './modules/navigation.js';
import { generatePoints, cancelPointGeneration, downloadGPX } from './modules/pointGeneration.js';
import './modules/audioModuleAdvanced.js'; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –∞—É–¥–∏–æ –º–æ–¥—É–ª—è
import { saveRoute, getRouteById, getRoutesList, buildShareUrl } from './modules/storageAPI.js';
import { BACKEND_SIMPLE_BASE } from './modules/config.js';
import { initSequenceUI, generateAndDisplaySequence } from './modules/sequenceUI.js';
import { resetSequence } from './modules/routeSequence.js';
import { initFullscreenNavigation } from './modules/fullscreenNavigation.js';
import { initMediaSession } from './modules/mediaSessionManager.js';
import { clearMapDataCache } from './modules/optimizedOverpassAPI.js';
import { initUI, setStep as setUIStep, addApiLog, updateInfoPanel, showInfoPanel } from './modules/uiController.js';

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã (–±—É–¥—É—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≤ initApp)
let pointsInput, zoomInBtn, zoomOutBtn, gpsBtn;
let routesModal, routesModalClose, routesList, routesListEmpty;
let shareBtn, sequenceLink, startNavBtn;
let lastSavedRouteId = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
export function initApp() {
  console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è TrailSpot...');
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DOM —ç–ª–µ–º–µ–Ω—Ç—ã
  pointsInput = document.getElementById('pointsCount');
  zoomInBtn = document.getElementById('zoomInBtn');
  zoomOutBtn = document.getElementById('zoomOutBtn');
  gpsBtn = document.getElementById('gpsBtn');
  shareBtn = document.getElementById('shareBtn');
  routesModal = document.getElementById('routesModal');
  routesModalClose = document.getElementById('routesModalClose');
  routesList = document.getElementById('routesList');
  routesListEmpty = document.getElementById('routesListEmpty');
  sequenceLink = document.getElementById('sequenceLink');
  startNavBtn = document.getElementById('startNavBtn');
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
  initMap();
  initUI(); // –ù–æ–≤—ã–π UI –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
  initNavigation();
  initSequenceUI();
  initFullscreenNavigation();
  initMediaSession();
  
  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  setupEventHandlers();

  // –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ URL (?routeId=...)
  bootstrapFromUrl();
  
  // –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ (–≤—Ä–µ–º–µ–Ω–Ω–æ, –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  updateGlobalVars();
  setInterval(updateGlobalVars, 1000); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
  
  addApiLog('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ');
  console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventHandlers() {
  // Zoom –∫–Ω–æ–ø–∫–∏
  if (zoomInBtn) {
    zoomInBtn.addEventListener('click', () => {
      if (map) map.zoomIn();
    });
  }
  
  if (zoomOutBtn) {
    zoomOutBtn.addEventListener('click', () => {
      if (map) map.zoomOut();
    });
  }
  
  // GPS –∫–Ω–æ–ø–∫–∞
  if (gpsBtn) {
    gpsBtn.addEventListener('click', () => {
      if ('geolocation' in navigator) {
        addApiLog('–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏...');
        navigator.geolocation.getCurrentPosition(
          (position) => {
            const { latitude, longitude } = position.coords;
            if (map) {
              map.setView([latitude, longitude], 16);
              addApiLog(`–ü–æ–∑–∏—Ü–∏—è: ${latitude.toFixed(5)}, ${longitude.toFixed(5)}`);
            }
          },
          (error) => {
            addApiLog('‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏');
            console.error('Geolocation error:', error);
          }
        );
      } else {
        addApiLog('‚ùå –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
      }
    });
  }
  
  // –ö–Ω–æ–ø–∫–∞ "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è"
  if (shareBtn) {
    shareBtn.addEventListener('click', handleShareRoute);
  }
  
  // –ö–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é"
  if (startNavBtn) {
    startNavBtn.addEventListener('click', () => {
      import('./modules/navigation.js').then(nav => {
        // –ó–∞–ø—É—Å–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        addApiLog('üéØ –ó–∞–ø—É—Å–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏...');
      });
    });
  }
  
  // –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
  if (sequenceLink) {
    sequenceLink.addEventListener('click', (e) => {
      e.preventDefault();
      const sequenceModal = document.getElementById('sequenceModal');
      if (sequenceModal) {
        sequenceModal.style.display = 'flex';
      }
    });
  }

  // –ú–æ–¥–∞–ª–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤
  if (routesModalClose) {
    routesModalClose.addEventListener('click', closeRoutesModal);
  }
  if (routesModal) {
    routesModal.addEventListener('click', (e) => { 
      if (e.target === routesModal) closeRoutesModal(); 
    });
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
async function handleGenerateClick() {
  const count = parseInt(pointsInput.value, 10);
  
  // –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const difficultyLevelSelect = document.getElementById('difficultyLevel');
  const difficultyLevel = difficultyLevelSelect ? parseInt(difficultyLevelSelect.value) : 2;
  
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏
  resetSequence();
  resetCompletedPoints();
  
  // –û—á–∏—â–∞–µ–º –∫—ç—à –∫–∞—Ä—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö
  clearMapDataCache();
  
  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ mapModule
  const selectedBounds = getSelectedBounds();
  const startPoint = getStartPoint();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±–ª–∞—Å—Ç—å –≤—ã–±—Ä–∞–Ω–∞
  if (!selectedBounds || !selectedBounds.south || !selectedBounds.west || !selectedBounds.north || !selectedBounds.east) {
    updateStatus('‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ, –Ω–∞—Ä–∏—Å–æ–≤–∞–≤ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫');
    return;
  }
  
  await generatePoints(
    selectedBounds,
    startPoint,
    count,
    difficultyLevel,
    updateStatus,
    toggleGenerateButton,
    toggleCancelButton
  );
  
  // –ü–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ—á–µ–∫ —Å–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
  if (pointMarkers && pointMarkers.length > 0) {
    setTimeout(async () => {
      await generateAndDisplaySequence();
      updateTargetPointsList(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ—á–µ–∫ —Å –Ω–æ–≤–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
    }, 500); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Ç–æ—á–µ–∫
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ –æ—Ç–º–µ–Ω—ã
function handleCancelClick() {
  cancelPointGeneration();
  updateStatus('–û—Ç–º–µ–Ω–∞...');
  console.log('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.');
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è GPX
function handleDownloadGPX() {
  downloadGPX();
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –≤ backend
async function handleSaveRoute() {
  try {
    const selectedBounds = getSelectedBounds();
    const startPoint = getStartPoint();
    if (!selectedBounds || !startPoint) {
      updateStatus('–ù—É–∂–Ω—ã –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –∏ —Ç–æ—á–∫–∞ —Å—Ç–∞—Ä—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
      return;
    }
    if (!pointMarkers || pointMarkers.length === 0) {
      updateStatus('–ù–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
      return;
    }

    const points = pointMarkers.map((m, idx) => {
      const ll = m.getLatLng();
      return { lat: ll.lat, lon: ll.lng, name: String(idx + 1) };
    });

    const name = prompt('–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞:', `–ú–∞—Ä—à—Ä—É—Ç ${new Date().toLocaleString()}`) || '–ú–∞—Ä—à—Ä—É—Ç';
    const description = '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ—á–µ–∫';

    const boundsPayload = {
      south: selectedBounds.getSouth(),
      west: selectedBounds.getWest(),
      north: selectedBounds.getNorth(),
      east: selectedBounds.getEast()
    };

    const route = await saveRoute({ name, description, points, startPoint, bounds: boundsPayload });
    lastSavedRouteId = route.id;
    updateStatus(`–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ (ID: ${route.id})`);
  } catch (e) {
    console.error(e);
    updateStatus('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞');
  }
}

// ===== –ú–û–î–ê–õ–ö–ê –ú–ê–†–®–†–£–¢–û–í =====
function openRoutesModal() {
  renderRoutesList();
  routesModal.style.display = 'flex';
}

function closeRoutesModal() {
  routesModal.style.display = 'none';
}

async function renderRoutesList() {
  try {
    routesList.innerHTML = '';
    const list = await getRoutesList();
    if (!Array.isArray(list) || list.length === 0) {
      routesListEmpty.style.display = 'block';
      return;
    }
    routesListEmpty.style.display = 'none';

    list.forEach((r) => {
      const item = document.createElement('div');
      item.style.border = '1px solid #eee';
      item.style.borderRadius = '8px';
      item.style.padding = '10px';
      item.style.display = 'grid';
      item.style.gap = '6px';

      const title = document.createElement('div');
      title.style.fontWeight = '600';
      title.textContent = r.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';

      const meta = document.createElement('div');
      meta.style.color = '#777';
      meta.style.fontSize = '12px';
      meta.textContent = r.id;

      const actions = document.createElement('div');
      actions.style.display = 'grid';
      actions.style.gridTemplateColumns = '1fr 1fr';
      actions.style.gap = '6px';

      const loadBtn = document.createElement('button');
      loadBtn.textContent = '–ó–∞–≥—Ä—É–∑–∏—Ç—å';
      loadBtn.style.margin = '0';
      loadBtn.addEventListener('click', async () => {
        const route = await getRouteById(r.id);
        if (!route) { updateStatus('–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'); return; }
        renderRouteOnMap(route);
        lastSavedRouteId = route.id;
        updateStatus(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ (ID: ${route.id})`);
        closeRoutesModal();
      });

      const shareBtn = document.createElement('button');
      shareBtn.textContent = '–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É';
      shareBtn.style.margin = '0';
      shareBtn.addEventListener('click', async () => {
        const url = buildShareUrl(r.id);
        try {
          await navigator.clipboard.writeText(url);
          updateStatus('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞');
        } catch (_) {
          updateStatus('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É');
        }
      });

      actions.appendChild(loadBtn);
      actions.appendChild(shareBtn);

      item.appendChild(title);
      item.appendChild(meta);
      item.appendChild(actions);
      routesList.appendChild(item);
    });
  } catch (e) {
    console.error(e);
    routesListEmpty.style.display = 'block';
  }
}

// –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π
async function handleShareRoute() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ—á–µ–∫
    if (!pointMarkers || pointMarkers.length === 0) {
      addApiLog('‚ùå –ù–µ—Ç —Ç–æ—á–µ–∫ –¥–ª—è –æ–±–º–µ–Ω–∞');
      alert('–°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —Ç–æ—á–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–µ!');
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—É–∂–µ –≥–æ—Ç–æ–≤—É—é!)
    const { getCurrentSequence } = await import('./modules/routeSequence.js');
    const sequence = getCurrentSequence();
    
    if (!sequence || sequence.length === 0) {
      addApiLog('‚ùå –ù–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');
      alert('–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–∞—Ä—à—Ä—É—Ç–∞ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤–∞.\n–ü–æ–¥–æ–∂–¥–∏—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞.');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç–æ—á–µ–∫
    if (sequence.length !== pointMarkers.length) {
      addApiLog('‚ùå –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ—á–∫–∞–º');
      alert('–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–∞—Ä—à—Ä—É—Ç–∞ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤–∞.\n–ü–æ–¥–æ–∂–¥–∏—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞.');
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Ç–æ—á–∫—É
    const startPoint = getStartPoint();
    if (!startPoint) {
      addApiLog('‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ç–æ—á–∫–∞ —Å—Ç–∞—Ä—Ç–∞');
      alert('–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ç–æ—á–∫–∞ —Å—Ç–∞—Ä—Ç–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ—ë –Ω–∞ –∫–∞—Ä—Ç–µ.');
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏
    const { getRouteStats } = await import('./modules/routeSequence.js');
    const stats = getRouteStats();
    
    // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ—á–µ–∫ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ (—É–∂–µ –≥–æ—Ç–æ–≤—ã–µ!)
    const pointsData = pointMarkers.map((marker, idx) => {
      const latlng = marker.getLatLng();
      return {
        lat: latlng.lat,
        lng: latlng.lng,
        index: idx
      };
    });
    
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
    const shareData = {
      points: pointsData,
      sequence: sequence, // –ì–æ—Ç–æ–≤–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å!
      startPoint: { lat: startPoint.lat, lng: startPoint.lng }, // –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ç–æ—á–∫–∞!
      distance: stats ? stats.totalDistance : 0, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏—Å—Ç–∞–Ω—Ü–∏—é!
      timestamp: Date.now()
    };
    
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º shareData:', shareData);
    console.log('üìè –°–æ—Ö—Ä–∞–Ω—è–µ–º–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è:', stats ? stats.totalDistance : 0, '–º');
    
    // –ö–æ–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Base64
    const jsonString = JSON.stringify(shareData);
    const encoded = btoa(unescape(encodeURIComponent(jsonString)));
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º URL
    const baseUrl = window.location.origin + window.location.pathname;
    const longUrl = `${baseUrl}?share=${encoded}`;
    
    // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∫—Ä–∞—Ç–∏—Ç—å URL —á–µ—Ä–µ–∑ backend (–∏–∑–±–µ–≥–∞–µ–º –ø—Ä–æ–±–ª–µ–º —Å CORS)
    let finalUrl = longUrl;
    console.log('üîó –ò—Å—Ö–æ–¥–Ω–∞—è —Å—Å—ã–ª–∫–∞:', longUrl);
    try {
      const shortenResponse = await fetch(`${BACKEND_SIMPLE_BASE}/shorten`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ url: longUrl })
      });
      
      if (shortenResponse.ok) {
        const data = await shortenResponse.json();
        console.log('üì¶ –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', data);
        if (data.short_url) {
          finalUrl = data.short_url;
          if (finalUrl !== longUrl) {
            console.log('‚úÖ –°—Å—ã–ª–∫–∞ —Å–æ–∫—Ä–∞—â–µ–Ω–∞:', finalUrl);
            addApiLog('‚úÖ –°—Å—ã–ª–∫–∞ —Å–æ–∫—Ä–∞—â–µ–Ω–∞');
          } else {
            console.log('‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –Ω–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—É—é)');
            addApiLog('‚ö†Ô∏è –°–µ—Ä–≤–∏—Å—ã —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É');
          }
        }
      }
    } catch (e) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–∏:', e);
      addApiLog('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∏ –∫–æ–ø–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É (–∫–æ—Ä–æ—Ç–∫—É—é –∏–ª–∏ –ø–æ–ª–Ω—É—é)
    if (finalUrl.length > 2000) {
      addApiLog('‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç–æ—á–µ–∫ –¥–ª—è –æ–±–º–µ–Ω–∞ —á–µ—Ä–µ–∑ URL');
      alert('–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç–æ—á–µ–∫ –¥–ª—è –æ–±–º–µ–Ω–∞ —á–µ—Ä–µ–∑ URL.\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ 30-40 —Ç–æ—á–µ–∫.');
      return;
    }
    
    // –ö–æ–ø–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É (–∫–æ—Ä–æ—Ç–∫—É—é –∏–ª–∏ –ø–æ–ª–Ω—É—é)
    await navigator.clipboard.writeText(finalUrl);
    console.log('üìã –ò—Ç–æ–≥–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞:', finalUrl);
    
    const alertMessage = finalUrl !== longUrl 
      ? '‚úÖ –ö–æ—Ä–æ—Ç–∫–∞—è —Å—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë –¥—Ä—É–≥—É, –∏ –æ–Ω —Å—Ä–∞–∑—É —É–≤–∏–¥–∏—Ç –≤—Å–µ —Ç–æ—á–∫–∏ –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–∞—Ä—à—Ä—É—Ç–∞.'
      : '‚úÖ –°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –ø–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è)\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë –¥—Ä—É–≥—É, –∏ –æ–Ω —Å—Ä–∞–∑—É —É–≤–∏–¥–∏—Ç –≤—Å–µ —Ç–æ—á–∫–∏ –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–∞—Ä—à—Ä—É—Ç–∞.';
    alert(alertMessage);
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Å—Å—ã–ª–∫–∏:', e);
    addApiLog('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Å—Å—ã–ª–∫–∏');
    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
}

// –û—Ç—Ä–∏—Å–æ–≤–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç –Ω–∞ –∫–∞—Ä—Ç–µ –ø–æ –¥–∞–Ω–Ω—ã–º backend
function renderRouteOnMap(route) {
  try {
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º bounds
    if (route.bounds && typeof L !== 'undefined') {
      const b = route.bounds;
      const bounds = L.latLngBounds([b.south, b.west], [b.north, b.east]);
      // –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
      drawnItems.getLayers().forEach(l => { if (l instanceof L.Rectangle) drawnItems.removeLayer(l); });
      const rect = L.rectangle(bounds, { color: '#3388ff', weight: 2 });
      drawnItems.addLayer(rect);
      updateSelectedBounds(bounds);
      if (map) map.fitBounds(bounds, { padding: [20, 20] });
    }

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—á–∫—É —Å—Ç–∞—Ä—Ç–∞
    if (route.startPoint && typeof route.startPoint.lat === 'number' && typeof route.startPoint.lon === 'number') {
      updateStartPointPosition(route.startPoint.lat, route.startPoint.lon);
    }

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏
    resetSequence();
    resetCompletedPoints();

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—á–∫–∏
    clearPointMarkers();
    if (Array.isArray(route.points)) {
      route.points.forEach((p, idx) => {
        if (typeof p.lat === 'number' && typeof p.lon === 'number') {
          const marker = L.marker([p.lat, p.lon], {
            icon: L.divIcon({
              className: 'custom-marker',
              html: `<div style="background: green; color: white; border-radius: 50%; width: 30px; height: 30px; display: flex; align-items: center; justify-content: center; font-weight: bold; border: 2px solid white;">${idx + 1}</div>`,
              iconSize: [30, 30],
              iconAnchor: [15, 15]
            })
          }).addTo(map);
          pointMarkers.push(marker);
        }
      });
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
      setTimeout(() => {
        generateAndDisplaySequence();
        updateTargetPointsList(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ—á–µ–∫
      }, 500);
    }
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞:', e);
  }
}

// –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ URL
async function bootstrapFromUrl() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Å—ã–ª–∫–∏ —Ç–∏–ø–∞ /r/route_id
    const pathMatch = window.location.pathname.match(/^\/r\/([a-f0-9]{8})$/);
    if (pathMatch) {
      const routeId = pathMatch[1];
      console.log('üîó –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Ä—à—Ä—É—Ç –∏–∑ –∫–æ—Ä–æ—Ç–∫–æ–π —Å—Å—ã–ª–∫–∏:', routeId);
      
      try {
        const response = await fetch(`${BACKEND_SIMPLE_BASE}/r/${routeId}`);
        if (response.ok) {
          const data = await response.json();
          if (data.points && Array.isArray(data.points) && data.sequence && Array.isArray(data.sequence)) {
            await restoreRouteFromShareData(data);
            return;
          }
        } else {
          addApiLog('‚ùå –ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
          alert('–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏ –∏—Å—Ç–µ–∫.');
        }
      } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞:', e);
        addApiLog('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞');
        alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞ –∏–∑ —Å—Å—ã–ª–∫–∏.');
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º share
    const params = new URLSearchParams(window.location.search);
    const shareData = params.get('share');
    if (shareData) {
      try {
        // –î–µ–∫–æ–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        const decoded = decodeURIComponent(escape(atob(shareData)));
        const data = JSON.parse(decoded);
        
        if (data.points && Array.isArray(data.points) && data.sequence && Array.isArray(data.sequence)) {
          // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—á–∫–∏ –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ë–ï–ó –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
          await restoreRouteFromShareData(data);
          return;
        }
      } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Å—ã–ª–∫–∏:', e);
        addApiLog('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –∏–∑ —Å—Å—ã–ª–∫–∏');
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –∏–∑ —Å—Å—ã–ª–∫–∏.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏.');
      }
    }
    
    // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç —Å routeId (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    const routeId = params.get('routeId');
    if (routeId) {
      const route = await getRouteById(routeId);
      if (route) {
        renderRouteOnMap(route);
        lastSavedRouteId = route.id;
        addApiLog(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ —Å—Å—ã–ª–∫–∏ (ID: ${route.id})`);
      }
    }
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ URL:', e);
  }
}

// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –∏–∑ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–ë–ï–ó –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏!)
async function restoreRouteFromShareData(data) {
  try {
    const { clearPointMarkers, updateStartPointPosition } = await import('./modules/mapModule.js');
    const { updateSequence, getRouteStats } = await import('./modules/routeSequence.js');
    const { updateSequenceDisplay } = await import('./modules/sequenceUI.js');
    const { showInfoPanel, updateInfoPanel } = await import('./modules/uiController.js');
    
    addApiLog('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –∏–∑ —Å—Å—ã–ª–∫–∏...');
    
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–æ—á–∫–∏ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    clearPointMarkers();
    resetCompletedPoints();
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—á–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–µ (–±–µ–∑ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏!)
    const restoredMarkers = [];
    for (const pointData of data.points) {
      const marker = L.marker([pointData.lat, pointData.lng], {
        icon: L.divIcon({
          className: 'custom-marker',
          html: `<div style="background: green; color: white; border-radius: 50%; width: 30px; height: 30px; display: flex; align-items: center; justify-content: center; font-weight: bold; border: 2px solid white;">${pointData.index + 1}</div>`,
          iconSize: [30, 30],
          iconAnchor: [15, 15]
        })
      }).addTo(map);
      pointMarkers.push(marker);
      restoredMarkers.push(marker);
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Ç–æ—á–∫—É –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (data.startPoint && data.startPoint.lat && data.startPoint.lng) {
      updateStartPointPosition(data.startPoint.lat, data.startPoint.lng);
    } else if (restoredMarkers.length > 0) {
      // –ï—Å–ª–∏ —Å—Ç–∞—Ä—Ç–æ–≤–∞—è —Ç–æ—á–∫–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä –æ–±–ª–∞—Å—Ç–∏ –∫–∞–∫ fallback
      const bounds = L.latLngBounds(restoredMarkers.map(m => m.getLatLng()));
      const center = bounds.getCenter();
      updateStartPointPosition(center.lat, center.lng);
    }
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–æ—Ç–æ–≤—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–±–µ–∑ –ø–µ—Ä–µ—Å—á–µ—Ç–∞!)
    updateSequence(data.sequence);
    
    // –í—ã—á–∏—Å–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã
    if (restoredMarkers.length > 0) {
      const bounds = L.latLngBounds(
        restoredMarkers.map(m => m.getLatLng())
      );
      map.fitBounds(bounds, { padding: [50, 50] });
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ë–ï–ó –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ - –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–æ—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    setTimeout(async () => {
      console.log('üì• –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ share:', data);
      console.log('üìè –î–∏—Å—Ç–∞–Ω—Ü–∏—è –≤ –¥–∞–Ω–Ω—ã—Ö:', data.distance, '–º');
      
      // –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —à–∞–≥
      const { hideHint, setStep, setRestoredFromShare } = await import('./modules/uiController.js');
      hideHint();
      setStep('points_generated');
      setRestoredFromShare(true); // –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –¥–∏—Å—Ç–∞–Ω—Ü–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
      let distanceKm = 0;
      if (data.distance && data.distance > 0) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –¥–∏—Å—Ç–∞–Ω—Ü–∏—é (—Å —É—á–µ—Ç–æ–º –≥—Ä–∞—Ñ–∞ —Ç—Ä–æ–ø)
        distanceKm = data.distance / 1000;
        console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –¥–∏—Å—Ç–∞–Ω—Ü–∏—é:', distanceKm, '–∫–º (–±—ã–ª–æ', data.distance, '–º)');
      } else {
        // Fallback: —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –Ω–∞ –ª–µ—Ç—É
        console.log('‚ö†Ô∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–Ω–æ–≤–æ');
        const stats = getRouteStats();
        if (stats) {
          distanceKm = stats.totalDistance / 1000;
          console.log('üìè –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è:', distanceKm, '–∫–º');
        }
      }
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–∑ –≥–æ—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const sequenceText = data.sequence.map(idx => idx + 1).join(' ‚Üí ');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å —Å –≥–æ—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (–ë–ï–ó –≤—ã–∑–æ–≤–∞ updateSequenceDisplay!)
      updateInfoPanel(
        restoredMarkers.length,
        `–°–¢–ê–†–¢ ‚Üí ${sequenceText} ‚Üí –°–¢–ê–†–¢`,
        distanceKm
      );
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞—á–∞—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é"
      showInfoPanel();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ—á–µ–∫ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
      updateTargetPointsList();
      
      addApiLog(`‚úÖ –ú–∞—Ä—à—Ä—É—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (${restoredMarkers.length} —Ç–æ—á–µ–∫)`);
    }, 300);
    
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞:', e);
    addApiLog('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞');
    alert('–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ –∏–∑ —Å—Å—ã–ª–∫–∏.');
  }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è UI
function updateStatus(message) {
  if (status) {
    status.textContent = message;
  }
}

function toggleGenerateButton(disabled) {
  if (generateBtn) {
    generateBtn.disabled = disabled;
  }
}

function toggleCancelButton(show) {
  if (cancelBtn) {
    cancelBtn.style.display = show ? 'inline-block' : 'none';
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
function updateGlobalVars() {
  window.pointMarkers = pointMarkers;
  window.startPoint = getStartPoint();
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', initApp); 