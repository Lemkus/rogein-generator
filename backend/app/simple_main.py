"""
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è FastAPI –±—ç–∫–µ–Ω–¥–∞ –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
–¢–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
"""

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel, Field
from typing import List, Optional, Dict, Any
import json
import os
import uuid
from datetime import datetime

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="–†–æ–≥–µ–π–Ω –ù–∞–≤–∏–≥–∞—Ü–∏—è API (–ü—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è)",
    description="–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π API –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π",
    version="1.0.0-simple"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:8000", "http://127.0.0.1:8000"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü—Ä–æ—Å—Ç–æ–µ —Ñ–∞–π–ª–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
DATA_DIR = "data"
ROUTES_FILE = os.path.join(DATA_DIR, "routes.json")
TRAINING_FILE = os.path.join(DATA_DIR, "training.json")

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
os.makedirs(DATA_DIR, exist_ok=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
if not os.path.exists(ROUTES_FILE):
    with open(ROUTES_FILE, 'w', encoding='utf-8') as f:
        json.dump([], f, ensure_ascii=False)

if not os.path.exists(TRAINING_FILE):
    with open(TRAINING_FILE, 'w', encoding='utf-8') as f:
        json.dump([], f, ensure_ascii=False)


# Pydantic –º–æ–¥–µ–ª–∏
class PointCoordinate(BaseModel):
    lat: float = Field(..., ge=-90, le=90)
    lng: float = Field(..., ge=-180, le=180)


class RouteBounds(BaseModel):
    sw_lat: float = Field(..., ge=-90, le=90)
    sw_lng: float = Field(..., ge=-180, le=180)
    ne_lat: float = Field(..., ge=-90, le=90)
    ne_lng: float = Field(..., ge=-180, le=180)


class RouteCreate(BaseModel):
    title: str = Field(..., min_length=1, max_length=200)
    description: Optional[str] = Field(None, max_length=2000)
    bounds: RouteBounds
    start_point: PointCoordinate
    points: List[PointCoordinate] = Field(..., min_length=1, max_length=50)
    difficulty_level: int = Field(1, ge=1, le=5)
    estimated_time_minutes: Optional[int] = Field(None, ge=1, le=1440)
    is_public: bool = Field(True)


class RouteResponse(BaseModel):
    id: str
    title: str
    description: Optional[str]
    bounds: RouteBounds
    start_point: PointCoordinate
    points: List[PointCoordinate]
    points_count: int
    difficulty_level: int
    estimated_time_minutes: Optional[int]
    is_public: bool
    created_at: str
    views_count: int = 0


# –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def load_routes() -> List[Dict]:
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open(ROUTES_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except:
        return []


def save_routes(routes: List[Dict]):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç—ã –≤ —Ñ–∞–π–ª"""
    with open(ROUTES_FILE, 'w', encoding='utf-8') as f:
        json.dump(routes, f, ensure_ascii=False, indent=2)


def load_training_sessions() -> List[Dict]:
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open(TRAINING_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except:
        return []


def save_training_sessions(sessions: List[Dict]):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ —Ñ–∞–π–ª"""
    with open(TRAINING_FILE, 'w', encoding='utf-8') as f:
        json.dump(sessions, f, ensure_ascii=False, indent=2)


# API Endpoints
@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    return {
        "message": "üéØ –†–æ–≥–µ–π–Ω –ù–∞–≤–∏–≥–∞—Ü–∏—è API (–ü—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è) —Ä–∞–±–æ—Ç–∞–µ—Ç!",
        "version": "1.0.0-simple",
        "docs": "/docs",
        "storage": "JSON —Ñ–∞–π–ª—ã",
        "endpoints": {
            "routes": "/api/routes",
            "training": "/api/training"
        }
    }


@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    routes_count = len(load_routes())
    training_count = len(load_training_sessions())
    
    return {
        "status": "healthy",
        "service": "rogaine-navigation-simple-api",
        "storage": {
            "routes_count": routes_count,
            "training_count": training_count,
            "data_directory": DATA_DIR
        }
    }


@app.get("/api/routes", response_model=List[RouteResponse])
async def get_routes(
    limit: int = 20,
    search: Optional[str] = None
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤"""
    routes = load_routes()
    
    # –ü—Ä–æ—Å—Ç–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    if search:
        routes = [r for r in routes if search.lower() in r.get('title', '').lower()]
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    routes = routes[:limit]
    
    return routes


@app.post("/api/routes", response_model=RouteResponse)
async def create_route(route_data: RouteCreate):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç"""
    routes = load_routes()
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç
    new_route = {
        "id": str(uuid.uuid4()),
        "title": route_data.title,
        "description": route_data.description,
        "bounds": route_data.bounds.model_dump(),
        "start_point": route_data.start_point.model_dump(),
        "points": [p.model_dump() for p in route_data.points],
        "points_count": len(route_data.points),
        "difficulty_level": route_data.difficulty_level,
        "estimated_time_minutes": route_data.estimated_time_minutes,
        "is_public": route_data.is_public,
        "created_at": datetime.now().isoformat(),
        "views_count": 0
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
    routes.append(new_route)
    save_routes(routes)
    
    return new_route


@app.get("/api/routes/{route_id}", response_model=RouteResponse)
async def get_route(route_id: str):
    """–ü–æ–ª—É—á–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –ø–æ ID"""
    routes = load_routes()
    
    # –ò—â–µ–º –º–∞—Ä—à—Ä—É—Ç
    route = next((r for r in routes if r["id"] == route_id), None)
    
    if not route:
        raise HTTPException(status_code=404, detail="–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
    route["views_count"] = route.get("views_count", 0) + 1
    save_routes(routes)
    
    return route


@app.delete("/api/routes/{route_id}")
async def delete_route(route_id: str):
    """–£–¥–∞–ª–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç"""
    routes = load_routes()
    
    # –ò—â–µ–º –∏ —É–¥–∞–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç
    route_index = next((i for i, r in enumerate(routes) if r["id"] == route_id), None)
    
    if route_index is None:
        raise HTTPException(status_code=404, detail="–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    deleted_route = routes.pop(route_index)
    save_routes(routes)
    
    return {"message": f"–ú–∞—Ä—à—Ä—É—Ç '{deleted_route['title']}' —É–¥–∞–ª–µ–Ω"}


@app.post("/api/routes/{route_id}/share")
async def create_route_share(route_id: str):
    """–°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –æ–±–º–µ–Ω–∞ –º–∞—Ä—à—Ä—É—Ç–æ–º"""
    routes = load_routes()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞
    route = next((r for r in routes if r["id"] == route_id), None)
    
    if not route:
        raise HTTPException(status_code=404, detail="–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ—Å—Ç–∞—è —Å—Å—ã–ª–∫–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–æ–∫–µ–Ω—ã)
    share_url = f"/shared/{route_id}"
    
    return {
        "share_token": route_id,  # –£–ø—Ä–æ—â–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º ID –º–∞—Ä—à—Ä—É—Ç–∞
        "share_url": share_url,
        "full_url": f"http://localhost:8001{share_url}",
        "expires_at": None  # –ë–µ–∑ –∏—Å—Ç–µ—á–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
    }


@app.get("/shared/{route_id}")
async def get_shared_route(route_id: str):
    """–ü–æ–ª—É—á–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –ø–æ —Å—Å—ã–ª–∫–µ –æ–±–º–µ–Ω–∞"""
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–±—ã—á–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞
    return await get_route(route_id)


# –ü—Ä–æ—Å—Ç—ã–µ endpoints –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
@app.get("/api/training")
async def get_training_sessions():
    """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
    sessions = load_training_sessions()
    return {"sessions": sessions, "count": len(sessions)}


@app.post("/api/training")
async def create_training_session(
    route_id: str,
    started_at: Optional[str] = None
):
    """–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"""
    sessions = load_training_sessions()
    
    new_session = {
        "id": str(uuid.uuid4()),
        "route_id": route_id,
        "started_at": started_at or datetime.now().isoformat(),
        "finished_at": None,
        "points_visited": 0,
        "points_total": 0,
        "status": "in_progress"
    }
    
    sessions.append(new_session)
    save_training_sessions(sessions)
    
    return new_session


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="localhost", port=8001)
